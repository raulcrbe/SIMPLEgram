ActionBar/ActionBar.java:        backButtonImageView.setContentDescription(LocaleController.getString("AccDescrGoBack", R.string.AccDescrGoBack));
ActionBar/ActionBarMenuItem.java:            clearButton.setContentDescription(LocaleController.getString("ClearButton", R.string.ClearButton));
ActionBar/AlertDialog.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ActionBar/AlertDialog.java:        builder.setMessage(LocaleController.getString("StopLoading", R.string.StopLoading));
ActionBar/AlertDialog.java:        builder.setPositiveButton(LocaleController.getString("WaitMore", R.string.WaitMore), null);
ActionBar/AlertDialog.java:        builder.setNegativeButton(LocaleController.getString("Stop", R.string.Stop), (dialogInterface, i) -> {
ActionBar/FloatingToolbar.java:                mOverflowButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
ActionBar/FloatingToolbar.java:                mOverflowButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
ActionBar/Theme.java:                return LocaleController.getString("ThemeClassic", R.string.ThemeClassic);
ActionBar/Theme.java:                return LocaleController.getString("ThemeDark", R.string.ThemeDark);
ActionBar/Theme.java:                return LocaleController.getString("ThemeArcticBlue", R.string.ThemeArcticBlue);
ActionBar/Theme.java:                return LocaleController.getString("ThemeDay", R.string.ThemeDay);
ActionBar/Theme.java:                return LocaleController.getString("ThemeNight", R.string.ThemeNight);
ActionIntroActivity.java:                    String text = LocaleController.getString("AuthAnotherClientInfo1", R.string.AuthAnotherClientInfo1);
ActionIntroActivity.java:                        spanned.setSpan(new URLSpanNoUnderline(LocaleController.getString("AuthAnotherClientDownloadClientUrl", R.string.AuthAnotherClientDownloadClientUrl)), index1, index2 - 1, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
ActionIntroActivity.java:                    desctiptionLines[a * 2 + 1].setText(LocaleController.getString("AuthAnotherClientInfo2", R.string.AuthAnotherClientInfo2));
ActionIntroActivity.java:                    desctiptionLines[a * 2 + 1].setText(LocaleController.getString("AuthAnotherClientInfo3", R.string.AuthAnotherClientInfo3));
ActionIntroActivity.java:                    builder.setTitle(LocaleController.getString("PhoneNumberChangeTitle", R.string.PhoneNumberChangeTitle));
ActionIntroActivity.java:                    builder.setMessage(LocaleController.getString("PhoneNumberAlert", R.string.PhoneNumberAlert));
ActionIntroActivity.java:                    builder.setPositiveButton(LocaleController.getString("Change", R.string.Change), (dialogInterface, i) -> presentFragment(new ChangePhoneActivity(), true));
ActionIntroActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ActionIntroActivity.java:                titleTextView.setText(LocaleController.getString("ChannelAlertTitle", R.string.ChannelAlertTitle));
ActionIntroActivity.java:                descriptionText.setText(LocaleController.getString("ChannelAlertText", R.string.ChannelAlertText));
ActionIntroActivity.java:                buttonTextView.setText(LocaleController.getString("ChannelAlertCreate2", R.string.ChannelAlertCreate2));
ActionIntroActivity.java:                titleTextView.setText(LocaleController.getString("PeopleNearby", R.string.PeopleNearby));
ActionIntroActivity.java:                descriptionText.setText(LocaleController.getString("PeopleNearbyAccessInfo", R.string.PeopleNearbyAccessInfo));
ActionIntroActivity.java:                buttonTextView.setText(LocaleController.getString("PeopleNearbyAllowAccess", R.string.PeopleNearbyAllowAccess));
ActionIntroActivity.java:                titleTextView.setText(LocaleController.getString("PeopleNearby", R.string.PeopleNearby));
ActionIntroActivity.java:                descriptionText.setText(LocaleController.getString("PeopleNearbyGpsInfo", R.string.PeopleNearbyGpsInfo));
ActionIntroActivity.java:                buttonTextView.setText(LocaleController.getString("PeopleNearbyGps", R.string.PeopleNearbyGps));
ActionIntroActivity.java:                titleTextView.setText(LocaleController.getString("AuthAnotherClient", R.string.AuthAnotherClient));
ActionIntroActivity.java:                buttonTextView.setText(LocaleController.getString("AuthAnotherClientScan", R.string.AuthAnotherClientScan));
ActionIntroActivity.java:                titleTextView.setText(LocaleController.getString("NearbyCreateGroup", R.string.NearbyCreateGroup));
ActionIntroActivity.java:                descriptionText.setText(LocaleController.getString("NearbyCreateGroupInfo", R.string.NearbyCreateGroupInfo));
ActionIntroActivity.java:                descriptionText2.setText(LocaleController.getString("NearbyCreateGroupInfo2", R.string.NearbyCreateGroupInfo2));
ActionIntroActivity.java:                buttonTextView.setText(LocaleController.getString("NearbyStartGroup", R.string.NearbyStartGroup));
ActionIntroActivity.java:                titleTextView.setText(LocaleController.getString("PhoneNumberChange2", R.string.PhoneNumberChange2));
ActionIntroActivity.java:                descriptionText.setText(AndroidUtilities.replaceTags(LocaleController.getString("PhoneNumberHelp", R.string.PhoneNumberHelp)));
ActionIntroActivity.java:                buttonTextView.setText(LocaleController.getString("PhoneNumberChange2", R.string.PhoneNumberChange2));
ActionIntroActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ActionIntroActivity.java:        builder.setMessage(LocaleController.getString("PermissionNoLocationPosition", R.string.PermissionNoLocationPosition));
ActionIntroActivity.java:        builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
ActionIntroActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ActionIntroActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ActionIntroActivity.java:                    builder.setMessage(LocaleController.getString("PermissionNoLocationPosition", R.string.PermissionNoLocationPosition));
ActionIntroActivity.java:                    builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
ActionIntroActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ActionIntroActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ActionIntroActivity.java:                builder.setMessage(LocaleController.getString("QRCodePermissionNoCamera", R.string.QRCodePermissionNoCamera));
ActionIntroActivity.java:                builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
ActionIntroActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Adapters/ContactsAdapter.java:                            textCell.setTextAndIcon(LocaleController.getString("InviteFriends", R.string.InviteFriends), R.drawable.menu_invite, false);
Adapters/ContactsAdapter.java:                            textCell.setTextAndIcon(LocaleController.getString("AddPeopleNearby", R.string.AddPeopleNearby), R.drawable.menu_location, false);
Adapters/ContactsAdapter.java:                            textCell.setTextAndIcon(LocaleController.getString("ChannelInviteViaLink", R.string.ChannelInviteViaLink), R.drawable.profile_link, false);
Adapters/ContactsAdapter.java:                            textCell.setTextAndIcon(LocaleController.getString("InviteToGroupByLink", R.string.InviteToGroupByLink), R.drawable.profile_link, false);
Adapters/ContactsAdapter.java:                            textCell.setTextAndIcon(LocaleController.getString("NewGroup", R.string.NewGroup), R.drawable.menu_groups, false);
Adapters/ContactsAdapter.java:                            textCell.setTextAndIcon(LocaleController.getString("NewSecretChat", R.string.NewSecretChat), R.drawable.menu_secret, false);
Adapters/ContactsAdapter.java:                            textCell.setTextAndIcon(LocaleController.getString("NewChannel", R.string.NewChannel), R.drawable.menu_broadcast, false);
Adapters/ContactsAdapter.java:                    sectionCell.setText(LocaleController.getString("Contacts", R.string.Contacts));
Adapters/ContactsAdapter.java:                    sectionCell.setText(LocaleController.getString("SortedByName", R.string.SortedByName));
Adapters/ContactsAdapter.java:                    sectionCell.setText(LocaleController.getString("SortedByLastSeen", R.string.SortedByLastSeen));
Adapters/DialogsAdapter.java:                headerCell.setText(LocaleController.getString("RecentlyViewed", R.string.RecentlyViewed));
Adapters/DialogsAdapter.java:                textView.setText(LocaleController.getString("RecentlyViewedHide", R.string.RecentlyViewedHide));
Adapters/DialogsAdapter.java:                        cell.setText(LocaleController.getString("ImportHeader", R.string.ImportHeader));
Adapters/DialogsAdapter.java:                        cell.setText(LocaleController.getString("ImportHeaderContacts", R.string.ImportHeaderContacts));
Adapters/DialogsAdapter.java:                    cell.setText(LocaleController.getString("YourContacts", R.string.YourContacts));
Adapters/DialogsAdapter.java:                cell.setText(LocaleController.getString("TapOnThePencil", R.string.TapOnThePencil));
Adapters/DialogsAdapter.java:                cell.setTextAndIcon(LocaleController.getString("CreateGroupForImport", R.string.CreateGroupForImport), R.drawable.groups_create, dialogsCount != 0);
Adapters/DialogsSearchAdapter.java:                    name = LocaleController.getString("SavedMessages", R.string.SavedMessages);
Adapters/DialogsSearchAdapter.java:                        cell.setText(LocaleController.getString("ChatHints", R.string.ChatHints));
Adapters/DialogsSearchAdapter.java:                        cell.setText(LocaleController.getString("Recent", R.string.Recent), LocaleController.getString("ClearButton", R.string.ClearButton), v -> {
Adapters/DialogsSearchAdapter.java:                    cell.setText(LocaleController.getString("Hashtags", R.string.Hashtags), LocaleController.getString("ClearButton", R.string.ClearButton), v -> {
Adapters/DialogsSearchAdapter.java:                        cell.setText(LocaleController.getString("PhoneNumberSearch", R.string.PhoneNumberSearch));
Adapters/DialogsSearchAdapter.java:                            cell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
Adapters/DialogsSearchAdapter.java:                            cell.setText(LocaleController.getString("SearchMessages", R.string.SearchMessages));
Adapters/DialogsSearchAdapter.java:                cell.setText(LocaleController.formatString("AddContactByPhone", R.string.AddContactByPhone, PhoneFormat.getInstance().format("+" + str)), false);
Adapters/DrawerLayoutAdapter.java:        items.add(new Item(2, LocaleController.getString("NewGroup", R.string.NewGroup), newGroupIcon));
Adapters/DrawerLayoutAdapter.java:        //items.add(new Item(3, LocaleController.getString("NewSecretChat", R.string.NewSecretChat), newSecretIcon));
Adapters/DrawerLayoutAdapter.java:        //items.add(new Item(4, LocaleController.getString("NewChannel", R.string.NewChannel), newChannelIcon));
Adapters/DrawerLayoutAdapter.java:        items.add(new Item(6, LocaleController.getString("AddContactTitle", R.string.AddContactTitle), contactsIcon));
Adapters/DrawerLayoutAdapter.java:        items.add(new Item(10, LocaleController.getString("Calls", R.string.Calls), callsIcon));
Adapters/DrawerLayoutAdapter.java:            items.add(new Item(12, LocaleController.getString("PeopleNearby", R.string.PeopleNearby), peopleNearbyIcon));
Adapters/DrawerLayoutAdapter.java:        items.add(new Item(11, LocaleController.getString("SavedMessages", R.string.SavedMessages), savedIcon));
Adapters/DrawerLayoutAdapter.java:        items.add(new Item(8, LocaleController.getString("Settings", R.string.Settings), settingsIcon));
Adapters/DrawerLayoutAdapter.java:        items.add(new Item(7, LocaleController.getString("InviteFriends", R.string.InviteFriends), inviteIcon));
Adapters/DrawerLayoutAdapter.java:        items.add(new Item(9, LocaleController.getString("TelegramFAQ", R.string.TelegramFAQ), helpIcon));
Adapters/FiltersView.java:            new MediaFilterData(R.drawable.search_media, R.drawable.search_media_filled, LocaleController.getString("SharedMediaTab2", R.string.SharedMediaTab2), new TLRPC.TL_inputMessagesFilterPhotoVideo(), FILTER_TYPE_MEDIA),
Adapters/FiltersView.java:            new MediaFilterData(R.drawable.search_links, R.drawable.search_links_filled, LocaleController.getString("SharedLinksTab2", R.string.SharedLinksTab2), new TLRPC.TL_inputMessagesFilterUrl(), FILTER_TYPE_LINKS),
Adapters/FiltersView.java:            new MediaFilterData(R.drawable.search_files, R.drawable.search_files_filled, LocaleController.getString("SharedFilesTab2", R.string.SharedFilesTab2), new TLRPC.TL_inputMessagesFilterDocument(), FILTER_TYPE_FILES),
Adapters/FiltersView.java:            new MediaFilterData(R.drawable.search_music, R.drawable.search_music_filled, LocaleController.getString("SharedMusicTab2", R.string.SharedMusicTab2), new TLRPC.TL_inputMessagesFilterMusic(), FILTER_TYPE_MUSIC),
Adapters/FiltersView.java:            new MediaFilterData(R.drawable.search_voice, R.drawable.search_voice_filled, LocaleController.getString("SharedVoiceTab2", R.string.SharedVoiceTab2), new TLRPC.TL_inputMessagesFilterRoundVoice(), FILTER_TYPE_VOICE)
Adapters/FiltersView.java:                        title = LocaleController.getString("SavedMessages", R.string.SavedMessages);
Adapters/FiltersView.java:        if (LocaleController.getString("SearchTipToday", R.string.SearchTipToday).toLowerCase().startsWith(q) || "today".startsWith(q)) {
Adapters/FiltersView.java:            dates.add(new DateData(LocaleController.getString("SearchTipToday", R.string.SearchTipToday), minDate, maxDate));
Adapters/FiltersView.java:        if (LocaleController.getString("SearchTipYesterday", R.string.SearchTipYesterday).toLowerCase().startsWith(q) || "yesterday".startsWith(q)) {
Adapters/FiltersView.java:            dates.add(new DateData(LocaleController.getString("SearchTipYesterday", R.string.SearchTipYesterday), minDate, maxDate));
Adapters/FiltersView.java:                LocaleController.getString("January", R.string.January).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("February", R.string.February).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("March", R.string.March).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("April", R.string.April).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("May", R.string.May).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("June", R.string.June).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("July", R.string.July).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("August", R.string.August).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("September", R.string.September).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("October", R.string.October).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("November", R.string.November).toLowerCase(),
Adapters/FiltersView.java:                LocaleController.getString("December", R.string.December).toLowerCase()
Adapters/LocationActivityAdapter.java:                    address = LocaleController.getString("Loading", R.string.Loading);
Adapters/LocationActivityAdapter.java:                    address = LocaleController.getString("Loading", R.string.Loading);
Adapters/LocationActivityAdapter.java:                    sendLocationCell.setText(LocaleController.getString("ChatSetThisLocation", R.string.ChatSetThisLocation), address);
Adapters/LocationActivityAdapter.java:                    sendLocationCell.setText(LocaleController.getString("SendSelectedLocation", R.string.SendSelectedLocation), address);
Adapters/LocationActivityAdapter.java:                    sendLocationCell.setText(LocaleController.getString("SendLocation", R.string.SendLocation), LocaleController.formatString("AccurateTo", R.string.AccurateTo, LocaleController.formatPluralString("Meters", (int) gpsLocation.getAccuracy())));
Adapters/LocationActivityAdapter.java:                    sendLocationCell.setText(LocaleController.getString("SendLocation", R.string.SendLocation), LocaleController.getString("Loading", R.string.Loading));
Adapters/LocationActivityAdapter.java:                    cell.setText(LocaleController.getString("LiveLocations", R.string.LiveLocations));
Adapters/LocationActivityAdapter.java:                    cell.setText(LocaleController.getString("NearbyVenue", R.string.NearbyVenue));
Adapters/MentionsAdapter.java:                    builder.setTitle(LocaleController.getString("ShareYouLocationTitle", R.string.ShareYouLocationTitle));
Adapters/MentionsAdapter.java:                    builder.setMessage(LocaleController.getString("ShareYouLocationInline", R.string.ShareYouLocationInline));
Adapters/MentionsAdapter.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
Adapters/MentionsAdapter.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), (dialog, which) -> {
Adapters/MentionsAdapter.java:                    textView.setText(LocaleController.getString("GlobalAttachInlineRestricted", R.string.GlobalAttachInlineRestricted));
Adapters/MentionsAdapter.java:                    textView.setText(LocaleController.getString("AttachInlineRestrictedForever", R.string.AttachInlineRestrictedForever));
Adapters/MentionsAdapter.java:                    textView.setText(LocaleController.formatString("AttachInlineRestricted", R.string.AttachInlineRestricted, LocaleController.formatDateForBan(chat.banned_rights.until_date)));
Adapters/SearchAdapter.java:                        names[2] = LocaleController.getString("RepliesTitle", R.string.RepliesTitle).toLowerCase();
Adapters/SearchAdapter.java:                        names[2] = LocaleController.getString("SavedMessages", R.string.SavedMessages).toLowerCase();
Adapters/SearchAdapter.java:                            name = LocaleController.getString("SavedMessages", R.string.SavedMessages);
Adapters/SearchAdapter.java:                    cell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
Adapters/SearchAdapter.java:                    cell.setText(LocaleController.getString("PhoneNumberSearch", R.string.PhoneNumberSearch));
Adapters/SearchAdapter.java:                cell.setText(LocaleController.formatString("AddContactByPhone", R.string.AddContactByPhone, PhoneFormat.getInstance().format("+" + str)), false);
Adapters/StickersSearchAdapter.java:                emptyTextView.setText(LocaleController.getString("NoStickersFound", R.string.NoStickersFound));
ArchivedStickersActivity.java:            actionBar.setTitle(LocaleController.getString("ArchivedStickers", R.string.ArchivedStickers));
ArchivedStickersActivity.java:            actionBar.setTitle(LocaleController.getString("ArchivedMasks", R.string.ArchivedMasks));
ArchivedStickersActivity.java:            emptyView.setText(LocaleController.getString("ArchivedStickersEmpty", R.string.ArchivedStickersEmpty));
ArchivedStickersActivity.java:            emptyView.setText(LocaleController.getString("ArchivedMasksEmpty", R.string.ArchivedMasksEmpty));
ArchivedStickersActivity.java:                    cell.setText(LocaleController.getString("ArchivedStickersInfo", R.string.ArchivedStickersInfo));
ArticleViewer.java:        builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
ArticleViewer.java:            deleteView.setText(LocaleController.getString("Copy", R.string.Copy).toUpperCase());
ArticleViewer.java:                    Toast.makeText(parentActivity, LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
ArticleViewer.java:                textView.setText(LocaleController.getString("InstantViewReference", R.string.InstantViewReference));
ArticleViewer.java:        searchField.setHint(LocaleController.getString("Search", R.string.Search));
ArticleViewer.java:        clearButton.setContentDescription(LocaleController.getString("ClearButton", R.string.ClearButton));
ArticleViewer.java:        backButton.setContentDescription(LocaleController.getString("AccDescrGoBack", R.string.AccDescrGoBack));
ArticleViewer.java:        menuButton.addSubItem(search_item, R.drawable.msg_search, LocaleController.getString("Search", R.string.Search));
ArticleViewer.java:        menuButton.addSubItem(share_item, R.drawable.msg_share, LocaleController.getString("ShareFile", R.string.ShareFile));
ArticleViewer.java:        menuButton.addSubItem(open_item, R.drawable.msg_openin, LocaleController.getString("OpenInExternalApp", R.string.OpenInExternalApp));
ArticleViewer.java:        menuButton.addSubItem(settings_item, R.drawable.menu_settings, LocaleController.getString("Settings", R.string.Settings));
ArticleViewer.java:        menuButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
ArticleViewer.java:                headerCell.setText(LocaleController.getString("FontSize", R.string.FontSize));
ArticleViewer.java:                headerCell.setText(LocaleController.getString("FontType", R.string.FontType));
ArticleViewer.java:                            fontCells[a].setTextAndTypeface(LocaleController.getString("Default", R.string.Default), Typeface.DEFAULT);
ArticleViewer.java:        searchUpButton.setContentDescription(LocaleController.getString("AccDescrSearchNext", R.string.AccDescrSearchNext));
ArticleViewer.java:        searchDownButton.setContentDescription(LocaleController.getString("AccDescrSearchPrev", R.string.AccDescrSearchPrev));
ArticleViewer.java:                BulletinFactory.of(containerView).createCopyBulletin(LocaleController.getString("TextCopied", R.string.TextCopied)).show();
ArticleViewer.java:            searchCountText.setText(LocaleController.getString("NoResult", R.string.NoResult));
ArticleViewer.java:            searchCountText.setText(LocaleController.getString("OneResult", R.string.OneResult));
ArticleViewer.java:            StringBuilder sb = new StringBuilder(LocaleController.getString("AttachVideo", R.string.AttachVideo));
ArticleViewer.java:                description = LocaleController.formatString("ArticleDateByAuthor", R.string.ArticleDateByAuthor, LocaleController.getInstance().chatFullDate.format((long) item.published_date * 1000), item.author);
ArticleViewer.java:                description = LocaleController.formatString("ArticleByAuthor", R.string.ArticleByAuthor, item.author);
ArticleViewer.java:            info.setText(textLayout.getText() + ", " + LocaleController.getString("AccDescrIVHeading", R.string.AccDescrIVHeading));
ArticleViewer.java:            info.setText(textLayout.getText() + ", " + LocaleController.getString("AccDescrIVHeading", R.string.AccDescrIVHeading));
ArticleViewer.java:            StringBuilder sb = new StringBuilder(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
ArticleViewer.java:            StringBuilder sb = new StringBuilder(LocaleController.getString("Map", R.string.Map));
ArticleViewer.java:            textView.setText(LocaleController.getString("ChannelJoin", R.string.ChannelJoin));
ArticleViewer.java:                    text = LocaleController.formatString("ArticleDateByAuthor", R.string.ArticleDateByAuthor, LocaleController.getInstance().chatFullDate.format((long) currentBlock.published_date * 1000), author);
ArticleViewer.java:                    text = LocaleController.formatString("ArticleByAuthor", R.string.ArticleByAuthor, author);
ArticleViewer.java:            info.setText(textLayout.getText() + ", " + LocaleController.getString("AccDescrIVTitle", R.string.AccDescrIVTitle));
ArticleViewer.java:            info.setText(textLayout.getText() + ", " + LocaleController.getString("AccDescrIVHeading", R.string.AccDescrIVHeading));
ArticleViewer.java:            textView.setText(LocaleController.getString("PreviewFeedback2", R.string.PreviewFeedback2));
AvatarPreviewer.java:        OPEN_PROFILE("OpenProfile", R.string.OpenProfile, R.drawable.msg_openprofile),
AvatarPreviewer.java:        OPEN_CHANNEL("OpenChannel2", R.string.OpenChannel2, R.drawable.msg_channel),
AvatarPreviewer.java:        OPEN_GROUP("OpenGroup2", R.string.OpenGroup2, R.drawable.msg_discussion),
AvatarPreviewer.java:        SEND_MESSAGE("SendMessage", R.string.SendMessage, R.drawable.msg_discussion),
AvatarPreviewer.java:        MENTION("Mention", R.string.Mention, R.drawable.msg_mention);
CacheControlActivity.java:                cacheRemovedTooltip.setInfoText(LocaleController.formatString("CacheWasCleared", R.string.CacheWasCleared, AndroidUtilities.formatFileSize(finalClearedSize)));
CacheControlActivity.java:        actionBar.setTitle(LocaleController.getString("StorageUsage", R.string.StorageUsage));
CacheControlActivity.java:                        name = LocaleController.getString("LocalPhotoCache", R.string.LocalPhotoCache);
CacheControlActivity.java:                        name = LocaleController.getString("LocalVideoCache", R.string.LocalVideoCache);
CacheControlActivity.java:                        name = LocaleController.getString("LocalDocumentCache", R.string.LocalDocumentCache);
CacheControlActivity.java:                        name = LocaleController.getString("LocalMusicCache", R.string.LocalMusicCache);
CacheControlActivity.java:                        name = LocaleController.getString("LocalAudioCache", R.string.LocalAudioCache);
CacheControlActivity.java:                        name = LocaleController.getString("AnimatedStickers", R.string.AnimatedStickers);
CacheControlActivity.java:                        name = LocaleController.getString("LocalCache", R.string.LocalCache);
CacheControlActivity.java:                cell.setTextAndIcon(LocaleController.getString("ClearMediaCache", R.string.ClearMediaCache), 0);
CacheControlActivity.java:        builder.setTitle(LocaleController.getString("LocalDatabaseClearTextTitle", R.string.LocalDatabaseClearTextTitle));
CacheControlActivity.java:        builder.setMessage(LocaleController.getString("LocalDatabaseClearText", R.string.LocalDatabaseClearText));
CacheControlActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
CacheControlActivity.java:        builder.setPositiveButton(LocaleController.getString("CacheClear", R.string.CacheClear), (dialogInterface, i) -> {
CacheControlActivity.java:                    slideChooseView.setOptions(index, LocaleController.formatPluralString("Days", 3), LocaleController.formatPluralString("Weeks", 1), LocaleController.formatPluralString("Months", 1), LocaleController.getString("KeepMediaForever", R.string.KeepMediaForever));
CacheControlActivity.java:                        textCell.setTextAndValue(LocaleController.getString("ClearLocalDatabase", R.string.ClearLocalDatabase), AndroidUtilities.formatFileSize(databaseSize), false);
CacheControlActivity.java:                        privacyCell.setText(LocaleController.getString("LocalDatabaseInfo", R.string.LocalDatabaseInfo));
CacheControlActivity.java:                        privacyCell.setText(AndroidUtilities.replaceTags(LocaleController.getString("KeepMediaInfo", R.string.KeepMediaInfo)));
CacheControlActivity.java:                        headerCell.setText(LocaleController.getString("KeepMedia", R.string.KeepMedia));
CacheControlActivity.java:                        headerCell.setText(LocaleController.getString("DeviceStorage", R.string.DeviceStorage));
CallLogActivity.java:			imageView.setContentDescription(LocaleController.getString("Call", R.string.Call));
CallLogActivity.java:		actionBar.setTitle(LocaleController.getString("Calls", R.string.Calls));
CallLogActivity.java:		otherItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
CallLogActivity.java:		otherItem.addSubItem(delete_all_calls, R.drawable.msg_delete, LocaleController.getString("DeleteAllCalls", R.string.DeleteAllCalls));
CallLogActivity.java:		emptyView.setText(LocaleController.getString("NoCallLog", R.string.NoCallLog));
CallLogActivity.java:		floatingButton.setContentDescription(LocaleController.getString("Call", R.string.Call));
CallLogActivity.java:			builder.setTitle(LocaleController.getString("DeleteAllCalls", R.string.DeleteAllCalls));
CallLogActivity.java:			builder.setMessage(LocaleController.getString("DeleteAllCallsText", R.string.DeleteAllCallsText));
CallLogActivity.java:			builder.setTitle(LocaleController.getString("DeleteCalls", R.string.DeleteCalls));
CallLogActivity.java:			builder.setMessage(LocaleController.getString("DeleteSelectedCallsText", R.string.DeleteSelectedCallsText));
CallLogActivity.java:		cell.setText(LocaleController.getString("DeleteCallsForEveryone", R.string.DeleteCallsForEveryone), "", false, false);
CallLogActivity.java:		builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
CallLogActivity.java:		builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
CallLogActivity.java:		actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete)));
CallLogActivity.java:						//cell.setContentDescription(LocaleController.getString("CallMessageOutgoing", R.string.CallMessageOutgoing));
CallLogActivity.java:						//cell.setContentDescription(LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming));
CallLogActivity.java:						//cell.setContentDescription(LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed));
CameraScanActivity.java:            titleTextView.setText(LocaleController.getString("PassportScanPassport", R.string.PassportScanPassport));
CameraScanActivity.java:            descriptionText.setText(LocaleController.getString("PassportScanPassportInfo", R.string.PassportScanPassportInfo));
CameraScanActivity.java:                //titleTextView.setText(LocaleController.getString("WalletScanCode", R.string.WalletScanCode));
CameraScanActivity.java:                titleTextView.setText(LocaleController.getString("AuthAnotherClientScan", R.string.AuthAnotherClientScan));
CameraScanActivity.java:                //recognizedMrzView.setText(LocaleController.getString("WalletScanCodeNotFound", R.string.WalletScanCodeNotFound));
CameraScanActivity.java:                recognizedMrzView.setText(LocaleController.getString("AuthAnotherClientNotFound", R.string.AuthAnotherClientNotFound));
CancelAccountDeletionActivity.java:        actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
CancelAccountDeletionActivity.java:        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
CancelAccountDeletionActivity.java:            return LocaleController.getString("CancelAccountReset", R.string.CancelAccountReset);
CancelAccountDeletionActivity.java:                    titleTextView.setText(LocaleController.getString("SentAppCodeTitle", R.string.SentAppCodeTitle));
CancelAccountDeletionActivity.java:                    titleTextView.setText(LocaleController.getString("SentSmsCodeTitle", R.string.SentSmsCodeTitle));
CancelAccountDeletionActivity.java:                problemText.setText(LocaleController.getString("DidNotGetTheCodeSms", R.string.DidNotGetTheCodeSms));
CancelAccountDeletionActivity.java:                problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
CancelAccountDeletionActivity.java:                        AlertsCreator.showSimpleAlert(CancelAccountDeletionActivity.this, LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
CancelAccountDeletionActivity.java:                return LocaleController.getString("CancelAccountReset", R.string.CancelAccountReset);
CancelAccountDeletionActivity.java:            SpannableStringBuilder spanned = new SpannableStringBuilder(AndroidUtilities.replaceTags(LocaleController.formatString("CancelAccountResetInfo2", R.string.CancelAccountResetInfo2, PhoneFormat.getInstance().format("+" + number))));
CancelAccountDeletionActivity.java:                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
CancelAccountDeletionActivity.java:                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 1, 0));
CancelAccountDeletionActivity.java:                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 2, 0));
CancelAccountDeletionActivity.java:                timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 2, 0));
CancelAccountDeletionActivity.java:                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
CancelAccountDeletionActivity.java:                                timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, minutes, seconds));
CancelAccountDeletionActivity.java:                                        timeText.setText(LocaleController.getString("Calling", R.string.Calling));
CancelAccountDeletionActivity.java:                                        timeText.setText(LocaleController.getString("SendingSms", R.string.SendingSms));
CancelAccountDeletionActivity.java:                    errorDialog = AlertsCreator.showSimpleAlert(CancelAccountDeletionActivity.this, LocaleController.formatString("CancelLinkSuccess", R.string.CancelLinkSuccess, PhoneFormat.getInstance().format("+" + phone)));
Cells/AccountSelectCell.java:            textView.setText(LocaleController.getString("VoipGroupDisplayAs", R.string.VoipGroupDisplayAs));
Cells/ArchivedStickerSetCell.java:            addButton.setText(LocaleController.getString("Add", R.string.Add));
Cells/ArchivedStickerSetCell.java:            deleteButton.setText(LocaleController.getString("StickersRemove", R.string.StickersRemove));
Cells/ArchiveHintInnerCell.java:                headerTextView.setText(LocaleController.getString("ArchiveHintHeader1", R.string.ArchiveHintHeader1));
Cells/ArchiveHintInnerCell.java:                messageTextView.setText(LocaleController.getString("ArchiveHintText1", R.string.ArchiveHintText1));
Cells/ArchiveHintInnerCell.java:                headerTextView.setText(LocaleController.getString("ArchiveHintHeader2", R.string.ArchiveHintHeader2));
Cells/ArchiveHintInnerCell.java:                messageTextView.setText(LocaleController.getString("ArchiveHintText2", R.string.ArchiveHintText2));
Cells/ArchiveHintInnerCell.java:                headerTextView.setText(LocaleController.getString("ArchiveHintHeader3", R.string.ArchiveHintHeader3));
Cells/ArchiveHintInnerCell.java:                messageTextView.setText(LocaleController.getString("ArchiveHintText3", R.string.ArchiveHintText3));
Cells/AudioPlayerCell.java:            info.setText(LocaleController.formatString("AccDescrMusicInfo", R.string.AccDescrMusicInfo, currentMessageObject.getMusicAuthor(), currentMessageObject.getMusicTitle()));
Cells/BotHelpCell.java:        String help = LocaleController.getString("BotInfoTitle", R.string.BotInfoTitle);
Cells/ChatActionCell.java:                newText = LocaleController.getString("MessageScheduledUntilOnline", R.string.MessageScheduledUntilOnline);
Cells/ChatActionCell.java:                newText = LocaleController.formatString("MessageScheduledOn", R.string.MessageScheduledOn, LocaleController.formatDateChat(date));
Cells/ChatActionCell.java:                    text = LocaleController.getString("AttachPhotoExpired", R.string.AttachPhotoExpired);
Cells/ChatActionCell.java:                    text = LocaleController.getString("AttachVideoExpired", R.string.AttachVideoExpired);
Cells/ChatListCell.java:            setContentDescription(threeLines ? LocaleController.getString("ChatListExpanded", R.string.ChatListExpanded) : LocaleController.getString("ChatListDefault", R.string.ChatListDefault));
Cells/ChatListCell.java:            String text = isThreeLines ? LocaleController.getString("ChatListExpanded", R.string.ChatListExpanded) : LocaleController.getString("ChatListDefault", R.string.ChatListDefault);
Cells/ChatMessageCell.java:                        Toast.makeText(getContext(), LocaleController.getString("MessageScheduledVote", R.string.MessageScheduledVote), Toast.LENGTH_LONG).show();
Cells/ChatMessageCell.java:                            Toast.makeText(getContext(), LocaleController.getString("MessageScheduledVoteResults", R.string.MessageScheduledVoteResults), Toast.LENGTH_LONG).show();
Cells/ChatMessageCell.java:                        Toast.makeText(getContext(), LocaleController.getString("MessageScheduledBotAction", R.string.MessageScheduledBotAction), Toast.LENGTH_LONG).show();
Cells/ChatMessageCell.java:                        comment = LocaleController.getString("ViewInChat", R.string.ViewInChat);
Cells/ChatMessageCell.java:                            comment = commentCount == 0 ? LocaleController.getString("LeaveAComment", R.string.LeaveAComment) : LocaleController.formatPluralString("CommentsCount", commentCount);
Cells/ChatMessageCell.java:                            comment = commentCount == 0 ? LocaleController.getString("LeaveAComment", R.string.LeaveAComment) : LocaleController.getPluralString("CommentsNoNumber", commentCount);
Cells/ChatMessageCell.java:                        String str = LocaleController.formatString("Of", R.string.Of, 1, count);
Cells/ChatMessageCell.java:                        site_name = LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat);
Cells/ChatMessageCell.java:                        site_name = LocaleController.getString("ChatBackground", R.string.ChatBackground);
Cells/ChatMessageCell.java:                        site_name = LocaleController.getString("ColorTheme", R.string.ColorTheme);
Cells/ChatMessageCell.java:                                String str = LocaleController.getString("AttachGame", R.string.AttachGame).toUpperCase();
Cells/ChatMessageCell.java:                                str = LocaleController.getString("PaymentReceipt", R.string.PaymentReceipt).toUpperCase();
Cells/ChatMessageCell.java:                                    str = LocaleController.getString("PaymentTestInvoice", R.string.PaymentTestInvoice).toUpperCase();
Cells/ChatMessageCell.java:                                    str = LocaleController.getString("PaymentInvoice", R.string.PaymentInvoice).toUpperCase();
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageVideoOutgoingMissed", R.string.CallMessageVideoOutgoingMissed);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageOutgoingMissed", R.string.CallMessageOutgoingMissed);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageVideoOutgoing", R.string.CallMessageVideoOutgoing);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageOutgoing", R.string.CallMessageOutgoing);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageVideoIncomingMissed", R.string.CallMessageVideoIncomingMissed);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageIncomingMissed", R.string.CallMessageIncomingMissed);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageVideoIncomingDeclined", R.string.CallMessageVideoIncomingDeclined);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageIncomingDeclined", R.string.CallMessageIncomingDeclined);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageVideoIncoming", R.string.CallMessageVideoIncoming);
Cells/ChatMessageCell.java:                            text = LocaleController.getString("CallMessageIncoming", R.string.CallMessageIncoming);
Cells/ChatMessageCell.java:                            phone = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
Cells/ChatMessageCell.java:                    title = LocaleController.getString("FinalResults", R.string.FinalResults);
Cells/ChatMessageCell.java:                            title = LocaleController.getString("QuizPoll", R.string.QuizPoll);
Cells/ChatMessageCell.java:                            title = LocaleController.getString("AnonymousQuizPoll", R.string.AnonymousQuizPoll);
Cells/ChatMessageCell.java:                        title = LocaleController.getString("PublicPoll", R.string.PublicPoll);
Cells/ChatMessageCell.java:                        title = LocaleController.getString("AnonymousPoll", R.string.AnonymousPoll);
Cells/ChatMessageCell.java:                        votes = TextUtils.ellipsize(media.results.total_voters == 0 ? LocaleController.getString("NoVotesQuiz", R.string.NoVotesQuiz) : LocaleController.formatPluralString("Answer", media.results.total_voters), textPaint, w, TextUtils.TruncateAt.END);
Cells/ChatMessageCell.java:                        votes = TextUtils.ellipsize(media.results.total_voters == 0 ? LocaleController.getString("NoVotes", R.string.NoVotes) : LocaleController.formatPluralString("Vote", media.results.total_voters), textPaint, w, TextUtils.TruncateAt.END);
Cells/ChatMessageCell.java:                            str = LocaleController.getString("PollViewResults", R.string.PollViewResults);
Cells/ChatMessageCell.java:                            str = LocaleController.getString("PollSubmitVotes", R.string.PollSubmitVotes);
Cells/ChatMessageCell.java:                            str = LocaleController.getString("NoVotes", R.string.NoVotes);
Cells/ChatMessageCell.java:                        docTitleLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, maxWidth, TextUtils.TruncateAt.END), Theme.chat_locationTitlePaint, maxWidth + AndroidUtilities.dp(2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
Cells/ChatMessageCell.java:                                buttonText = LocaleController.getString("PaymentReceipt", R.string.PaymentReceipt);
Cells/ChatMessageCell.java:                String str = LocaleController.getString("AttachGif", R.string.AttachGif);
Cells/ChatMessageCell.java:                name = LocaleController.getString("AttachDocument", R.string.AttachDocument);
Cells/ChatMessageCell.java:                docTitleLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, maxWidth, TextUtils.TruncateAt.END), Theme.chat_locationTitlePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
Cells/ChatMessageCell.java:                str = LocaleController.getString("OpenChannel", R.string.OpenChannel);
Cells/ChatMessageCell.java:                str = LocaleController.getString("OpenGroup", R.string.OpenGroup);
Cells/ChatMessageCell.java:                str = LocaleController.getString("OpenMessage", R.string.OpenMessage);
Cells/ChatMessageCell.java:                str = LocaleController.getString("ViewContact", R.string.ViewContact);
Cells/ChatMessageCell.java:                str = LocaleController.getString("OpenBackground", R.string.OpenBackground);
Cells/ChatMessageCell.java:                str = LocaleController.getString("OpenTheme", R.string.OpenTheme);
Cells/ChatMessageCell.java:                    str = LocaleController.getString("PollViewResults", R.string.PollViewResults);
Cells/ChatMessageCell.java:                    str = LocaleController.getString("PollSubmitVotes", R.string.PollSubmitVotes);
Cells/ChatMessageCell.java:                    str = LocaleController.getString("VoipGroupJoinAsSpeaker", R.string.VoipGroupJoinAsSpeaker);
Cells/ChatMessageCell.java:                    str = LocaleController.getString("VoipGroupJoinAsLinstener", R.string.VoipGroupJoinAsLinstener);
Cells/ChatMessageCell.java:                str = LocaleController.getString("InstantView", R.string.InstantView);
Cells/ChatMessageCell.java:                signString = LocaleController.getString("ImportedMessage", R.string.ImportedMessage);
Cells/ChatMessageCell.java:                signString = LocaleController.formatImportedDate(messageObject.messageOwner.fwd_from.date) + " " + LocaleController.getString("ImportedMessage", R.string.ImportedMessage);
Cells/ChatMessageCell.java:            timeString = LocaleController.getString("EditedMessage", R.string.EditedMessage) + " " + LocaleController.getInstance().formatterDay.format((long) (messageObject.messageOwner.date) * 1000);
Cells/ChatMessageCell.java:                viaString = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), viaUsername));
Cells/ChatMessageCell.java:            viaString = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), viaUsername));
Cells/ChatMessageCell.java:                adminString = LocaleController.getString("DiscussChannel", R.string.DiscussChannel);
Cells/ChatMessageCell.java:                    adminLabel = LocaleController.getString("ChatAdmin", R.string.ChatAdmin);
Cells/ChatMessageCell.java:                String viaBotString = LocaleController.getString("ViaBot", R.string.ViaBot);
Cells/ChatMessageCell.java:                String from = LocaleController.getString("From", R.string.From);
Cells/ChatMessageCell.java:                String fromFormattedString = LocaleController.getString("FromFormatted", R.string.FromFormatted);
Cells/ChatMessageCell.java:                    stringBuilder = new SpannableStringBuilder(String.format("%s %s %s", fromString, LocaleController.getString("ViaBot", R.string.ViaBot), viaUsername));
Cells/ChatMessageCell.java:                        name = LocaleController.getString("Loading", R.string.Loading);
Cells/ChatMessageCell.java:                        String from = LocaleController.getString("From", R.string.From);
Cells/ChatMessageCell.java:                        String fromFormattedString = LocaleController.getString("FromFormatted", R.string.FromFormatted);
Cells/ChatMessageCell.java:                replyNameLayout = new StaticLayout(LocaleController.getString("Loading", R.string.Loading), Theme.chat_replyNamePaint, maxWidth + AndroidUtilities.dp(6), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
Cells/ChatMessageCell.java:                forwardedString = LocaleController.getString("PsaMessageDefault", R.string.PsaMessageDefault);
Cells/ChatMessageCell.java:            return LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage);
Cells/ChatMessageCell.java:                        final int resId = sending ? R.string.AccDescrUploadProgress : R.string.AccDescrDownloadProgress;
Cells/ChatMessageCell.java:                    sb.append(LocaleController.formatString("AccDescrMusicInfo", R.string.AccDescrMusicInfo, currentMessageObject.getMusicAuthor(), currentMessageObject.getMusicTitle()));
Cells/ChatMessageCell.java:                        sb.append(LocaleController.getString("AccDescrMsgNotPlayed", R.string.AccDescrMsgNotPlayed));
Cells/ChatMessageCell.java:                        title = LocaleController.getString("FinalResults", R.string.FinalResults);
Cells/ChatMessageCell.java:                                title = LocaleController.getString("QuizPoll", R.string.QuizPoll);
Cells/ChatMessageCell.java:                                title = LocaleController.getString("AnonymousQuizPoll", R.string.AnonymousQuizPoll);
Cells/ChatMessageCell.java:                            title = LocaleController.getString("PublicPoll", R.string.PublicPoll);
Cells/ChatMessageCell.java:                            title = LocaleController.getString("AnonymousPoll", R.string.AnonymousPoll);
Cells/ChatMessageCell.java:                            sb.append(LocaleController.formatString("AccDescrScheduledDate", R.string.AccDescrScheduledDate, currentTimeString));
Cells/ChatMessageCell.java:                            sb.append(LocaleController.formatString("AccDescrSentDate", R.string.AccDescrSentDate, LocaleController.getString("TodayAt", R.string.TodayAt) + " " + currentTimeString));
Cells/ChatMessageCell.java:                            sb.append(currentMessageObject.isUnread() ? LocaleController.getString("AccDescrMsgUnread", R.string.AccDescrMsgUnread) : LocaleController.getString("AccDescrMsgRead", R.string.AccDescrMsgRead));
Cells/ChatMessageCell.java:                        sb.append(LocaleController.getString("AccDescrMsgSending", R.string.AccDescrMsgSending));
Cells/ChatMessageCell.java:                        sb.append(LocaleController.getString("AccDescrMsgSendingError", R.string.AccDescrMsgSendingError));
Cells/ChatMessageCell.java:                    sb.append(LocaleController.formatString("AccDescrReceivedDate", R.string.AccDescrReceivedDate, LocaleController.getString("TodayAt", R.string.TodayAt) + " " + currentTimeString));
Cells/ChatMessageCell.java:                    info.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_msg_options, LocaleController.getString("AccActionMessageOptions", R.string.AccActionMessageOptions)));
Cells/ChatMessageCell.java:                            actionLabel = LocaleController.getString("AccActionPlay", R.string.AccActionPlay);
Cells/ChatMessageCell.java:                            actionLabel = LocaleController.getString("AccActionPause", R.string.AccActionPause);
Cells/ChatMessageCell.java:                            actionLabel = LocaleController.getString("AccActionOpenFile", R.string.AccActionOpenFile);
Cells/ChatMessageCell.java:                            actionLabel = LocaleController.getString("AccActionDownload", R.string.AccActionDownload);
Cells/ChatMessageCell.java:                            actionLabel = LocaleController.getString("AccActionCancelDownload", R.string.AccActionCancelDownload);
Cells/ChatMessageCell.java:                                actionLabel = LocaleController.getString("CallAgain", R.string.CallAgain);
Cells/ChatMessageCell.java:                    info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_LONG_CLICK, LocaleController.getString("AccActionEnterSelectionMode", R.string.AccActionEnterSelectionMode)));
Cells/ChatMessageCell.java:                        info.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_small_button, LocaleController.getString("AccActionDownload", R.string.AccActionDownload)));
Cells/ChatMessageCell.java:                            sb.append(", ").append(LocaleController.getString("AccDescrQuizCorrectAnswer", R.string.AccDescrQuizCorrectAnswer));
Cells/ChatMessageCell.java:                    info.setText(LocaleController.getString("AccDescrQuizExplanation", R.string.AccDescrQuizExplanation));
Cells/ChatMessageCell.java:                        info.setContentDescription(LocaleController.getString("AccDescrOpenChat", R.string.AccDescrOpenChat));
Cells/ChatMessageCell.java:                        info.setContentDescription(LocaleController.getString("ShareFile", R.string.ShareFile));
Cells/ChatMessageCell.java:                    sb.append(LocaleController.getString("Reply", R.string.Reply));
Cells/ChatMessageCell.java:                String editedStr = LocaleController.getString("EditedMessage", R.string.EditedMessage);
Cells/ContextLinkCell.java:                sbuf.append(LocaleController.getString("AttachDocument", R.string.AttachDocument));
Cells/ContextLinkCell.java:                sbuf.append(LocaleController.getString("AttachGif", R.string.AttachGif));
Cells/ContextLinkCell.java:                sbuf.append(LocaleController.getString("AttachAudio", R.string.AttachAudio));
Cells/ContextLinkCell.java:                sbuf.append(LocaleController.getString("AttachVideo", R.string.AttachVideo));
Cells/ContextLinkCell.java:                sbuf.append(LocaleController.getString("AttachMusic", R.string.AttachMusic));
Cells/ContextLinkCell.java:                sbuf.append(LocaleController.getString("AttachSticker", R.string.AttachSticker));
Cells/ContextLinkCell.java:                sbuf.append(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
Cells/ContextLinkCell.java:                sbuf.append(LocaleController.getString("AttachLocation", R.string.AttachLocation));
Cells/ContextLinkCell.java:            sbuf.append(LocaleController.formatString("AccDescrMusicInfo", R.string.AccDescrMusicInfo, descriptionLayout.getText(), titleLayout.getText()));
Cells/DialogCell.java:                    title = LocaleController.getString("HiddenName", R.string.HiddenName);
Cells/DialogCell.java:                messageNameString = LocaleController.getString("FromYou", R.string.FromYou);
Cells/DialogCell.java:                    messageNameString = LocaleController.getString("Draft", R.string.Draft);
Cells/DialogCell.java:                        messageString = LocaleController.getString("HistoryCleared", R.string.HistoryCleared);
Cells/DialogCell.java:                                messageString = LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing);
Cells/DialogCell.java:                                messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, UserObject.getFirstName(user));
Cells/DialogCell.java:                                messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
Cells/DialogCell.java:                                    messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, UserObject.getFirstName(user));
Cells/DialogCell.java:                                    messageString = LocaleController.getString("EncryptedChatStartedIncoming", R.string.EncryptedChatStartedIncoming);
Cells/DialogCell.java:                                messageString = LocaleController.getString("SavedMessagesInfo", R.string.SavedMessagesInfo);
Cells/DialogCell.java:                            messageString = LocaleController.getString("SavedMessagesInfo", R.string.SavedMessagesInfo);
Cells/DialogCell.java:                                    messageNameString = LocaleController.getString("FromYou", R.string.FromYou);
Cells/DialogCell.java:                                            messageNameString = LocaleController.getString("HiddenName", R.string.HiddenName);
Cells/DialogCell.java:                                    messageString = LocaleController.getString("AttachPhotoExpired", R.string.AttachPhotoExpired);
Cells/DialogCell.java:                                    messageString = LocaleController.getString("AttachVideoExpired", R.string.AttachVideoExpired);
Cells/DialogCell.java:                    timeString = LocaleController.getString("UseProxySponsor", R.string.UseProxySponsor);
Cells/DialogCell.java:                        timeString = LocaleController.getString("PsaTypeDefault", R.string.PsaTypeDefault);
Cells/DialogCell.java:                nameString = LocaleController.getString("ArchivedChats", R.string.ArchivedChats);
Cells/DialogCell.java:                        nameString = LocaleController.getString("RepliesTitle", R.string.RepliesTitle);
Cells/DialogCell.java:                            nameString = LocaleController.getString("FromYou", R.string.FromYou);
Cells/DialogCell.java:                            nameString = LocaleController.getString("SavedMessages", R.string.SavedMessages);
Cells/DialogCell.java:                    nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
Cells/DialogCell.java:                    swipeMessage = LocaleController.getString("UnhideFromTop", swipeMessageStringId = R.string.UnhideFromTop);
Cells/DialogCell.java:                    swipeMessage = LocaleController.getString("HideOnTop", swipeMessageStringId = R.string.HideOnTop);
Cells/DialogCell.java:                    swipeMessage = LocaleController.getString("PsaHide", swipeMessageStringId = R.string.PsaHide);
Cells/DialogCell.java:                            swipeMessage = LocaleController.getString("SwipeUnmute", swipeMessageStringId = R.string.SwipeUnmute);
Cells/DialogCell.java:                            swipeMessage = LocaleController.getString("SwipeMute", swipeMessageStringId = R.string.SwipeMute);
Cells/DialogCell.java:                        swipeMessage = LocaleController.getString("SwipeDeleteChat", swipeMessageStringId = R.string.SwipeDeleteChat);
Cells/DialogCell.java:                            swipeMessage = LocaleController.getString("SwipeMarkAsRead", swipeMessageStringId = R.string.SwipeMarkAsRead);
Cells/DialogCell.java:                            swipeMessage = LocaleController.getString("SwipeMarkAsUnread", swipeMessageStringId = R.string.SwipeMarkAsUnread);
Cells/DialogCell.java:                            swipeMessage = LocaleController.getString("SwipeUnpin", swipeMessageStringId = R.string.SwipeUnpin);
Cells/DialogCell.java:                            swipeMessage = LocaleController.getString("SwipePin", swipeMessageStringId = R.string.SwipePin);
Cells/DialogCell.java:                        swipeMessage = LocaleController.getString("Archive", swipeMessageStringId = R.string.Archive);
Cells/DialogCell.java:                    swipeMessage = LocaleController.getString("Unarchive", swipeMessageStringId = R.string.Unarchive);
Cells/DialogCell.java:            sb.append(LocaleController.getString("ArchivedChats", R.string.ArchivedChats));
Cells/DialogCell.java:                sb.append(LocaleController.getString("AccDescrSecretChat", R.string.AccDescrSecretChat));
Cells/DialogCell.java:                    sb.append(LocaleController.getString("RepliesTitle", R.string.RepliesTitle));
Cells/DialogCell.java:                        sb.append(LocaleController.getString("Bot", R.string.Bot));
Cells/DialogCell.java:                        sb.append(LocaleController.getString("SavedMessages", R.string.SavedMessages));
Cells/DialogCell.java:                    sb.append(LocaleController.getString("AccDescrChannel", R.string.AccDescrChannel));
Cells/DialogCell.java:                    sb.append(LocaleController.getString("AccDescrGroup", R.string.AccDescrGroup));
Cells/DialogCell.java:            sb.append(LocaleController.formatString("AccDescrSentDate", R.string.AccDescrSentDate, date));
Cells/DialogCell.java:            sb.append(LocaleController.formatString("AccDescrReceivedDate", R.string.AccDescrReceivedDate, date));
Cells/DialogMeUrlCell.java:            nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
Cells/DialogsEmptyCell.java:        emptyTextView1.setText(LocaleController.getString("NoChats", R.string.NoChats));
Cells/DialogsEmptyCell.java:        String help = LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp);
Cells/DialogsEmptyCell.java:            help = LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp);
Cells/DialogsEmptyCell.java:            emptyTextView1.setText(LocaleController.getString("NoChats", R.string.NoChats));
Cells/DialogsEmptyCell.java:            help = LocaleController.getString("NoChatsContactsHelp", R.string.NoChatsContactsHelp);
Cells/DialogsEmptyCell.java:            emptyTextView1.setText(LocaleController.getString("NoChats", R.string.NoChats));
Cells/DialogsEmptyCell.java:            help = LocaleController.getString("FilterNoChatsToDisplayInfo", R.string.FilterNoChatsToDisplayInfo);
Cells/DialogsEmptyCell.java:            emptyTextView1.setText(LocaleController.getString("FilterNoChatsToDisplay", R.string.FilterNoChatsToDisplay));
Cells/DialogsEmptyCell.java:            help = LocaleController.getString("FilterAddingChatsInfo", R.string.FilterAddingChatsInfo);
Cells/DialogsEmptyCell.java:            emptyTextView1.setText(LocaleController.getString("FilterAddingChats", R.string.FilterAddingChats));
Cells/DrawerAddCell.java:        textView.setText(LocaleController.getString("AddAccount", R.string.AddAccount));
Cells/DrawerProfileCell.java:                    info.setText(LocaleController.getString("AccDescrSwitchToNightTheme", R.string.AccDescrSwitchToNightTheme));
Cells/DrawerProfileCell.java:                    info.setText(LocaleController.getString("AccDescrSwitchToDayTheme", R.string.AccDescrSwitchToDayTheme));
Cells/DrawerProfileCell.java:                Toast.makeText(getContext(), LocaleController.getString("AutoNightModeOff", R.string.AutoNightModeOff), Toast.LENGTH_SHORT).show();
Cells/DrawerProfileCell.java:        arrowView.setContentDescription(accountsShown ? LocaleController.getString("AccDescrHideAccounts", R.string.AccDescrHideAccounts) : LocaleController.getString("AccDescrShowAccounts", R.string.AccDescrShowAccounts));
Cells/FeaturedStickerSetCell.java:        addButton.setText(LocaleController.getString("Add", R.string.Add));
Cells/FeaturedStickerSetCell2.java:        addButton.setText(LocaleController.getString("Add", R.string.Add));
Cells/FeaturedStickerSetCell2.java:        delButton.setText(LocaleController.getString("StickersRemove", R.string.StickersRemove));
Cells/FeaturedStickerSetInfoCell.java:            addButton.setText(LocaleController.getString("Add", R.string.Add));
Cells/FeaturedStickerSetInfoCell.java:            delButton.setText(LocaleController.getString("StickersRemove", R.string.StickersRemove));
Cells/GroupCallInvitedCell.java:        statusTextView.setText(LocaleController.getString("Invited", R.string.Invited));
Cells/GroupCallUserCell.java:                    statusTextView[a].setText(LocaleController.getString("Listening", R.string.Listening));
Cells/GroupCallUserCell.java:                    statusTextView[a].setText(LocaleController.getString("Speaking", R.string.Speaking));
Cells/GroupCallUserCell.java:                    statusTextView[a].setText(LocaleController.getString("VoipGroupMutedForMe", R.string.VoipGroupMutedForMe));
Cells/GroupCallUserCell.java:                    statusTextView[a].setText(LocaleController.getString("WantsToSpeak", R.string.WantsToSpeak));
Cells/GroupCallUserCell.java:                statusTextView[1].setText((vol < 100 ? 1 : volume) + "% " + LocaleController.getString("Speaking", R.string.Speaking));
Cells/GroupCallUserCell.java:                statusTextView[1].setText(LocaleController.getString("Speaking", R.string.Speaking));
Cells/GroupCallUserCell.java:            info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_CLICK, participant.muted && !participant.can_self_unmute ? LocaleController.getString("VoipUnmute", R.string.VoipUnmute) : LocaleController.getString("VoipMute", R.string.VoipMute)));
Cells/GroupCreateUserCell.java:                    nameTextView.setText(LocaleController.getString("SavedMessages", R.string.SavedMessages), true);
Cells/GroupCreateUserCell.java:                        statusTextView.setText(LocaleController.getString("Bot", R.string.Bot));
Cells/GroupCreateUserCell.java:                            statusTextView.setText(LocaleController.getString("Online", R.string.Online));
Cells/GroupCreateUserCell.java:                        statusTextView.setText(LocaleController.getString("MegaLocation", R.string.MegaLocation));
Cells/GroupCreateUserCell.java:                            statusTextView.setText(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate));
Cells/GroupCreateUserCell.java:                            statusTextView.setText(LocaleController.getString("MegaPrivate", R.string.MegaPrivate));
Cells/GroupCreateUserCell.java:                            statusTextView.setText(LocaleController.getString("ChannelPublic", R.string.ChannelPublic));
Cells/GroupCreateUserCell.java:                            statusTextView.setText(LocaleController.getString("MegaPublic", R.string.MegaPublic));
Cells/LocationDirectionCell.java:        buttonTextView.setText(LocaleController.getString("Directions", R.string.Directions));
Cells/LocationLoadingCell.java:        textView.setText(LocaleController.getString("NoPlacesFound", R.string.NoPlacesFound));
Cells/ManageChatUserCell.java:            optionsButton.setContentDescription(LocaleController.getString("AccDescrUserOptions", R.string.AccDescrUserOptions));
Cells/ManageChatUserCell.java:                        statusTextView.setText(LocaleController.getString("BotStatusRead", R.string.BotStatusRead));
Cells/ManageChatUserCell.java:                        statusTextView.setText(LocaleController.getString("BotStatusCantRead", R.string.BotStatusCantRead));
Cells/ManageChatUserCell.java:                        statusTextView.setText(LocaleController.getString("Online", R.string.Online));
Cells/ManageChatUserCell.java:                    statusTextView.setText(LocaleController.getString("MegaLocation", R.string.MegaLocation));
Cells/ManageChatUserCell.java:                    statusTextView.setText(LocaleController.getString("MegaPrivate", R.string.MegaPrivate));
Cells/ManageChatUserCell.java:                    statusTextView.setText(LocaleController.getString("MegaPublic", R.string.MegaPublic));
Cells/MaxFileSizeCell.java:                sizeTextView.setText(LocaleController.formatString("AutodownloadSizeLimitUpTo", R.string.AutodownloadSizeLimitUpTo, AndroidUtilities.formatFileSize(size)));
Cells/MaxFileSizeCell.java:        sizeTextView.setText(LocaleController.formatString("AutodownloadSizeLimitUpTo", R.string.AutodownloadSizeLimitUpTo, AndroidUtilities.formatFileSize(size)));
Cells/PhotoAttachPermissionCell.java:            textView.setText(LocaleController.getString("CameraPermissionText", R.string.CameraPermissionText));
Cells/PhotoAttachPermissionCell.java:            textView.setText(LocaleController.getString("GalleryPermissionText", R.string.GalleryPermissionText));
Cells/PhotoAttachPhotoCell.java:            info.setText(LocaleController.getString("AttachVideo", R.string.AttachVideo) + ", " + LocaleController.formatDuration(photoEntry.duration));
Cells/PhotoAttachPhotoCell.java:            info.setText(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
Cells/PhotoAttachPhotoCell.java:            info.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_open_photo, LocaleController.getString("Open", R.string.Open)));
Cells/PhotoPickerPhotoCell.java:                setContentDescription(LocaleController.getString("AttachVideo", R.string.AttachVideo) + ", " + LocaleController.formatDuration(photoEntry.duration));
Cells/PhotoPickerPhotoCell.java:                setContentDescription(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
Cells/PollEditTextCell.java:            deleteImageView.setContentDescription(LocaleController.getString("Delete", R.string.Delete));
Cells/PollEditTextCell.java:            checkBox.setContentDescription(LocaleController.getString("AccDescrQuizCorrectAnswer", R.string.AccDescrQuizCorrectAnswer));
Cells/ProfileSearchCell.java:                    text = LocaleController.getString("NotificationsCustom", R.string.NotificationsCustom);
Cells/ProfileSearchCell.java:                    text = LocaleController.getString("NotificationsUnmuted", R.string.NotificationsUnmuted);
Cells/ProfileSearchCell.java:                text = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Minutes", delta / 60));
Cells/ProfileSearchCell.java:                text = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Hours", (int) Math.ceil(delta / 60.0f / 60)));
Cells/ProfileSearchCell.java:                text = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Days", (int) Math.ceil(delta / 60.0f / 60 / 24)));
Cells/ProfileSearchCell.java:                text = LocaleController.getString("NotificationsCustom", R.string.NotificationsCustom);
Cells/ProfileSearchCell.java:                text = enabled ? LocaleController.getString("NotificationsUnmuted", R.string.NotificationsUnmuted) : LocaleController.getString("NotificationsMuted", R.string.NotificationsMuted);
Cells/ProfileSearchCell.java:            text = LocaleController.getString("NotificationsOff", R.string.NotificationsOff);
Cells/ProfileSearchCell.java:                nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
Cells/ProfileSearchCell.java:                    statusString = LocaleController.getString("SupportStatus", R.string.SupportStatus);
Cells/ProfileSearchCell.java:                    statusString = LocaleController.getString("Bot", R.string.Bot);
Cells/ProfileSearchCell.java:                    statusString = LocaleController.getString("ServiceNotifications", R.string.ServiceNotifications);
Cells/ProfileSearchCell.java:                        statusString = LocaleController.getString("Online", R.string.Online);
Cells/ProfileSearchCell.java:                            statusString = LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate).toLowerCase();
Cells/ProfileSearchCell.java:                            statusString = LocaleController.getString("ChannelPublic", R.string.ChannelPublic).toLowerCase();
Cells/ProfileSearchCell.java:                            statusString = LocaleController.getString("MegaLocation", R.string.MegaLocation);
Cells/ProfileSearchCell.java:                            statusString = LocaleController.getString("MegaPrivate", R.string.MegaPrivate).toLowerCase();
Cells/ProfileSearchCell.java:                            statusString = LocaleController.getString("MegaPublic", R.string.MegaPublic).toLowerCase();
Cells/SendLocationCell.java:            setText(LocaleController.getString("StopLiveLocation", R.string.StopLiveLocation), LocaleController.formatLocationUpdateDate(info.messageObject.messageOwner.edit_date != 0 ? info.messageObject.messageOwner.edit_date : info.messageObject.messageOwner.date));
Cells/SendLocationCell.java:            setText(LocaleController.getString("SendLiveLocation", R.string.SendLiveLocation), LocaleController.getString("SendLiveLocationInfo", R.string.SendLiveLocationInfo));
Cells/SessionCell.java:                onlineTextView.setText(LocaleController.getString("Online", R.string.Online));
Cells/SessionCell.java:                stringBuilder.append(LocaleController.getString("UnofficialApp", R.string.UnofficialApp));
Cells/SharedAudioCell.java:            info.setText(LocaleController.formatString("AccDescrMusicInfo", R.string.AccDescrMusicInfo, currentMessageObject.getMusicAuthor(), currentMessageObject.getMusicTitle()));
Cells/SharedDocumentCell.java:                dateTextView.setText(String.format("%s, %s", AndroidUtilities.formatFileSize(document.size), LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(new Date(date)), LocaleController.getInstance().formatterDay.format(new Date(date)))));
Cells/ShareDialogCell.java:                nameTextView.setText(LocaleController.getString("RepliesTitle", R.string.RepliesTitle));
Cells/ShareDialogCell.java:                nameTextView.setText(LocaleController.getString("SavedMessages", R.string.SavedMessages));
Cells/SharedPhotoVideoCell.java:                info.setText(LocaleController.getString("AttachVideo", R.string.AttachVideo) + ", " + LocaleController.formatDuration(currentMessageObject.getDuration()));
Cells/SharedPhotoVideoCell.java:                info.setText(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
Cells/SharingLiveLocationCell.java:                distanceTextView.setText(LocaleController.getString("Loading", R.string.Loading));
Cells/StickerCell.java:            info.setText(emoji + " " + LocaleController.getString("AttachSticker", R.string.AttachSticker));
Cells/StickerCell.java:            info.setText(LocaleController.getString("AttachSticker", R.string.AttachSticker));
Cells/StickerEmojiCell.java:        String descr = LocaleController.getString("AttachSticker", R.string.AttachSticker);
Cells/StickerSetGroupInfoCell.java:        infoTextView.setText(LocaleController.getString("GroupStickersInfo", R.string.GroupStickersInfo));
Cells/StickerSetGroupInfoCell.java:        addButton.setText(LocaleController.getString("ChooseStickerSet", R.string.ChooseStickerSet).toUpperCase());
Cells/TextCheckCell.java:        info.setContentDescription(checkBox.isChecked() ? LocaleController.getString("NotificationsOn", R.string.NotificationsOn) : LocaleController.getString("NotificationsOff", R.string.NotificationsOff));
Cells/TextCheckCell2.java:        info.setContentDescription(checkBox.isChecked() ? LocaleController.getString("NotificationsOn", R.string.NotificationsOn) : LocaleController.getString("NotificationsOff", R.string.NotificationsOff));
Cells/TextSelectionHelper.java:                        deleteView.setText(textSelectionOverlay.getContext().getString(android.R.string.copy));
Cells/TextSelectionHelper.java:                menu.add(Menu.NONE, android.R.id.copy, 0, android.R.string.copy);
Cells/TextSelectionHelper.java:                menu.add(Menu.NONE, android.R.id.selectAll, 1, android.R.string.selectAll);
Cells/ThemeCell.java:            optionsButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
Cells/ThemePreviewMessagesCell.java:            message.message = LocaleController.getString("FontSizePreviewReply", R.string.FontSizePreviewReply);
Cells/ThemePreviewMessagesCell.java:            message.message = LocaleController.getString("NewThemePreviewReply", R.string.NewThemePreviewReply);
Cells/ThemePreviewMessagesCell.java:            message.message = LocaleController.getString("FontSizePreviewLine2", R.string.FontSizePreviewLine2);
Cells/ThemePreviewMessagesCell.java:            String text = LocaleController.getString("NewThemePreviewLine3", R.string.NewThemePreviewLine3);
Cells/ThemePreviewMessagesCell.java:            message.message = LocaleController.getString("FontSizePreviewLine1", R.string.FontSizePreviewLine1);
Cells/ThemePreviewMessagesCell.java:            message.message = LocaleController.getString("NewThemePreviewLine1", R.string.NewThemePreviewLine1);
Cells/ThemePreviewMessagesCell.java:            message2.customReplyName = LocaleController.getString("FontSizePreviewName", R.string.FontSizePreviewName);
Cells/ThemePreviewMessagesCell.java:            message2.customReplyName = LocaleController.getString("NewThemePreviewName", R.string.NewThemePreviewName);
Cells/ThemesHorizontalListCell.java:                info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_LONG_CLICK, LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions)));
Cells/TooManyCommunitiesHintCell.java:        headerTextView.setText(LocaleController.getString("TooManyCommunities", R.string.TooManyCommunities));
Cells/UserCell.java:            addButton.setText(LocaleController.getString("Add", R.string.Add));
Cells/UserCell.java:                    text = LocaleController.getString("NotificationsCustom", R.string.NotificationsCustom);
Cells/UserCell.java:                    text = LocaleController.getString("NotificationsUnmuted", R.string.NotificationsUnmuted);
Cells/UserCell.java:                text = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Minutes", delta / 60));
Cells/UserCell.java:                text = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Hours", (int) Math.ceil(delta / 60.0f / 60)));
Cells/UserCell.java:                text = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Days", (int) Math.ceil(delta / 60.0f / 60 / 24)));
Cells/UserCell.java:                text = LocaleController.getString("NotificationsCustom", R.string.NotificationsCustom);
Cells/UserCell.java:                text = enabled ? LocaleController.getString("NotificationsUnmuted", R.string.NotificationsUnmuted) : LocaleController.getString("NotificationsMuted", R.string.NotificationsMuted);
Cells/UserCell.java:            text = LocaleController.getString("NotificationsOff", R.string.NotificationsOff);
Cells/UserCell.java:                    nameTextView.setText(LocaleController.getString("SavedMessages", R.string.SavedMessages), true);
Cells/UserCell.java:                    statusTextView.setText(LocaleController.getString("BotStatusRead", R.string.BotStatusRead));
Cells/UserCell.java:                    statusTextView.setText(LocaleController.getString("BotStatusCantRead", R.string.BotStatusCantRead));
Cells/UserCell.java:                    statusTextView.setText(LocaleController.getString("Online", R.string.Online));
Cells/UserCell2.java:                    statusTextView.setText(LocaleController.getString("BotStatusRead", R.string.BotStatusRead));
Cells/UserCell2.java:                    statusTextView.setText(LocaleController.getString("BotStatusCantRead", R.string.BotStatusCantRead));
Cells/UserCell2.java:                    statusTextView.setText(LocaleController.getString("Online", R.string.Online));
Cells/UserCell2.java:                    statusTextView.setText(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate));
Cells/UserCell2.java:                    statusTextView.setText(LocaleController.getString("ChannelPublic", R.string.ChannelPublic));
Cells/UserCell2.java:                    statusTextView.setText(LocaleController.getString("MegaLocation", R.string.MegaLocation));
Cells/UserCell2.java:                    statusTextView.setText(LocaleController.getString("MegaPrivate", R.string.MegaPrivate));
Cells/UserCell2.java:                    statusTextView.setText(LocaleController.getString("MegaPublic", R.string.MegaPublic));
ChangeBioActivity.java:        actionBar.setTitle(LocaleController.getString("UserBio", R.string.UserBio));
ChangeBioActivity.java:        doneButton.setContentDescription(LocaleController.getString("Done", R.string.Done));
ChangeBioActivity.java:        firstNameField.setHint(LocaleController.getString("UserBio", R.string.UserBio));
ChangeBioActivity.java:        helpTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("UserBioInfo", R.string.UserBioInfo)));
ChangeNameActivity.java:        actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
ChangeNameActivity.java:        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
ChangeNameActivity.java:        firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
ChangeNameActivity.java:        lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
ChangePhoneActivity.java:        actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChangePhoneActivity.java:        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
ChangePhoneActivity.java:                        countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
ChangePhoneActivity.java:                                countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
ChangePhoneActivity.java:                            countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
ChangePhoneActivity.java:            textView2.setText(LocaleController.getString("ChangePhoneHelp", R.string.ChangePhoneHelp));
ChangePhoneActivity.java:                countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
ChangePhoneActivity.java:                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChangePhoneActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChangePhoneActivity.java:                            builder.setMessage(LocaleController.getString("AllowReadCall", R.string.AllowReadCall));
ChangePhoneActivity.java:                AlertsCreator.showSimpleAlert(ChangePhoneActivity.this, LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
ChangePhoneActivity.java:                AlertsCreator.showSimpleAlert(ChangePhoneActivity.this, LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
ChangePhoneActivity.java:            return LocaleController.getString("ChangePhoneNewNumber", R.string.ChangePhoneNewNumber);
ChangePhoneActivity.java:                    titleTextView.setText(LocaleController.getString("SentAppCodeTitle", R.string.SentAppCodeTitle));
ChangePhoneActivity.java:                    titleTextView.setText(LocaleController.getString("SentSmsCodeTitle", R.string.SentSmsCodeTitle));
ChangePhoneActivity.java:                problemText.setText(LocaleController.getString("DidNotGetTheCodeSms", R.string.DidNotGetTheCodeSms));
ChangePhoneActivity.java:                problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
ChangePhoneActivity.java:                        AlertsCreator.showSimpleAlert(ChangePhoneActivity.this, LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
ChangePhoneActivity.java:                return LocaleController.getString("YourCode", R.string.YourCode);
ChangePhoneActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.getString("SentAppCode", R.string.SentAppCode));
ChangePhoneActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentSmsCode", R.string.SentSmsCode, LocaleController.addNbsp(number)));
ChangePhoneActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallCode", R.string.SentCallCode, LocaleController.addNbsp(number)));
ChangePhoneActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallOnly", R.string.SentCallOnly, LocaleController.addNbsp(number)));
ChangePhoneActivity.java:                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
ChangePhoneActivity.java:                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 1, 0));
ChangePhoneActivity.java:                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 2, 0));
ChangePhoneActivity.java:                timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 2, 0));
ChangePhoneActivity.java:                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
ChangePhoneActivity.java:                                timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, minutes, seconds));
ChangePhoneActivity.java:                                        timeText.setText(LocaleController.getString("Calling", R.string.Calling));
ChangePhoneActivity.java:                                        timeText.setText(LocaleController.getString("SendingSms", R.string.SendingSms));
ChangePhoneActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChangePhoneActivity.java:                builder.setMessage(LocaleController.getString("StopVerification", R.string.StopVerification));
ChangePhoneActivity.java:                builder.setPositiveButton(LocaleController.getString("Continue", R.string.Continue), null);
ChangePhoneActivity.java:                builder.setNegativeButton(LocaleController.getString("Stop", R.string.Stop), (dialogInterface, i) -> {
ChangeUsernameActivity.java:        actionBar.setTitle(LocaleController.getString("Username", R.string.Username));
ChangeUsernameActivity.java:        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
ChangeUsernameActivity.java:        firstNameField.setHint(LocaleController.getString("UsernamePlaceholder", R.string.UsernamePlaceholder));
ChangeUsernameActivity.java:                    String text = LocaleController.formatString("UsernameHelpLink", R.string.UsernameHelpLink, url);
ChangeUsernameActivity.java:        helpTextView.setText(infoText = AndroidUtilities.replaceTags(LocaleController.getString("UsernameHelp", R.string.UsernameHelp)));
ChangeUsernameActivity.java:                checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
ChangeUsernameActivity.java:                        AlertsCreator.showSimpleAlert(this, LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
ChangeUsernameActivity.java:                        checkTextView.setText(LocaleController.getString("UsernameInvalidStartNumber", R.string.UsernameInvalidStartNumber));
ChangeUsernameActivity.java:                        AlertsCreator.showSimpleAlert(this, LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
ChangeUsernameActivity.java:                        checkTextView.setText(LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
ChangeUsernameActivity.java:                AlertsCreator.showSimpleAlert(this, LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
ChangeUsernameActivity.java:                checkTextView.setText(LocaleController.getString("UsernameInvalidShort", R.string.UsernameInvalidShort));
ChangeUsernameActivity.java:                AlertsCreator.showSimpleAlert(this, LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
ChangeUsernameActivity.java:                checkTextView.setText(LocaleController.getString("UsernameInvalidLong", R.string.UsernameInvalidLong));
ChangeUsernameActivity.java:                checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, name));
ChangeUsernameActivity.java:            checkTextView.setText(LocaleController.getString("UsernameChecking", R.string.UsernameChecking));
ChangeUsernameActivity.java:                            checkTextView.setText(LocaleController.formatString("UsernameAvailable", R.string.UsernameAvailable, nameFinal));
ChangeUsernameActivity.java:                            checkTextView.setText(LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
ChannelAdminLogActivity.java:            emptyView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("EventLogEmptyTextSearch", R.string.EventLogEmptyTextSearch, searchQuery)));
ChannelAdminLogActivity.java:            emptyView.setText(AndroidUtilities.replaceTags(LocaleController.getString("EventLogEmptySearch", R.string.EventLogEmptySearch)));
ChannelAdminLogActivity.java:                emptyView.setText(AndroidUtilities.replaceTags(LocaleController.getString("EventLogEmpty", R.string.EventLogEmpty)));
ChannelAdminLogActivity.java:                emptyView.setText(AndroidUtilities.replaceTags(LocaleController.getString("EventLogEmptyChannel", R.string.EventLogEmptyChannel)));
ChannelAdminLogActivity.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
ChannelAdminLogActivity.java:        avatarContainer.setSubtitle(LocaleController.getString("EventLogAllEvents", R.string.EventLogAllEvents));
ChannelAdminLogActivity.java:                    avatarContainer.setSubtitle(LocaleController.getString("EventLogSelectedEvents", R.string.EventLogSelectedEvents));
ChannelAdminLogActivity.java:                    avatarContainer.setSubtitle(LocaleController.getString("EventLogAllEvents", R.string.EventLogAllEvents));
ChannelAdminLogActivity.java:        bottomOverlayChatText.setText(LocaleController.getString("SETTINGS", R.string.SETTINGS).toUpperCase());
ChannelAdminLogActivity.java:        bottomOverlayImage.setContentDescription(LocaleController.getString("BotHelp", R.string.BotHelp));
ChannelAdminLogActivity.java:                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("EventLogInfoDetail", R.string.EventLogInfoDetail)));
ChannelAdminLogActivity.java:                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("EventLogInfoDetailChannel", R.string.EventLogInfoDetailChannel)));
ChannelAdminLogActivity.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChannelAdminLogActivity.java:            builder.setTitle(LocaleController.getString("EventLogInfoTitle", R.string.EventLogInfoTitle));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("Copy", R.string.Copy));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChannelAdminLogActivity.java:                    items.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("ApplyThemeFile", R.string.ApplyThemeFile));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChannelAdminLogActivity.java:            items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("AddToMasks", R.string.AddToMasks));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("Copy", R.string.Copy));
ChannelAdminLogActivity.java:                items.add(LocaleController.getString("Call", R.string.Call));
ChannelAdminLogActivity.java:        builder.setTitle(LocaleController.getString("Message", R.string.Message));
ChannelAdminLogActivity.java:                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChannelAdminLogActivity.java:                            builder.setMessage(LocaleController.getString("IncorrectTheme", R.string.IncorrectTheme));
ChannelAdminLogActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChannelAdminLogActivity.java:                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChannelAdminLogActivity.java:                            builder.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
ChannelAdminLogActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChannelAdminLogActivity.java:                getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
ChannelAdminLogActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChannelAdminLogActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChannelAdminLogActivity.java:            builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
ChannelAdminLogActivity.java:            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
ChannelAdminLogActivity.java:            builder.setTitle(LocaleController.getString("OpenUrlTitle", R.string.OpenUrlTitle));
ChannelAdminLogActivity.java:            builder.setMessage(LocaleController.formatString("OpenUrlAlert2", R.string.OpenUrlAlert2, url));
ChannelAdminLogActivity.java:            builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), (dialogInterface, i) -> Browser.openUrl(getParentActivity(), url, true));
ChannelAdminLogActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChannelAdminLogActivity.java:                            Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
ChannelAdminLogActivity.java:                                builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
ChannelAdminLogActivity.java:                                        BulletinFactory.of(ChannelAdminLogActivity.this).createSimpleBulletin(R.raw.linkbroken, LocaleController.getString("LinkHashExpired", R.string.LinkHashExpired)).show();
ChannelAdminLogActivity.java:                            BulletinFactory.of(ChannelAdminLogActivity.this).createSimpleBulletin(R.raw.linkbroken, LocaleController.getString("LinkHashExpired", R.string.LinkHashExpired)).show();
ChannelCreateActivity.java:                                builder.setTitle(LocaleController.getString("ChannelPublicEmptyUsernameTitle", R.string.ChannelPublicEmptyUsernameTitle));
ChannelCreateActivity.java:                                builder.setMessage(LocaleController.getString("ChannelPublicEmptyUsername", R.string.ChannelPublicEmptyUsername));
ChannelCreateActivity.java:                                builder.setPositiveButton(LocaleController.getString("Close", R.string.Close), null);
ChannelCreateActivity.java:        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
ChannelCreateActivity.java:            actionBar.setTitle(LocaleController.getString("NewChannel", R.string.NewChannel));
ChannelCreateActivity.java:            nameTextView.setHint(LocaleController.getString("EnterChannelName", R.string.EnterChannelName));
ChannelCreateActivity.java:            descriptionTextView.setHint(LocaleController.getString("DescriptionPlaceholder", R.string.DescriptionPlaceholder));
ChannelCreateActivity.java:            helpTextView.setText(LocaleController.getString("DescriptionInfo", R.string.DescriptionInfo));
ChannelCreateActivity.java:            actionBar.setTitle(LocaleController.getString("ChannelSettingsTitle", R.string.ChannelSettingsTitle));
ChannelCreateActivity.java:            headerCell2.setText(LocaleController.getString("ChannelTypeHeader", R.string.ChannelTypeHeader));
ChannelCreateActivity.java:            radioButtonCell1.setTextAndValue(LocaleController.getString("ChannelPublic", R.string.ChannelPublic), LocaleController.getString("ChannelPublicInfo", R.string.ChannelPublicInfo), false, !isPrivate);
ChannelCreateActivity.java:            radioButtonCell2.setTextAndValue(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate), LocaleController.getString("ChannelPrivateInfo", R.string.ChannelPrivateInfo), false, isPrivate);
ChannelCreateActivity.java:            descriptionTextView.setHint(LocaleController.getString("ChannelUsernamePlaceholder", R.string.ChannelUsernamePlaceholder));
ChannelCreateActivity.java:            typeInfoCell.setText(LocaleController.getString("ChangePublicLimitReached", R.string.ChangePublicLimitReached));
ChannelCreateActivity.java:            typeInfoCell.setText(isPrivate ? LocaleController.getString("ChannelPrivateLinkHelp", R.string.ChannelPrivateLinkHelp) : LocaleController.getString("ChannelUsernameHelp", R.string.ChannelUsernameHelp));
ChannelCreateActivity.java:            headerCell.setText(isPrivate ? LocaleController.getString("ChannelInviteLinkTitle", R.string.ChannelInviteLinkTitle) : LocaleController.getString("ChannelLinkTitle", R.string.ChannelLinkTitle));
ChannelCreateActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChannelCreateActivity.java:                            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("RevokeLinkAlert", R.string.RevokeLinkAlert, MessagesController.getInstance(currentAccount).linkPrefix + "/" + channel.username, channel.title)));
ChannelCreateActivity.java:                            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("RevokeLinkAlertChannel", R.string.RevokeLinkAlertChannel, MessagesController.getInstance(currentAccount).linkPrefix  + "/" + channel.username, channel.title)));
ChannelCreateActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChannelCreateActivity.java:                        builder.setPositiveButton(LocaleController.getString("RevokeButton", R.string.RevokeButton), (dialogInterface, i) -> {
ChannelCreateActivity.java:                checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
ChannelCreateActivity.java:                    checkTextView.setText(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
ChannelCreateActivity.java:                    checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
ChannelCreateActivity.java:            checkTextView.setText(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
ChannelCreateActivity.java:            checkTextView.setText(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
ChannelCreateActivity.java:        checkTextView.setText(LocaleController.getString("LinkChecking", R.string.LinkChecking));
ChannelCreateActivity.java:                        checkTextView.setText(LocaleController.formatString("LinkAvailable", R.string.LinkAvailable, name));
ChannelCreateActivity.java:                            checkTextView.setText(LocaleController.getString("LinkInUse", R.string.LinkInUse));
ChannelCreateActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChannelCreateActivity.java:                builder.setMessage(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
ChannelCreateActivity.java:                builder.setMessage(LocaleController.getString("LinkInUse", R.string.LinkInUse));
ChannelCreateActivity.java:                builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
ChannelCreateActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Charts/view_data/ChartHeaderView.java:        back.setText(LocaleController.getString("ZoomOut", R.string.ZoomOut));
ChatActivity.java:            menuDeleteItem.setSubtext(LocaleController.formatString("AutoDeleteIn", R.string.AutoDeleteIn, ramainingStr));
ChatActivity.java:            scheduledOrNoSoundHint.setText(LocaleController.getString("ScheduledOrNoSoundHint", R.string.ScheduledOrNoSoundHint));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("JoinByPeekChannelText", R.string.JoinByPeekChannelText));
ChatActivity.java:                    builder.setTitle(LocaleController.getString("JoinByPeekChannelTitle", R.string.JoinByPeekChannelTitle));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("JoinByPeekGroupText", R.string.JoinByPeekGroupText));
ChatActivity.java:                    builder.setTitle(LocaleController.getString("JoinByPeekGroupTitle", R.string.JoinByPeekGroupTitle));
ChatActivity.java:                builder.setPositiveButton(LocaleController.getString("JoinByPeekJoin", R.string.JoinByPeekJoin), (dialogInterface, i) -> {
ChatActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), (dialogInterface, i) -> finishFragment());
ChatActivity.java:                actionBar.setTitle(LocaleController.getString("ReportChatSpam", R.string.ReportChatSpam));
ChatActivity.java:                actionBar.setTitle(LocaleController.getString("ReportChatViolence", R.string.ReportChatViolence));
ChatActivity.java:                actionBar.setTitle(LocaleController.getString("ReportChatChild", R.string.ReportChatChild));
ChatActivity.java:                actionBar.setTitle(LocaleController.getString("ReportChatPornography", R.string.ReportChatPornography));
ChatActivity.java:            actionBar.setSubtitle(LocaleController.getString("ReportSelectMessages", R.string.ReportSelectMessages));
ChatActivity.java:                    searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
ChatActivity.java:                    } else if (searchingUserMessages == null && searchingChatMessages == null && searchUserButton != null && TextUtils.equals(editText.getText(), LocaleController.getString("SearchFrom", R.string.SearchFrom))) {
ChatActivity.java:                        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
ChatActivity.java:            searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
ChatActivity.java:            headerItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
ChatActivity.java:                headerItem.addSubItem(call, R.drawable.msg_callback, LocaleController.getString("Call", R.string.Call));
ChatActivity.java:                    headerItem.addSubItem(video_call, R.drawable.msg_videocall, LocaleController.getString("VideoCall", R.string.VideoCall));
ChatActivity.java:            editTextItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
ChatActivity.java:            SpannableStringBuilder stringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", R.string.Bold));
ChatActivity.java:            stringBuilder = new SpannableStringBuilder(LocaleController.getString("Italic", R.string.Italic));
ChatActivity.java:            stringBuilder = new SpannableStringBuilder(LocaleController.getString("Mono", R.string.Mono));
ChatActivity.java:                stringBuilder = new SpannableStringBuilder(LocaleController.getString("Strike", R.string.Strike));
ChatActivity.java:                stringBuilder = new SpannableStringBuilder(LocaleController.getString("Underline", R.string.Underline));
ChatActivity.java:            editTextItem.addSubItem(text_link, LocaleController.getString("CreateLink", R.string.CreateLink));
ChatActivity.java:            editTextItem.addSubItem(text_regular, LocaleController.getString("Regular", R.string.Regular));
ChatActivity.java:                headerItem.addSubItem(search, R.drawable.msg_search, LocaleController.getString("Search", R.string.Search));
ChatActivity.java:                headerItem.addSubItem(report, R.drawable.msg_report, LocaleController.getString("ReportChat", R.string.ReportChat));
ChatActivity.java:                timeItem2 = headerItem.addSubItem(chat_enc_timer, R.drawable.msg_timer, LocaleController.getString("SetTimer", R.string.SetTimer));
ChatActivity.java:                headerItem.addSubItem(clear_history, R.drawable.msg_clear, LocaleController.getString("ClearHistory", R.string.ClearHistory));
ChatActivity.java:                headerItem.addSubItem(auto_delete_timer, R.drawable.msg_timer, LocaleController.getString("AutoDeleteSetTimer", R.string.AutoDeleteSetTimer));
ChatActivity.java:                        headerItem.addSubItem(delete_chat, R.drawable.msg_leave, LocaleController.getString("LeaveMegaMenu", R.string.LeaveMegaMenu));
ChatActivity.java:                        headerItem.addSubItem(delete_chat, R.drawable.msg_leave, LocaleController.getString("LeaveChannelMenu", R.string.LeaveChannelMenu));
ChatActivity.java:                    headerItem.addSubItem(delete_chat, R.drawable.msg_leave, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit));
ChatActivity.java:                    headerItem.addSubItem(delete_chat, R.drawable.msg_delete, LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser));
ChatActivity.java:                headerItem.addSubItem(add_shortcut, R.drawable.msg_home, LocaleController.getString("AddShortcut", R.string.AddShortcut));
ChatActivity.java:                headerItem.addSubItem(bot_settings, R.drawable.menu_settings, LocaleController.getString("BotSettings", R.string.BotSettings));
ChatActivity.java:                headerItem.addSubItem(bot_help, R.drawable.menu_help, LocaleController.getString("BotHelp", R.string.BotHelp));
ChatActivity.java:            attachItem.setContentDescription(LocaleController.getString("AccDescrAttachButton", R.string.AccDescrAttachButton));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(save_to, R.drawable.msg_download, AndroidUtilities.dp(54), LocaleController.getString("SaveToMusic", R.string.SaveToMusic)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.msg_edit, AndroidUtilities.dp(54), LocaleController.getString("Edit", R.string.Edit)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(star, R.drawable.msg_fave, AndroidUtilities.dp(54), LocaleController.getString("AddToFavorites", R.string.AddToFavorites)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(copy, R.drawable.msg_copy, AndroidUtilities.dp(54), LocaleController.getString("Copy", R.string.Copy)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(forward, R.drawable.msg_forward, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.msg_edit, AndroidUtilities.dp(54), LocaleController.getString("Edit", R.string.Edit)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(star, R.drawable.msg_fave, AndroidUtilities.dp(54), LocaleController.getString("AddToFavorites", R.string.AddToFavorites)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(copy, R.drawable.msg_copy, AndroidUtilities.dp(54), LocaleController.getString("Copy", R.string.Copy)));
ChatActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete)));
ChatActivity.java:                    bigEmptyView.setStatusText(AndroidUtilities.replaceTags(LocaleController.getString("GroupEmptyTitle1", R.string.GroupEmptyTitle1)));
ChatActivity.java:                        emptyMessage = LocaleController.getString("NoComments", R.string.NoComments);
ChatActivity.java:                        emptyMessage = LocaleController.getString("NoReplies", R.string.NoReplies);
ChatActivity.java:                    emptyMessage = LocaleController.getString("NoScheduledMessages", R.string.NoScheduledMessages);
ChatActivity.java:                    emptyMessage = LocaleController.getString("GotAQuestion", R.string.GotAQuestion);
ChatActivity.java:                    emptyMessage = LocaleController.getString("NoMessages", R.string.NoMessages);
ChatActivity.java:                bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(currentUser)));
ChatActivity.java:                bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(currentUser)));
ChatActivity.java:            pinnedListButton.setContentDescription(LocaleController.getString("AccPinnedMessagesList", R.string.AccPinnedMessagesList));
ChatActivity.java:            closePinned.setContentDescription(LocaleController.getString("Close", R.string.Close));
ChatActivity.java:                    builder.setTitle(LocaleController.getString("UnpinMessageAlertTitle", R.string.UnpinMessageAlertTitle));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
ChatActivity.java:                    builder.setPositiveButton(LocaleController.getString("UnpinMessage", R.string.UnpinMessage), (dialogInterface, i) -> {
ChatActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:        closeReportSpam.setContentDescription(LocaleController.getString("Close", R.string.Close));
ChatActivity.java:                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                                builder.setMessage(LocaleController.getString("SecretChatContextBotAlert", R.string.SecretChatContextBotAlert));
ChatActivity.java:                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChatActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
ChatActivity.java:                    builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), (dialogInterface, i) -> mentionsAdapter.clearRecentHashtags());
ChatActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:        pagedownButton.setContentDescription(LocaleController.getString("AccDescrPageDown", R.string.AccDescrPageDown));
ChatActivity.java:        mentiondownButton.setContentDescription(LocaleController.getString("AccDescrMentionDown", R.string.AccDescrMentionDown));
ChatActivity.java:                builder.setTitle(LocaleController.getString("CancelForward", R.string.CancelForward));
ChatActivity.java:                builder.setMessage(LocaleController.getString("CancelForwardMessage", R.string.CancelForwardMessage));
ChatActivity.java:                builder.setPositiveButton(LocaleController.getString("CancelForwarding", R.string.CancelForwarding), (dialogInterface, i) -> {
ChatActivity.java:                builder.setNegativeButton(LocaleController.getString("SelectOtherChat", R.string.SelectOtherChat), (dialogInterface, i) -> {
ChatActivity.java:        searchUpButton.setContentDescription(LocaleController.getString("AccDescrSearchNext", R.string.AccDescrSearchNext));
ChatActivity.java:        searchDownButton.setContentDescription(LocaleController.getString("AccDescrSearchPrev", R.string.AccDescrSearchPrev));
ChatActivity.java:                searchItem.setSearchFieldHint(LocaleController.getString("SearchMembers", R.string.SearchMembers));
ChatActivity.java:                searchItem.setSearchFieldCaption(LocaleController.getString("SearchFrom", R.string.SearchFrom));
ChatActivity.java:            searchUserButton.setContentDescription(LocaleController.getString("AccDescrSearchByUser", R.string.AccDescrSearchByUser));
ChatActivity.java:        searchCalendarButton.setContentDescription(LocaleController.getString("JumpToDate", R.string.JumpToDate));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
ChatActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> getMessagesController().unblockPeer(currentUser.id));
ChatActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:        bottomOverlayImage.setContentDescription(LocaleController.getString("SettingsHelp", R.string.SettingsHelp));
ChatActivity.java:        bottomOverlayImage.setOnClickListener(v -> undoView.showWithAction(dialog_id, UndoView.ACTION_TEXT_INFO, LocaleController.getString("BroadcastGroupInfo", R.string.BroadcastGroupInfo)));
ChatActivity.java:        replyButton.setText(LocaleController.getString("Reply", R.string.Reply));
ChatActivity.java:        forwardButton.setText(LocaleController.getString("Forward", R.string.Forward));
ChatActivity.java:        String from = LocaleController.getString("SearchFrom", R.string.SearchFrom);
ChatActivity.java:            text = LocaleController.formatString("ChatDistanceToPeer", R.string.ChatDistanceToPeer, currentUser.first_name, LocaleController.formatDistance(distanceToPeer, 0));
ChatActivity.java:                    text = ChatObject.isChannel(currentChat) && !currentChat.megagroup ? LocaleController.getString("ActionUserInvitedToChannel", R.string.ActionUserInvitedToChannel) : LocaleController.getString("ActionUserInvitedToGroup", R.string.ActionUserInvitedToGroup);
ChatActivity.java:        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", R.string.ShareYouPhoneNumberTitle));
ChatActivity.java:                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", R.string.AreYouSureShareMyContactInfoBot));
ChatActivity.java:                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", R.string.AreYouSureShareMyContactInfoUser, PhoneFormat.getInstance().format("+" + getUserConfig().getCurrentUser().phone), ContactsController.formatName(currentUser.first_name, currentUser.last_name))));
ChatActivity.java:            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
ChatActivity.java:        builder.setPositiveButton(LocaleController.getString("ShareContact", R.string.ShareContact), (dialogInterface, i) -> {
ChatActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:            voiceHintTextView.setText(video ? LocaleController.getString("HoldToVideo", R.string.HoldToVideo) : LocaleController.getString("HoldToAudio", R.string.HoldToAudio));
ChatActivity.java:            voiceHintTextView.setText(LocaleController.getString("HoldToAudioOnly", R.string.HoldToAudioOnly));
ChatActivity.java:        slowModeHint.setText(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", R.string.SlowModeHint, time)));
ChatActivity.java:        timerHintView.setText(LocaleController.formatString("AutoDeleteSetInfo", R.string.AutoDeleteSetInfo, time));
ChatActivity.java:            searchAsListHint.setText(LocaleController.getString("TapToViewAsList", R.string.TapToViewAsList));
ChatActivity.java:            mediaBanTooltip.setText(LocaleController.getString("GlobalAttachMediaRestricted", R.string.GlobalAttachMediaRestricted));
ChatActivity.java:                mediaBanTooltip.setText(LocaleController.getString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
ChatActivity.java:                mediaBanTooltip.setText(LocaleController.formatString("AttachMediaRestricted", R.string.AttachMediaRestricted, LocaleController.formatDateForBan(currentChat.banned_rights.until_date)));
ChatActivity.java:        gifHintTextView.setText(LocaleController.getString("TapHereGifs", R.string.TapHereGifs));
ChatActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
ChatActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:                    builder.setMessage(LocaleController.getString("SecretLinkPreviewAlert", R.string.SecretLinkPreviewAlert));
ChatActivity.java:                        editButtonText = LocaleController.getString("EditMessageEditPhoto", R.string.EditMessageEditPhoto);
ChatActivity.java:                        replaceButtonText = LocaleController.getString("EditMessageReplacePhoto", R.string.EditMessageReplacePhoto);
ChatActivity.java:                        editButtonText = LocaleController.getString("EditMessageEditVideo", R.string.EditMessageEditVideo);
ChatActivity.java:                        replaceButtonText = LocaleController.getString("EditMessageReplaceVideo", R.string.EditMessageReplaceVideo);
ChatActivity.java:                        replaceButtonText = LocaleController.getString("EditMessageReplaceGif", R.string.EditMessageReplaceGif);
ChatActivity.java:                        replaceButtonText = LocaleController.getString("EditMessageReplaceAudio", R.string.EditMessageReplaceAudio);
ChatActivity.java:                        replaceButtonText = LocaleController.getString("EditMessageReplaceFile", R.string.EditMessageReplaceFile);
ChatActivity.java:                    replyIconImageView.setContentDescription(LocaleController.getString("AccDescrEditing", R.string.AccDescrEditing));
ChatActivity.java:                    replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelEdit", R.string.AccDescrCancelEdit));
ChatActivity.java:                        replyNameTextView.setText(LocaleController.getString("EditMessage", R.string.EditMessage));
ChatActivity.java:                        replyNameTextView.setText(LocaleController.getString("EditCaption", R.string.EditCaption));
ChatActivity.java:                        replyObjectTextView.setText(LocaleController.getString("EditMessageMedia", R.string.EditMessageMedia));
ChatActivity.java:                replyIconImageView.setContentDescription(LocaleController.getString("AccDescrReplying", R.string.AccDescrReplying));
ChatActivity.java:                replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelReply", R.string.AccDescrCancelReply));
ChatActivity.java:                replyIconImageView.setContentDescription(LocaleController.getString("AccDescrForwarding", R.string.AccDescrForwarding));
ChatActivity.java:                replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelForward", R.string.AccDescrCancelForward));
ChatActivity.java:                                replyObjectTextView.setText(LocaleController.getString("AttachGif", R.string.AttachGif));
ChatActivity.java:                    replyNameTextView.setText(LocaleController.getString("GettingLinkInfo", R.string.GettingLinkInfo));
ChatActivity.java:                        replyNameTextView.setText(LocaleController.getString("LinkPreview", R.string.LinkPreview));
ChatActivity.java:                bottomOverlayText.setText(LocaleController.getString("GlobalSendMessageRestricted", R.string.GlobalSendMessageRestricted));
ChatActivity.java:                bottomOverlayText.setText(LocaleController.getString("SendMessageRestrictedForever", R.string.SendMessageRestrictedForever));
ChatActivity.java:                bottomOverlayText.setText(LocaleController.formatString("SendMessageRestricted", R.string.SendMessageRestricted, LocaleController.formatDateForBan(currentChat.banned_rights.until_date)));
ChatActivity.java:                bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing));
ChatActivity.java:                bottomOverlayText.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "<b>" + currentUser.first_name + "</b>")));
ChatActivity.java:                bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
ChatActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                builder.setMessage(LocaleController.getString("PermissionNoAudioVideo", R.string.PermissionNoAudioVideo));
ChatActivity.java:                builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
ChatActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChatActivity.java:                    saveItem.setContentDescription(canSaveMusicCount > 0 ? LocaleController.getString("SaveToMusic", R.string.SaveToMusic) : LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChatActivity.java:                bottomOverlayChatText.setText(LocaleController.getString("ReportMessages", R.string.ReportMessages));
ChatActivity.java:                bottomOverlayChatText.setText(LocaleController.formatString("ReportMessagesCount", R.string.ReportMessagesCount, LocaleController.formatPluralString("messages", size)).toUpperCase());
ChatActivity.java:                    avatarContainer.setTitle(LocaleController.getString("CommentsTitle", R.string.CommentsTitle));
ChatActivity.java:            avatarContainer.setTitle(LocaleController.getString("RepliesTitle", R.string.RepliesTitle));
ChatActivity.java:                avatarContainer.setTitle(LocaleController.getString("Reminders", R.string.Reminders));
ChatActivity.java:                avatarContainer.setTitle(LocaleController.getString("ScheduledMessages", R.string.ScheduledMessages));
ChatActivity.java:                avatarContainer.setTitle(LocaleController.getString("SavedMessages", R.string.SavedMessages));
ChatActivity.java:                muteItem.setTextAndIcon(LocaleController.getString("UnmuteNotifications", R.string.UnmuteNotifications), R.drawable.msg_unmute);
ChatActivity.java:                muteItem.setTextAndIcon(LocaleController.getString("MuteNotifications", R.string.MuteNotifications), R.drawable.msg_mute);
ChatActivity.java:        BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment)).show();
ChatActivity.java:                                BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("MessageNotFound", R.string.MessageNotFound)).show();
ChatActivity.java:                            msg.message = LocaleController.getString("NoComments", R.string.NoComments);
ChatActivity.java:                            msg.message = LocaleController.getString("NoReplies", R.string.NoReplies);
ChatActivity.java:                        msg.message = LocaleController.getString("DiscussionStarted", R.string.DiscussionStarted);
ChatActivity.java:                                dateMsg.message = LocaleController.getString("MessageScheduledUntilOnline", R.string.MessageScheduledUntilOnline);
ChatActivity.java:                                dateMsg.message = LocaleController.formatString("MessageScheduledOn", R.string.MessageScheduledOn, LocaleController.formatDateChat(obj.messageOwner.date, true));
ChatActivity.java:                            BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("MessageNotFound", R.string.MessageNotFound)).show();
ChatActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                        builder.setMessage(LocaleController.getString("ChannelCantOpenBannedByAdmin", R.string.ChannelCantOpenBannedByAdmin));
ChatActivity.java:                        builder.setMessage(LocaleController.getString("ChannelCantOpenPrivate", R.string.ChannelCantOpenPrivate));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("ChannelCantOpenNa", R.string.ChannelCantOpenNa));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("ChannelCantOpenBanned", R.string.ChannelCantOpenBanned));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("JoinByPeekChannelText", R.string.JoinByPeekChannelText));
ChatActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChatActivity.java:                BulletinFactory.of(this).createSimpleBulletin(R.raw.linkbroken, LocaleController.getString("LinkHashExpired", R.string.LinkHashExpired)).show();
ChatActivity.java:                            dateMsg.message = LocaleController.getString("MessageScheduledUntilOnline", R.string.MessageScheduledUntilOnline);
ChatActivity.java:                            dateMsg.message = LocaleController.formatString("MessageScheduledOn", R.string.MessageScheduledOn, LocaleController.formatDateChat(obj.messageOwner.date, true));
ChatActivity.java:                searchCountText.setCount(LocaleController.getString("NoResult", R.string.NoResult), 0, false);
ChatActivity.java:                searchCountText.setCount(LocaleController.formatString("OfCounted", R.string.OfCounted, num + 1, count), num + 1, true);
ChatActivity.java:                            message = LocaleController.getString("UseProxySponsorInfo", R.string.UseProxySponsorInfo);
ChatActivity.java:                                message = LocaleController.getString("PsaInfoDefault", R.string.PsaInfoDefault);
ChatActivity.java:        SpannableStringBuilder stringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", R.string.Bold));
ChatActivity.java:        stringBuilder = new SpannableStringBuilder(LocaleController.getString("Italic", R.string.Italic));
ChatActivity.java:        stringBuilder = new SpannableStringBuilder(LocaleController.getString("Mono", R.string.Mono));
ChatActivity.java:            stringBuilder = new SpannableStringBuilder(LocaleController.getString("Strike", R.string.Strike));
ChatActivity.java:            stringBuilder = new SpannableStringBuilder(LocaleController.getString("Underline", R.string.Underline));
ChatActivity.java:        menu.add(R.id.menu_groupbolditalic, R.id.menu_link, 11, LocaleController.getString("CreateLink", R.string.CreateLink));
ChatActivity.java:        menu.add(R.id.menu_groupbolditalic, R.id.menu_regular, 12, LocaleController.getString("Regular", R.string.Regular));
ChatActivity.java:                bottomOverlayChatText.setText(LocaleController.getString("UnpinAllMessages", R.string.UnpinAllMessages));
ChatActivity.java:                bottomOverlayChatText.setText(LocaleController.getString("HidePinnedMessages", R.string.HidePinnedMessages));
ChatActivity.java:                            bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", R.string.ChannelJoin));
ChatActivity.java:                            bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute), false);
ChatActivity.java:                            bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute), true);
ChatActivity.java:                    bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
ChatActivity.java:                    bottomOverlayChatText.setText(LocaleController.getString("BotUnblock", R.string.BotUnblock));
ChatActivity.java:                    bottomOverlayChatText.setText(LocaleController.getString("Unblock", R.string.Unblock));
ChatActivity.java:                    bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute), false);
ChatActivity.java:                    bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute), true);
ChatActivity.java:                bottomOverlayChatText.setText(LocaleController.getString("BotStart", R.string.BotStart));
ChatActivity.java:                bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
ChatActivity.java:                    avatarContainer.setTitle(LocaleController.getString("CommentsTitle", R.string.CommentsTitle));
ChatActivity.java:                text = LocaleController.getString("NoComments", R.string.NoComments);
ChatActivity.java:                text = LocaleController.getString("NoReplies", R.string.NoReplies);
ChatActivity.java:            text = LocaleController.getString("DiscussionStarted", R.string.DiscussionStarted);
ChatActivity.java:                        nameTextView.setText(LocaleController.getString("PinnedMessage", R.string.PinnedMessage));
ChatActivity.java:                        nameTextView.setText(LocaleController.getString("PreviousPinnedMessage", R.string.PreviousPinnedMessage));
ChatActivity.java:            String str = LocaleController.getString("GroupAddMembers", R.string.GroupAddMembers);
ChatActivity.java:                addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
ChatActivity.java:                    addToContactsButton.setText(LocaleController.getString("Unarchive", R.string.Unarchive).toUpperCase());
ChatActivity.java:                        addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
ChatActivity.java:                        addToContactsButton.setText(LocaleController.formatString("AddContactFullChat", R.string.AddContactFullChat, UserObject.getFirstName(user)).toUpperCase());
ChatActivity.java:                addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
ChatActivity.java:                addToContactsButton.setText(LocaleController.getString("ShareMyPhone", R.string.ShareMyPhone).toUpperCase());
ChatActivity.java:                    addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
ChatActivity.java:            reportSpamButton.setText(LocaleController.getString("ReportSpamUser", R.string.ReportSpamUser));
ChatActivity.java:                reportSpamButton.setText(LocaleController.getString("ReportSpamLocation", R.string.ReportSpamLocation));
ChatActivity.java:                    addToContactsButton.setText(LocaleController.getString("Unarchive", R.string.Unarchive).toUpperCase());
ChatActivity.java:                    reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
ChatActivity.java:                    reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
ChatActivity.java:                    Toast.makeText(getParentActivity(), LocaleController.getString("MessageNotFound", R.string.MessageNotFound), Toast.LENGTH_SHORT).show();
ChatActivity.java:                        items.add(LocaleController.getString("Copy", R.string.Copy));
ChatActivity.java:                    items.add(LocaleController.getString("CancelSending", R.string.CancelSending));
ChatActivity.java:                    items.add(LocaleController.getString("Retry", R.string.Retry));
ChatActivity.java:                    items.add(LocaleController.getString("Delete", R.string.Delete));
ChatActivity.java:                            items.add(LocaleController.getString("VoipGroupJoinCall", R.string.VoipGroupJoinCall));
ChatActivity.java:                            items.add(LocaleController.getString("Reply", R.string.Reply));
ChatActivity.java:                            items.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
ChatActivity.java:                            items.add(LocaleController.getString("PinMessage", R.string.PinMessage));
ChatActivity.java:                            items.add(LocaleController.getString("Edit", R.string.Edit));
ChatActivity.java:                            items.add(LocaleController.getString("ReportChat", R.string.ReportChat));
ChatActivity.java:                            items.add(LocaleController.getString("Reply", R.string.Reply));
ChatActivity.java:                        items.add(LocaleController.getString("Delete", R.string.Delete));
ChatActivity.java:                    items.add(LocaleController.getString("Retry", R.string.Retry));
ChatActivity.java:                    items.add(LocaleController.getString("Copy", R.string.Copy));
ChatActivity.java:                    items.add(LocaleController.getString("Delete", R.string.Delete));
ChatActivity.java:                            items.add(LocaleController.getString("MessageScheduleSend", R.string.MessageScheduleSend));
ChatActivity.java:                            items.add((call.reason instanceof TLRPC.TL_phoneCallDiscardReasonMissed || call.reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) && !message.isOutOwner() ? LocaleController.getString("CallBack", R.string.CallBack) : LocaleController.getString("CallAgain", R.string.CallAgain));
ChatActivity.java:                                items.add(LocaleController.getString("CallMessageReportProblem", R.string.CallMessageReportProblem));
ChatActivity.java:                            items.add(LocaleController.getString("Reply", R.string.Reply));
ChatActivity.java:                            items.add(LocaleController.getString("Copy", R.string.Copy));
ChatActivity.java:                                items.add(LocaleController.getString("ViewThread", R.string.ViewThread));
ChatActivity.java:                            items.add(LocaleController.getString("CopyLink", R.string.CopyLink));
ChatActivity.java:                                        items.add(LocaleController.getString("Unvote", R.string.Unvote));
ChatActivity.java:                                            items.add(LocaleController.getString("StopQuiz", R.string.StopQuiz));
ChatActivity.java:                                            items.add(LocaleController.getString("StopPoll", R.string.StopPoll));
ChatActivity.java:                                    items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
ChatActivity.java:                                    items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChatActivity.java:                                items.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
ChatActivity.java:                                    items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ChatActivity.java:                                    items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                                items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
ChatActivity.java:                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                                    items.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
ChatActivity.java:                                items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChatActivity.java:                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                                    items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ChatActivity.java:                            items.add(LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile));
ChatActivity.java:                            items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChatActivity.java:                            items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                            items.add(LocaleController.getString("ApplyThemeFile", R.string.ApplyThemeFile));
ChatActivity.java:                            items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChatActivity.java:                            items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                            items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ChatActivity.java:                            items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChatActivity.java:                            items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                                items.add(LocaleController.getString("AddToMasks", R.string.AddToMasks));
ChatActivity.java:                                items.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
ChatActivity.java:                                        items.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
ChatActivity.java:                                    items.add(LocaleController.getString("DeleteFromFavorites", R.string.DeleteFromFavorites));
ChatActivity.java:                                items.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
ChatActivity.java:                                items.add(LocaleController.getString("Copy", R.string.Copy));
ChatActivity.java:                                items.add(LocaleController.getString("Call", R.string.Call));
ChatActivity.java:                                    items.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
ChatActivity.java:                                items.add(LocaleController.getString("DeleteFromFavorites", R.string.DeleteFromFavorites));
ChatActivity.java:                            items.add(LocaleController.getString("Forward", R.string.Forward));
ChatActivity.java://                            items.add(LocaleController.getString("ViewStats", R.string.ViewStats));
ChatActivity.java:                            items.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
ChatActivity.java:                            items.add(LocaleController.getString("PinMessage", R.string.PinMessage));
ChatActivity.java:                            items.add(LocaleController.getString("Edit", R.string.Edit));
ChatActivity.java:                            items.add(LocaleController.getString("MessageScheduleEditTime", R.string.MessageScheduleEditTime));
ChatActivity.java:                                items.add(LocaleController.getString("BlockContact", R.string.BlockContact));
ChatActivity.java:                                items.add(LocaleController.getString("ReportChat", R.string.ReportChat));
ChatActivity.java:                            items.add(LocaleController.getString("Delete", R.string.Delete));
ChatActivity.java:                            items.add(LocaleController.getString("Reply", R.string.Reply));
ChatActivity.java:                            items.add(LocaleController.getString("Copy", R.string.Copy));
ChatActivity.java:                                items.add(LocaleController.getString("ViewThread", R.string.ViewThread));
ChatActivity.java:                                items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ChatActivity.java:                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                                items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
ChatActivity.java:                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                                items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
ChatActivity.java:                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
ChatActivity.java:                                items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ChatActivity.java:                            items.add(LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile));
ChatActivity.java:                            items.add(LocaleController.getString("ApplyThemeFile", R.string.ApplyThemeFile));
ChatActivity.java:                            items.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
ChatActivity.java:                                items.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
ChatActivity.java:                                items.add(LocaleController.getString("Copy", R.string.Copy));
ChatActivity.java:                                items.add(LocaleController.getString("Call", R.string.Call));
ChatActivity.java:                        items.add(LocaleController.getString("Delete", R.string.Delete));
ChatActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("EditMessageError", R.string.EditMessageError));
ChatActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChatActivity.java:                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                            builder.setMessage(LocaleController.getString("IncorrectTheme", R.string.IncorrectTheme));
ChatActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChatActivity.java:                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                            builder.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
ChatActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChatActivity.java:                    getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
ChatActivity.java:                builder.setTitle(LocaleController.getString("PinMessageAlertTitle", R.string.PinMessageAlertTitle));
ChatActivity.java:                        builder.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
ChatActivity.java:                        builder.setMessage(LocaleController.getString("PinMessageAlertChat", R.string.PinMessageAlertChat));
ChatActivity.java:                        cell.setText(LocaleController.formatString("PinAlsoFor", R.string.PinAlsoFor, UserObject.getFirstName(currentUser)), "", false, false);
ChatActivity.java:                        builder.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
ChatActivity.java:                        builder.setMessage(LocaleController.getString("PinMessageAlert", R.string.PinMessageAlert));
ChatActivity.java:                        cell.setText(LocaleController.getString("PinNotify", R.string.PinNotify), "", true, false);
ChatActivity.java:                        builder.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
ChatActivity.java:                        builder.setMessage(LocaleController.getString("PinMessageAlertChannel", R.string.PinMessageAlertChannel));
ChatActivity.java:                builder.setPositiveButton(LocaleController.getString("PinMessage", R.string.PinMessage), (dialogInterface, i) -> {
ChatActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:                    builder.setTitle(LocaleController.getString("StopQuizAlertTitle", R.string.StopQuizAlertTitle));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("StopQuizAlertText", R.string.StopQuizAlertText));
ChatActivity.java:                    builder.setTitle(LocaleController.getString("StopPollAlertTitle", R.string.StopPollAlertTitle));
ChatActivity.java:                    builder.setMessage(LocaleController.getString("StopPollAlertText", R.string.StopPollAlertText));
ChatActivity.java:                builder.setPositiveButton(LocaleController.getString("Stop", R.string.Stop), (dialogInterface, i) -> {
ChatActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:                                    AlertsCreator.showSimpleToast(ChatActivity.this, LocaleController.getString("SlowmodeSendError", R.string.SlowmodeSendError));
ChatActivity.java:                                    AlertsCreator.showSimpleToast(ChatActivity.this, LocaleController.getString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
ChatActivity.java:                builder.setTitle(LocaleController.getString("DiscardVideoMessageTitle", R.string.DiscardVideoMessageTitle));
ChatActivity.java:                builder.setMessage(LocaleController.getString("DiscardVideoMessageDescription", R.string.DiscardVideoMessageDescription));
ChatActivity.java:                builder.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", R.string.DiscardVoiceMessageTitle));
ChatActivity.java:                builder.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", R.string.DiscardVoiceMessageDescription));
ChatActivity.java:            builder.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", R.string.DiscardVoiceMessageAction), (dialog, which) -> {
ChatActivity.java:            builder.setNegativeButton(LocaleController.getString("Continue", R.string.Continue), null);
ChatActivity.java:                replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", R.string.TimeToEdit, AndroidUtilities.formatShortDuration(dt)));
ChatActivity.java:            replyObjectTextView.setText(LocaleController.formatString("TimeToEditExpired", R.string.TimeToEditExpired));
ChatActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChatActivity.java:            builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
ChatActivity.java:            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
ChatActivity.java:            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", R.string.BotPermissionGameAlert, name));
ChatActivity.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
ChatActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("ChannelPostDeleted", R.string.ChannelPostDeleted)).show();
ChatActivity.java:                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatActivity.java:                                    builder.setMessage(LocaleController.getString("JoinByPeekChannelText", R.string.JoinByPeekChannelText));
ChatActivity.java:                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ChatActivity.java:        builder.setTitle(LocaleController.getString("OpenUrlTitle", R.string.OpenUrlTitle));
ChatActivity.java:        String format = LocaleController.getString("OpenUrlAlert2", R.string.OpenUrlAlert2);
ChatActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatActivity.java:                stringBuilder = AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption1", R.string.OpenUrlOption1, request.domain, ContactsController.formatName(selfUser.first_name, selfUser.last_name)));
ChatActivity.java:                cells[a].setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", R.string.OpenUrlOption2, UserObject.getFirstName(request.bot))), "", true, false);
ChatActivity.java:        builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), (dialogInterface, i) -> {
ChatActivity.java:            Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
ChatActivity.java:                        arrayList.add(LocaleController.getString("CopyCardNumber", R.string.CopyCardNumber));
ChatActivity.java:                                Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("CardNumberCopied", R.string.CardNumberCopied), Toast.LENGTH_SHORT).show();
ChatActivity.java:                    builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
ChatActivity.java:                builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
ChatActivity.java:                                text = LocaleController.getString("PsaMessageInfoDefault", R.string.PsaMessageInfoDefault);
ChatActivity.java:                    helpView.setText(false, LocaleController.getString("RepliesChatInfo", R.string.RepliesChatInfo));
ChatActivity.java:                    unreadCell.setText(LocaleController.getString("UnreadMessages", R.string.UnreadMessages));
ChatEditActivity.java:        actionBar.setTitle(LocaleController.getString("ChannelEdit", R.string.ChannelEdit));
ChatEditActivity.java:            nameTextView.setHint(LocaleController.getString("EnterChannelName", R.string.EnterChannelName));
ChatEditActivity.java:            nameTextView.setHint(LocaleController.getString("GroupName", R.string.GroupName));
ChatEditActivity.java:        descriptionTextView.setHint(LocaleController.getString("DescriptionOptionalPlaceholder", R.string.DescriptionOptionalPlaceholder));
ChatEditActivity.java:                headerCell.setText(LocaleController.getString("ChatHistory", R.string.ChatHistory));
ChatEditActivity.java:                        buttons[a].setTextAndValue(LocaleController.getString("ChatHistoryVisible", R.string.ChatHistoryVisible), LocaleController.getString("ChatHistoryVisibleInfo", R.string.ChatHistoryVisibleInfo), true, !historyHidden);
ChatEditActivity.java:                            buttons[a].setTextAndValue(LocaleController.getString("ChatHistoryHidden", R.string.ChatHistoryHidden), LocaleController.getString("ChatHistoryHiddenInfo", R.string.ChatHistoryHiddenInfo), false, historyHidden);
ChatEditActivity.java:                            buttons[a].setTextAndValue(LocaleController.getString("ChatHistoryHidden", R.string.ChatHistoryHidden), LocaleController.getString("ChatHistoryHiddenInfo2", R.string.ChatHistoryHiddenInfo2), false, historyHidden);
ChatEditActivity.java:            signCell.setTextAndValueAndCheck(LocaleController.getString("ChannelSignMessages", R.string.ChannelSignMessages), LocaleController.getString("ChannelSignMessagesInfo", R.string.ChannelSignMessagesInfo), signMessages, true, false);
ChatEditActivity.java:            doneButton.setContentDescription(LocaleController.getString("Done", R.string.Done));
ChatEditActivity.java:            logCell.setTextAndIcon(LocaleController.getString("EventLog", R.string.EventLog), R.drawable.group_log, false);
ChatEditActivity.java:            stickersInfoCell3.setText(LocaleController.getString("GroupStickersInfo", R.string.GroupStickersInfo));
ChatEditActivity.java:                deleteCell.setText(LocaleController.getString("ChannelDelete", R.string.ChannelDelete), false);
ChatEditActivity.java:                deleteCell.setText(LocaleController.getString("DeleteAndExitButton", R.string.DeleteAndExitButton), false);
ChatEditActivity.java:                setAvatarCell.setTextAndIcon(LocaleController.getString("ChatSetNewPhoto", R.string.ChatSetNewPhoto), R.drawable.menu_camera2, true);
ChatEditActivity.java:                setAvatarCell.setTextAndIcon(LocaleController.getString("ChatSetPhotoOrVideo", R.string.ChatSetPhotoOrVideo), R.drawable.menu_camera2, true);
ChatEditActivity.java:                setAvatarCell.setTextAndIcon(LocaleController.getString("ChatSetNewPhoto", R.string.ChatSetNewPhoto), R.drawable.menu_camera2, true);
ChatEditActivity.java:            builder.setTitle(LocaleController.getString("UserRestrictionsApplyChanges", R.string.UserRestrictionsApplyChanges));
ChatEditActivity.java:                builder.setMessage(LocaleController.getString("ChannelSettingsChangedAlert", R.string.ChannelSettingsChangedAlert));
ChatEditActivity.java:                builder.setMessage(LocaleController.getString("GroupSettingsChangedAlert", R.string.GroupSettingsChangedAlert));
ChatEditActivity.java:            builder.setPositiveButton(LocaleController.getString("ApplyTheme", R.string.ApplyTheme), (dialogInterface, i) -> processDone());
ChatEditActivity.java:            builder.setNegativeButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialog, which) -> finishFragment());
ChatEditActivity.java:                    linkedCell.setTextAndValue(LocaleController.getString("Discussion", R.string.Discussion), LocaleController.getString("DiscussionInfo", R.string.DiscussionInfo), true);
ChatEditActivity.java:                                linkedCell.setTextAndValue(LocaleController.getString("Discussion", R.string.Discussion), chat.title, true);
ChatEditActivity.java:                                linkedCell.setTextAndValue(LocaleController.getString("Discussion", R.string.Discussion), "@" + chat.username, true);
ChatEditActivity.java:                                linkedCell.setTextAndValue(LocaleController.getString("LinkedChannel", R.string.LinkedChannel), chat.title, false);
ChatEditActivity.java:                                linkedCell.setTextAndValue(LocaleController.getString("LinkedChannel", R.string.LinkedChannel), "@" + chat.username, false);
ChatEditActivity.java:                    locationCell.setTextAndValue(LocaleController.getString("AttachLocation", R.string.AttachLocation), location.address, true);
ChatEditActivity.java:                    locationCell.setTextAndValue(LocaleController.getString("AttachLocation", R.string.AttachLocation), "Unknown address", true);
ChatEditActivity.java:                    link = LocaleController.getString("TypeLocationGroupEdit", R.string.TypeLocationGroupEdit);
ChatEditActivity.java:                typeCell.setTextAndValue(LocaleController.getString("TypeLocationGroup", R.string.TypeLocationGroup), link, historyCell != null && historyCell.getVisibility() == View.VISIBLE || linkedCell != null && linkedCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                    type = isPrivate ? LocaleController.getString("TypePrivate", R.string.TypePrivate) : LocaleController.getString("TypePublic", R.string.TypePublic);
ChatEditActivity.java:                    type = isPrivate ? LocaleController.getString("TypePrivateGroup", R.string.TypePrivateGroup) : LocaleController.getString("TypePublicGroup", R.string.TypePublicGroup);
ChatEditActivity.java:                    typeCell.setTextAndValue(LocaleController.getString("ChannelType", R.string.ChannelType), type, historyCell != null && historyCell.getVisibility() == View.VISIBLE || linkedCell != null && linkedCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                    typeCell.setTextAndValue(LocaleController.getString("GroupType", R.string.GroupType), type, historyCell != null && historyCell.getVisibility() == View.VISIBLE || linkedCell != null && linkedCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:            String type = historyHidden ? LocaleController.getString("ChatHistoryHidden", R.string.ChatHistoryHidden) : LocaleController.getString("ChatHistoryVisible", R.string.ChatHistoryVisible);
ChatEditActivity.java:            historyCell.setTextAndValue(LocaleController.getString("ChatHistory", R.string.ChatHistory), type, false);
ChatEditActivity.java:                stickersCell.setTextAndValue(LocaleController.getString("GroupStickers", R.string.GroupStickers), info.stickerset.title, false);
ChatEditActivity.java:                stickersCell.setText(LocaleController.getString("GroupStickers", R.string.GroupStickers), false);
ChatEditActivity.java:                    membersCell.setTextAndValueAndIcon(LocaleController.getString("ChannelSubscribers", R.string.ChannelSubscribers), String.format("%d", info.participants_count), R.drawable.actions_viewmembers, true);
ChatEditActivity.java:                    blockCell.setTextAndValueAndIcon(LocaleController.getString("ChannelBlacklist", R.string.ChannelBlacklist), String.format("%d", Math.max(info.banned_count, info.kicked_count)), R.drawable.actions_removed, logCell != null && logCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                        membersCell.setTextAndValueAndIcon(LocaleController.getString("ChannelMembers", R.string.ChannelMembers), String.format("%d", info.participants_count), R.drawable.actions_viewmembers, logCell != null && logCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                        membersCell.setTextAndValueAndIcon(LocaleController.getString("ChannelMembers", R.string.ChannelMembers), String.format("%d", info.participants.participants.size()), R.drawable.actions_viewmembers, logCell != null && logCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                        blockCell.setTextAndValueAndIcon(LocaleController.getString("ChannelBlacklist", R.string.ChannelBlacklist), String.format("%d", Math.max(info.banned_count, info.kicked_count)), R.drawable.actions_removed, logCell != null && logCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                        blockCell.setTextAndValueAndIcon(LocaleController.getString("ChannelPermissions", R.string.ChannelPermissions), String.format("%d/%d", count, 8), R.drawable.actions_permissions, true);
ChatEditActivity.java:                adminCell.setTextAndValueAndIcon(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), String.format("%d", ChatObject.isChannel(currentChat) ? info.admins_count : getAdminCount()), R.drawable.actions_addadmin, true);
ChatEditActivity.java:                    membersCell.setTextAndIcon(LocaleController.getString("ChannelSubscribers", R.string.ChannelSubscribers), R.drawable.actions_viewmembers, true);
ChatEditActivity.java:                    blockCell.setTextAndIcon(LocaleController.getString("ChannelBlacklist", R.string.ChannelBlacklist), R.drawable.actions_removed, logCell != null && logCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                    membersCell.setTextAndIcon(LocaleController.getString("ChannelMembers", R.string.ChannelMembers), R.drawable.actions_viewmembers, logCell != null && logCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                        blockCell.setTextAndIcon(LocaleController.getString("ChannelBlacklist", R.string.ChannelBlacklist), R.drawable.actions_removed, logCell != null && logCell.getVisibility() == View.VISIBLE);
ChatEditActivity.java:                        blockCell.setTextAndIcon(LocaleController.getString("ChannelPermissions", R.string.ChannelPermissions), R.drawable.actions_permissions, true);
ChatEditActivity.java:                adminCell.setTextAndIcon(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), R.drawable.actions_addadmin, true);
ChatEditActivity.java:                    inviteLinksCell.setTextAndValueAndIcon(LocaleController.getString("InviteLinks", R.string.InviteLinks), Integer.toString(info.invitesCount), R.drawable.actions_link, true);
ChatEditActivity.java:                    inviteLinksCell.setTextAndValueAndIcon(LocaleController.getString("InviteLinks", R.string.InviteLinks), "1", R.drawable.actions_link, true);
ChatEditActivity.java:                stickersCell.setTextAndValue(LocaleController.getString("GroupStickers", R.string.GroupStickers), info.stickerset.title, false);
ChatEditActivity.java:                stickersCell.setText(LocaleController.getString("GroupStickers", R.string.GroupStickers), false);
ChatEditTypeActivity.java:                textCell2.setTextAndValue(LocaleController.getString("GroupStickers", R.string.GroupStickers), info.stickerset.title, false);
ChatEditTypeActivity.java:                textCell2.setText(LocaleController.getString("GroupStickers", R.string.GroupStickers), false);
ChatEditTypeActivity.java:        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
ChatEditTypeActivity.java:            actionBar.setTitle(LocaleController.getString("TypeLocationGroup", R.string.TypeLocationGroup));
ChatEditTypeActivity.java:            actionBar.setTitle(LocaleController.getString("ChannelSettingsTitle", R.string.ChannelSettingsTitle));
ChatEditTypeActivity.java:            actionBar.setTitle(LocaleController.getString("GroupSettingsTitle", R.string.GroupSettingsTitle));
ChatEditTypeActivity.java:            headerCell2.setText(LocaleController.getString("ChannelTypeHeader", R.string.ChannelTypeHeader));
ChatEditTypeActivity.java:            headerCell2.setText(LocaleController.getString("GroupTypeHeader", R.string.GroupTypeHeader));
ChatEditTypeActivity.java:            radioButtonCell2.setTextAndValue(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate), LocaleController.getString("ChannelPrivateInfo", R.string.ChannelPrivateInfo), false, isPrivate);
ChatEditTypeActivity.java:            radioButtonCell2.setTextAndValue(LocaleController.getString("MegaPrivate", R.string.MegaPrivate), LocaleController.getString("MegaPrivateInfo", R.string.MegaPrivateInfo), false, isPrivate);
ChatEditTypeActivity.java:            radioButtonCell1.setTextAndValue(LocaleController.getString("ChannelPublic", R.string.ChannelPublic), LocaleController.getString("ChannelPublicInfo", R.string.ChannelPublicInfo), false, !isPrivate);
ChatEditTypeActivity.java:            radioButtonCell1.setTextAndValue(LocaleController.getString("MegaPublic", R.string.MegaPublic), LocaleController.getString("MegaPublicInfo", R.string.MegaPublicInfo), false, !isPrivate);
ChatEditTypeActivity.java:        usernameTextView.setHint(LocaleController.getString("ChannelUsernamePlaceholder", R.string.ChannelUsernamePlaceholder));
ChatEditTypeActivity.java:        manageLinksTextView.setTextAndIcon(LocaleController.getString("ManageInviteLinks", R.string.ManageInviteLinks), R.drawable.actions_link, false);
ChatEditTypeActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatEditTypeActivity.java:                            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("RevokeLinkAlertChannel", R.string.RevokeLinkAlertChannel, getMessagesController().linkPrefix + "/" + channel.username, channel.title)));
ChatEditTypeActivity.java:                            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("RevokeLinkAlert", R.string.RevokeLinkAlert, getMessagesController().linkPrefix + "/" + channel.username, channel.title)));
ChatEditTypeActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatEditTypeActivity.java:                        builder.setPositiveButton(LocaleController.getString("RevokeButton", R.string.RevokeButton), (dialogInterface, i) -> {
ChatEditTypeActivity.java:            typeInfoCell.setText(LocaleController.getString("ChangePublicLimitReached", R.string.ChangePublicLimitReached));
ChatEditTypeActivity.java:                typeInfoCell.setText(isPrivate ? LocaleController.getString("ChannelPrivateLinkHelp", R.string.ChannelPrivateLinkHelp) : LocaleController.getString("ChannelUsernameHelp", R.string.ChannelUsernameHelp));
ChatEditTypeActivity.java:                headerCell.setText(isPrivate ? LocaleController.getString("ChannelInviteLinkTitle", R.string.ChannelInviteLinkTitle) : LocaleController.getString("ChannelLinkTitle", R.string.ChannelLinkTitle));
ChatEditTypeActivity.java:                typeInfoCell.setText(isPrivate ? LocaleController.getString("MegaPrivateLinkHelp", R.string.MegaPrivateLinkHelp) : LocaleController.getString("MegaUsernameHelp", R.string.MegaUsernameHelp));
ChatEditTypeActivity.java:                headerCell.setText(isPrivate ? LocaleController.getString("ChannelInviteLinkTitle", R.string.ChannelInviteLinkTitle) : LocaleController.getString("ChannelLinkTitle", R.string.ChannelLinkTitle));
ChatEditTypeActivity.java:                manageLinksInfoCell.setText(LocaleController.getString("ManageLinksInfoHelp", R.string.ManageLinksInfoHelp));
ChatEditTypeActivity.java:                checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
ChatEditTypeActivity.java:                        checkTextView.setText(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
ChatEditTypeActivity.java:                        checkTextView.setText(LocaleController.getString("LinkInvalidStartNumberMega", R.string.LinkInvalidStartNumberMega));
ChatEditTypeActivity.java:                    checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
ChatEditTypeActivity.java:                checkTextView.setText(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
ChatEditTypeActivity.java:                checkTextView.setText(LocaleController.getString("LinkInvalidShortMega", R.string.LinkInvalidShortMega));
ChatEditTypeActivity.java:            checkTextView.setText(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
ChatEditTypeActivity.java:        checkTextView.setText(LocaleController.getString("LinkChecking", R.string.LinkChecking));
ChatEditTypeActivity.java:                        checkTextView.setText(LocaleController.formatString("LinkAvailable", R.string.LinkAvailable, name));
ChatEditTypeActivity.java:                            checkTextView.setText(LocaleController.getString("LinkInUse", R.string.LinkInUse));
ChatEditTypeActivity.java:                    builder.setMessage(LocaleController.getString("RevokeAlertNewLink", R.string.RevokeAlertNewLink));
ChatEditTypeActivity.java:                    builder.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
ChatEditTypeActivity.java:                    builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
ChatLinkActivity.java:        actionBar.setTitle(LocaleController.getString("Discussion", R.string.Discussion));
ChatLinkActivity.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
ChatLinkActivity.java:        emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
ChatLinkActivity.java:                        title = LocaleController.getString("DiscussionUnlinkGroup", R.string.DiscussionUnlinkGroup);
ChatLinkActivity.java:                        message = LocaleController.formatString("DiscussionUnlinkChannelAlert", R.string.DiscussionUnlinkChannelAlert, c.title);
ChatLinkActivity.java:                        title = LocaleController.getString("DiscussionUnlink", R.string.DiscussionUnlinkChannel);
ChatLinkActivity.java:                        message = LocaleController.formatString("DiscussionUnlinkGroupAlert", R.string.DiscussionUnlinkGroupAlert, c.title);
ChatLinkActivity.java:                    builder.setPositiveButton(LocaleController.getString("DiscussionUnlink", R.string.DiscussionUnlink), (dialogInterface, i) -> {
ChatLinkActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatLinkActivity.java:            message = LocaleController.formatString("DiscussionLinkGroupPublicPrivateAlert", R.string.DiscussionLinkGroupPublicPrivateAlert, chat.title, currentChat.title);
ChatLinkActivity.java:                message = LocaleController.formatString("DiscussionLinkGroupPrivateAlert", R.string.DiscussionLinkGroupPrivateAlert, chat.title, currentChat.title);
ChatLinkActivity.java:                message = LocaleController.formatString("DiscussionLinkGroupPublicAlert", R.string.DiscussionLinkGroupPublicAlert, chat.title, currentChat.title);
ChatLinkActivity.java:            message += "\n\n" + LocaleController.getString("DiscussionLinkGroupAlertHistory", R.string.DiscussionLinkGroupAlertHistory);
ChatLinkActivity.java:        builder.setPositiveButton(LocaleController.getString("DiscussionLinkGroup", R.string.DiscussionLinkGroup), (dialogInterface, i) -> {
ChatLinkActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatLinkActivity.java:                        messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("DiscussionChannelGroupSetHelp2", R.string.DiscussionChannelGroupSetHelp2, chat.title)));
ChatLinkActivity.java:                    messageTextView.setText(LocaleController.getString("DiscussionChannelHelp3", R.string.DiscussionChannelHelp3));
ChatLinkActivity.java:                    messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("DiscussionGroupHelp", R.string.DiscussionGroupHelp, chat.title)));
ChatLinkActivity.java:                            privacyCell.setText(LocaleController.getString("DiscussionChannelHelp2", R.string.DiscussionChannelHelp2));
ChatLinkActivity.java:                            privacyCell.setText(LocaleController.getString("DiscussionGroupHelp2", R.string.DiscussionGroupHelp2));
ChatLinkActivity.java:                            actionCell.setText(LocaleController.getString("DiscussionUnlinkGroup", R.string.DiscussionUnlinkGroup), null, R.drawable.actions_remove_user, false);
ChatLinkActivity.java:                            actionCell.setText(LocaleController.getString("DiscussionCreateGroup", R.string.DiscussionCreateGroup), null, R.drawable.menu_groups, true);
ChatLinkActivity.java:                        actionCell.setText(LocaleController.getString("DiscussionUnlinkChannel", R.string.DiscussionUnlinkChannel), null, R.drawable.actions_remove_user, false);
ChatRightsEditActivity.java:            actionBar.setTitle(LocaleController.getString("EditAdmin", R.string.EditAdmin));
ChatRightsEditActivity.java:            actionBar.setTitle(LocaleController.getString("UserRestrictions", R.string.UserRestrictions));
ChatRightsEditActivity.java:            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
ChatRightsEditActivity.java:                headerCell.setText(LocaleController.getString("UserRestrictionsDuration", R.string.UserRestrictionsDuration));
ChatRightsEditActivity.java:                            text = LocaleController.getString("UserRestrictionsUntilForever", R.string.UserRestrictionsUntilForever);
ChatRightsEditActivity.java:                            text = LocaleController.getString("UserRestrictionsCustom", R.string.UserRestrictionsCustom);
ChatRightsEditActivity.java:                                            dialog13.setButton(DialogInterface.BUTTON_POSITIVE, LocaleController.getString("Set", R.string.Set), dialog13);
ChatRightsEditActivity.java:                                            dialog13.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), (dialog131, which) -> {
ChatRightsEditActivity.java:                                    dialog.setButton(DialogInterface.BUTTON_POSITIVE, LocaleController.getString("Set", R.string.Set), dialog);
ChatRightsEditActivity.java:                                    dialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), (dialog1, which) -> {
ChatRightsEditActivity.java:                    Toast.makeText(getParentActivity(), LocaleController.getString("UserRestrictionsDisabled", R.string.UserRestrictionsDisabled), Toast.LENGTH_SHORT).show();
ChatRightsEditActivity.java:                            builder.setTitle(LocaleController.getString("EditAdminChannelTransfer", R.string.EditAdminChannelTransfer));
ChatRightsEditActivity.java:                            builder.setTitle(LocaleController.getString("EditAdminGroupTransfer", R.string.EditAdminGroupTransfer));
ChatRightsEditActivity.java:                        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("EditAdminTransferReadyAlertText", R.string.EditAdminTransferReadyAlertText, currentChat.title, UserObject.getFirstName(currentUser))));
ChatRightsEditActivity.java:                        builder.setPositiveButton(LocaleController.getString("EditAdminTransferChangeOwner", R.string.EditAdminTransferChangeOwner), (dialogInterface, i) -> {
ChatRightsEditActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatRightsEditActivity.java:                    builder.setTitle(LocaleController.getString("EditAdminTransferAlertTitle", R.string.EditAdminTransferAlertTitle));
ChatRightsEditActivity.java:                        messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("EditChannelAdminTransferAlertText", R.string.EditChannelAdminTransferAlertText, UserObject.getFirstName(currentUser))));
ChatRightsEditActivity.java:                        messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("EditAdminTransferAlertText", R.string.EditAdminTransferAlertText, UserObject.getFirstName(currentUser))));
ChatRightsEditActivity.java:                    messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("EditAdminTransferAlertText1", R.string.EditAdminTransferAlertText1)));
ChatRightsEditActivity.java:                    messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("EditAdminTransferAlertText2", R.string.EditAdminTransferAlertText2)));
ChatRightsEditActivity.java:                        builder.setPositiveButton(LocaleController.getString("EditAdminTransferSetPassword", R.string.EditAdminTransferSetPassword), (dialogInterface, i) -> presentFragment(new TwoStepVerificationSetupActivity(TwoStepVerificationSetupActivity.TYPE_INTRO, null)));
ChatRightsEditActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatRightsEditActivity.java:                        messageTextView.setText(LocaleController.getString("EditAdminTransferAlertText3", R.string.EditAdminTransferAlertText3));
ChatRightsEditActivity.java:                        builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
ChatRightsEditActivity.java:            builder.setTitle(LocaleController.getString("UserRestrictionsApplyChanges", R.string.UserRestrictionsApplyChanges));
ChatRightsEditActivity.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("UserRestrictionsApplyChangesText", R.string.UserRestrictionsApplyChangesText, chat.title)));
ChatRightsEditActivity.java:            builder.setPositiveButton(LocaleController.getString("ApplyTheme", R.string.ApplyTheme), (dialogInterface, i) -> onDonePressed());
ChatRightsEditActivity.java:            builder.setNegativeButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialog, which) -> finishFragment());
ChatRightsEditActivity.java:                        privacyCell.setText(LocaleController.getString("EditAdminCantEdit", R.string.EditAdminCantEdit));
ChatRightsEditActivity.java:                            hint = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
ChatRightsEditActivity.java:                            hint = LocaleController.getString("ChannelAdmin", R.string.ChannelAdmin);
ChatRightsEditActivity.java:                        privacyCell.setText(LocaleController.formatString("EditAdminRankInfo", R.string.EditAdminRankInfo, hint));
ChatRightsEditActivity.java:                            actionCell.setText(LocaleController.getString("EditAdminRemoveAdmin", R.string.EditAdminRemoveAdmin), false);
ChatRightsEditActivity.java:                            actionCell.setText(LocaleController.getString("UserRestrictionsBlock", R.string.UserRestrictionsBlock), false);
ChatRightsEditActivity.java:                            actionCell.setText(LocaleController.getString("EditAdminChannelTransfer", R.string.EditAdminChannelTransfer), false);
ChatRightsEditActivity.java:                            actionCell.setText(LocaleController.getString("EditAdminGroupTransfer", R.string.EditAdminGroupTransfer), false);
ChatRightsEditActivity.java:                            headerCell.setText(LocaleController.getString("EditAdminWhatCanDo", R.string.EditAdminWhatCanDo));
ChatRightsEditActivity.java:                            headerCell.setText(LocaleController.getString("UserRestrictionsCanDo", R.string.UserRestrictionsCanDo));
ChatRightsEditActivity.java:                        headerCell.setText(LocaleController.getString("EditAdminRank", R.string.EditAdminRank));
ChatRightsEditActivity.java:                                checkCell.setTextAndCheck(LocaleController.getString("EditAdminChangeChannelInfo", R.string.EditAdminChangeChannelInfo), adminRights.change_info, true);
ChatRightsEditActivity.java:                                checkCell.setTextAndCheck(LocaleController.getString("EditAdminChangeGroupInfo", R.string.EditAdminChangeGroupInfo), adminRights.change_info, true);
ChatRightsEditActivity.java:                            checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsChangeInfo", R.string.UserRestrictionsChangeInfo), !bannedRights.change_info && !defaultBannedRights.change_info, false);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("EditAdminPostMessages", R.string.EditAdminPostMessages), adminRights.post_messages, true);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("EditAdminEditMessages", R.string.EditAdminEditMessages), adminRights.edit_messages, true);
ChatRightsEditActivity.java:                            checkCell.setTextAndCheck(LocaleController.getString("EditAdminDeleteMessages", R.string.EditAdminDeleteMessages), adminRights.delete_messages, true);
ChatRightsEditActivity.java:                            checkCell.setTextAndCheck(LocaleController.getString("EditAdminGroupDeleteMessages", R.string.EditAdminGroupDeleteMessages), adminRights.delete_messages, true);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("EditAdminAddAdmins", R.string.EditAdminAddAdmins), adminRights.add_admins, anonymousRow != -1);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("EditAdminSendAnonymously", R.string.EditAdminSendAnonymously), adminRights.anonymous, false);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("EditAdminBanUsers", R.string.EditAdminBanUsers), adminRights.ban_users, true);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("StartVoipChatPermission", R.string.StartVoipChatPermission), adminRights.manage_call, true);
ChatRightsEditActivity.java:                                checkCell.setTextAndCheck(LocaleController.getString("EditAdminAddUsers", R.string.EditAdminAddUsers), adminRights.invite_users, true);
ChatRightsEditActivity.java:                                checkCell.setTextAndCheck(LocaleController.getString("EditAdminAddUsersViaLink", R.string.EditAdminAddUsersViaLink), adminRights.invite_users, true);
ChatRightsEditActivity.java:                            checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsInviteUsers", R.string.UserRestrictionsInviteUsers), !bannedRights.invite_users && !defaultBannedRights.invite_users, true);
ChatRightsEditActivity.java:                            checkCell.setTextAndCheck(LocaleController.getString("EditAdminPinMessages", R.string.EditAdminPinMessages), adminRights.pin_messages, true);
ChatRightsEditActivity.java:                            checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsPinMessages", R.string.UserRestrictionsPinMessages), !bannedRights.pin_messages && !defaultBannedRights.pin_messages, true);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsSend", R.string.UserRestrictionsSend), !bannedRights.send_messages && !defaultBannedRights.send_messages, true);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsSendMedia", R.string.UserRestrictionsSendMedia), !bannedRights.send_media && !defaultBannedRights.send_media, true);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsSendStickers", R.string.UserRestrictionsSendStickers), !bannedRights.send_stickers && !defaultBannedRights.send_stickers, true);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsEmbedLinks", R.string.UserRestrictionsEmbedLinks), !bannedRights.embed_links && !defaultBannedRights.embed_links, true);
ChatRightsEditActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsSendPolls", R.string.UserRestrictionsSendPolls), !bannedRights.send_polls && !defaultBannedRights.send_polls, true);
ChatRightsEditActivity.java:                            value = LocaleController.getString("UserRestrictionsUntilForever", R.string.UserRestrictionsUntilForever);
ChatRightsEditActivity.java:                        detailCell.setTextAndValue(LocaleController.getString("UserRestrictionsDuration", R.string.UserRestrictionsDuration), value, false);
ChatRightsEditActivity.java:                        hint = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
ChatRightsEditActivity.java:                        hint = LocaleController.getString("ChannelAdmin", R.string.ChannelAdmin);
ChatUsersActivity.java:                        string = LocaleController.getString("SlowmodeOff", R.string.SlowmodeOff);
ChatUsersActivity.java:                        string = LocaleController.formatString("SlowmodeSeconds", R.string.SlowmodeSeconds, 10);
ChatUsersActivity.java:                        string = LocaleController.formatString("SlowmodeSeconds", R.string.SlowmodeSeconds, 30);
ChatUsersActivity.java:                        string = LocaleController.formatString("SlowmodeMinutes", R.string.SlowmodeMinutes, 1);
ChatUsersActivity.java:                        string = LocaleController.formatString("SlowmodeMinutes", R.string.SlowmodeMinutes, 5);
ChatUsersActivity.java:                        string = LocaleController.formatString("SlowmodeMinutes", R.string.SlowmodeMinutes, 15);
ChatUsersActivity.java:                        string = LocaleController.formatString("SlowmodeHours", R.string.SlowmodeHours, 1);
ChatUsersActivity.java:                        return LocaleController.getString("SlowmodeOff", R.string.SlowmodeOff);
ChatUsersActivity.java:            actionBar.setTitle(LocaleController.getString("ChannelPermissions", R.string.ChannelPermissions));
ChatUsersActivity.java:            actionBar.setTitle(LocaleController.getString("ChannelBlacklist", R.string.ChannelBlacklist));
ChatUsersActivity.java:            actionBar.setTitle(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators));
ChatUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("ChannelSubscribers", R.string.ChannelSubscribers));
ChatUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("ChannelMembers", R.string.ChannelMembers));
ChatUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("ChannelAddAdmin", R.string.ChannelAddAdmin));
ChatUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("ChannelBlockUser", R.string.ChannelBlockUser));
ChatUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("ChannelAddException", R.string.ChannelAddException));
ChatUsersActivity.java:                searchItem.setSearchFieldHint(LocaleController.getString("ChannelSearchException", R.string.ChannelSearchException));
ChatUsersActivity.java:                searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
ChatUsersActivity.java:                doneItem = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
ChatUsersActivity.java:        emptyView.title.setText(LocaleController.getString("NoResult", R.string.NoResult));
ChatUsersActivity.java:        emptyView.subtitle.setText(LocaleController.getString("SearchEmptyViewFilteredSubtitle2", R.string.SearchEmptyViewFilteredSubtitle2));
ChatUsersActivity.java:                            BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("EditCantEditPermissionsPublic", R.string.EditCantEditPermissionsPublic)).show();
ChatUsersActivity.java:                            BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("EditCantEditPermissions", R.string.EditCantEditPermissions)).show();
ChatUsersActivity.java:                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatUsersActivity.java:                            builder.setMessage(LocaleController.formatString("AdminWillBeRemoved", R.string.AdminWillBeRemoved, UserObject.getUserName(user)));
ChatUsersActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> openRightsEdit(user.id, participant, ar, br, rankFinal, canEdit, selectType == 1 ? 0 : 1, false));
ChatUsersActivity.java:                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatUsersActivity.java:                items.add(editingAdmin ? LocaleController.getString("EditAdminRights", R.string.EditAdminRights) : LocaleController.getString("SetAsAdmin", R.string.SetAsAdmin));
ChatUsersActivity.java:                        items.add(LocaleController.getString("ChangePermissions", R.string.ChangePermissions));
ChatUsersActivity.java:                    items.add(LocaleController.getString("KickFromGroup", R.string.KickFromGroup));
ChatUsersActivity.java:                    items.add(LocaleController.getString("ChannelRemoveUser", R.string.ChannelRemoveUser));
ChatUsersActivity.java:                        builder2.setTitle(LocaleController.getString("AppName", R.string.AppName));
ChatUsersActivity.java:                        builder2.setMessage(LocaleController.formatString("AdminWillBeRemoved", R.string.AdminWillBeRemoved, UserObject.getUserName(user)));
ChatUsersActivity.java:                        builder2.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> openRightsEdit2(userId, date, participant, adminRights, bannedRights, rank, canEditAdmin, actions.get(i), false));
ChatUsersActivity.java:                        builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ChatUsersActivity.java:                        LocaleController.getString("ChannelEditPermissions", R.string.ChannelEditPermissions),
ChatUsersActivity.java:                        LocaleController.getString("ChannelDeleteFromList", R.string.ChannelDeleteFromList)};
ChatUsersActivity.java:                        ChatObject.canAddUsers(currentChat) ? (isChannel ? LocaleController.getString("ChannelAddToChannel", R.string.ChannelAddToChannel) : LocaleController.getString("ChannelAddToGroup", R.string.ChannelAddToGroup)) : null,
ChatUsersActivity.java:                        LocaleController.getString("ChannelDeleteFromList", R.string.ChannelDeleteFromList)};
ChatUsersActivity.java:                            LocaleController.getString("EditAdminRights", R.string.EditAdminRights),
ChatUsersActivity.java:                            LocaleController.getString("ChannelRemoveUserAdmin", R.string.ChannelRemoveUserAdmin)};
ChatUsersActivity.java:                            LocaleController.getString("ChannelRemoveUserAdmin", R.string.ChannelRemoveUserAdmin)};
ChatUsersActivity.java:            builder.setTitle(LocaleController.getString("UserRestrictionsApplyChanges", R.string.UserRestrictionsApplyChanges));
ChatUsersActivity.java:                builder.setMessage(LocaleController.getString("ChannelSettingsChangedAlert", R.string.ChannelSettingsChangedAlert));
ChatUsersActivity.java:                builder.setMessage(LocaleController.getString("GroupSettingsChangedAlert", R.string.GroupSettingsChangedAlert));
ChatUsersActivity.java:            builder.setPositiveButton(LocaleController.getString("ApplyTheme", R.string.ApplyTheme), (dialogInterface, i) -> processDone());
ChatUsersActivity.java:            builder.setNegativeButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialog, which) -> finishFragment());
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoRead", R.string.UserRestrictionsNoRead));
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoSend", R.string.UserRestrictionsNoSend));
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoSendMedia", R.string.UserRestrictionsNoSendMedia));
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoSendStickers", R.string.UserRestrictionsNoSendStickers));
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoSendPolls", R.string.UserRestrictionsNoSendPolls));
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoEmbedLinks", R.string.UserRestrictionsNoEmbedLinks));
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoInviteUsers", R.string.UserRestrictionsNoInviteUsers));
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoPinMessages", R.string.UserRestrictionsNoPinMessages));
ChatUsersActivity.java:            builder.append(LocaleController.getString("UserRestrictionsNoChangeInfo", R.string.UserRestrictionsNoChangeInfo));
ChatUsersActivity.java:                            sectionCell.setText(LocaleController.getString("ChannelBlockedUsers", R.string.ChannelBlockedUsers));
ChatUsersActivity.java:                            sectionCell.setText(LocaleController.getString("ChannelRestrictedUsers", R.string.ChannelRestrictedUsers));
ChatUsersActivity.java:                                sectionCell.setText(LocaleController.getString("ChannelSubscribers", R.string.ChannelSubscribers));
ChatUsersActivity.java:                                sectionCell.setText(LocaleController.getString("ChannelMembers", R.string.ChannelMembers));
ChatUsersActivity.java:                        sectionCell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
ChatUsersActivity.java:                        sectionCell.setText(LocaleController.getString("Contacts", R.string.Contacts));
ChatUsersActivity.java:                    textView.setText(LocaleController.getString("NoBlockedUsers", R.string.NoBlockedUsers));
ChatUsersActivity.java:                        textView.setText(LocaleController.getString("NoBlockedChannel2", R.string.NoBlockedChannel2));
ChatUsersActivity.java:                        textView.setText(LocaleController.getString("NoBlockedGroup2", R.string.NoBlockedGroup2));
ChatUsersActivity.java:                                    role = LocaleController.formatString("UserRemovedBy", R.string.UserRemovedBy, UserObject.getUserName(user1));
ChatUsersActivity.java:                                role = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
ChatUsersActivity.java:                                        role = LocaleController.getString("ChannelAdministrator", R.string.ChannelAdministrator);
ChatUsersActivity.java:                                        role = LocaleController.formatString("EditAdminPromotedBy", R.string.EditAdminPromotedBy, UserObject.getUserName(user1));
ChatUsersActivity.java:                                privacyCell.setText(LocaleController.getString("NoBlockedChannel2", R.string.NoBlockedChannel2));
ChatUsersActivity.java:                                privacyCell.setText(LocaleController.getString("NoBlockedGroup2", R.string.NoBlockedGroup2));
ChatUsersActivity.java:                                    privacyCell.setText(LocaleController.getString("ChannelAdminsInfo", R.string.ChannelAdminsInfo));
ChatUsersActivity.java:                                    privacyCell.setText(LocaleController.getString("MegaAdminsInfo", R.string.MegaAdminsInfo));
ChatUsersActivity.java:                                privacyCell.setText(LocaleController.getString("ChannelMembersInfo", R.string.ChannelMembersInfo));
ChatUsersActivity.java:                            privacyCell.setText(LocaleController.getString("SlowmodeInfoOff", R.string.SlowmodeInfoOff));
ChatUsersActivity.java:                            privacyCell.setText(LocaleController.formatString("SlowmodeInfoSelected", R.string.SlowmodeInfoSelected, formatSeconds(seconds)));
ChatUsersActivity.java:                        privacyCell.setText(LocaleController.getString("BroadcastGroupConvertInfo", R.string.BroadcastGroupConvertInfo));
ChatUsersActivity.java:                            actionCell.setText(LocaleController.getString("ChannelAddException", R.string.ChannelAddException), null, R.drawable.actions_addmember2, participantsStartRow != -1);
ChatUsersActivity.java:                            actionCell.setText(LocaleController.getString("ChannelBlockUser", R.string.ChannelBlockUser), null, R.drawable.actions_removed, false);
ChatUsersActivity.java:                            actionCell.setText(LocaleController.getString("ChannelAddAdmin", R.string.ChannelAddAdmin), null, R.drawable.add_admin, showDivider);
ChatUsersActivity.java:                                actionCell.setText(LocaleController.getString("AddSubscriber", R.string.AddSubscriber), null, R.drawable.actions_addmember2, showDivider);
ChatUsersActivity.java:                                actionCell.setText(LocaleController.getString("AddMember", R.string.AddMember), null, R.drawable.actions_addmember2, showDivider);
ChatUsersActivity.java:                        actionCell.setText(LocaleController.getString("EventLog", R.string.EventLog), null, R.drawable.group_log, false);
ChatUsersActivity.java:                        actionCell.setText(LocaleController.getString("ChannelInviteViaLink", R.string.ChannelInviteViaLink), null, R.drawable.profile_link, true);
ChatUsersActivity.java:                        actionCell.setText(LocaleController.getString("BroadcastGroupConvert", R.string.BroadcastGroupConvert), null, R.drawable.msg_channel, false);
ChatUsersActivity.java:                                headerCell.setText(LocaleController.getString("ChannelBlockedUsers", R.string.ChannelBlockedUsers));
ChatUsersActivity.java:                            headerCell.setText(LocaleController.getString("ChannelRestrictedUsers", R.string.ChannelRestrictedUsers));
ChatUsersActivity.java:                        headerCell.setText(LocaleController.getString("ChannelPermissionsHeader", R.string.ChannelPermissionsHeader));
ChatUsersActivity.java:                        headerCell.setText(LocaleController.getString("Slowmode", R.string.Slowmode));
ChatUsersActivity.java:                        headerCell.setText(LocaleController.getString("BroadcastGroup", R.string.BroadcastGroup));
ChatUsersActivity.java:                    settingsCell.setTextAndValue(LocaleController.getString("ChannelBlacklist", R.string.ChannelBlacklist), String.format("%d", info != null ? info.kicked_count : 0), false);
ChatUsersActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsChangeInfo", R.string.UserRestrictionsChangeInfo), !defaultBannedRights.change_info && TextUtils.isEmpty(currentChat.username), false);
ChatUsersActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsInviteUsers", R.string.UserRestrictionsInviteUsers), !defaultBannedRights.invite_users, true);
ChatUsersActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsPinMessages", R.string.UserRestrictionsPinMessages), !defaultBannedRights.pin_messages && TextUtils.isEmpty(currentChat.username), true);
ChatUsersActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsSend", R.string.UserRestrictionsSend), !defaultBannedRights.send_messages, true);
ChatUsersActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsSendMedia", R.string.UserRestrictionsSendMedia), !defaultBannedRights.send_media, true);
ChatUsersActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsSendStickers", R.string.UserRestrictionsSendStickers), !defaultBannedRights.send_stickers, true);
ChatUsersActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsEmbedLinks", R.string.UserRestrictionsEmbedLinks), !defaultBannedRights.embed_links, true);
ChatUsersActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UserRestrictionsSendPolls", R.string.UserRestrictionsSendPolls), !defaultBannedRights.send_polls, true);
ChatUsersActivity.java:                            sectionCell.setText(LocaleController.getString("ChannelOtherSubscribers", R.string.ChannelOtherSubscribers));
ChatUsersActivity.java:                            sectionCell.setText(LocaleController.getString("ChannelOtherMembers", R.string.ChannelOtherMembers));
ChatUsersActivity.java:                        sectionCell.setText(LocaleController.getString("ChannelBots", R.string.ChannelBots));
ChatUsersActivity.java:                            sectionCell.setText(LocaleController.getString("ChannelContacts", R.string.ChannelContacts));
ChatUsersActivity.java:                            sectionCell.setText(LocaleController.getString("GroupContacts", R.string.GroupContacts));
Components/AdminLogFilterAlert.java:        saveButton.setTextAndIcon(LocaleController.getString("Save", R.string.Save).toUpperCase(), 0);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterAll", R.string.EventLogFilterAll), "", currentFilter == null, true);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterNewRestrictions", R.string.EventLogFilterNewRestrictions), "", currentFilter == null || currentFilter.kick && currentFilter.ban && currentFilter.unkick && currentFilter.unban, true);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterNewAdmins", R.string.EventLogFilterNewAdmins), "", currentFilter == null || currentFilter.promote && currentFilter.demote, true);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterNewMembers", R.string.EventLogFilterNewMembers), "", currentFilter == null || currentFilter.invite && currentFilter.join, true);
Components/AdminLogFilterAlert.java:                            cell.setText(LocaleController.getString("EventLogFilterGroupInfo", R.string.EventLogFilterGroupInfo), "", currentFilter == null || currentFilter.info, true);
Components/AdminLogFilterAlert.java:                            cell.setText(LocaleController.getString("EventLogFilterChannelInfo", R.string.EventLogFilterChannelInfo), "", currentFilter == null || currentFilter.info, true);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterDeletedMessages", R.string.EventLogFilterDeletedMessages), "", currentFilter == null || currentFilter.delete, true);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterEditedMessages", R.string.EventLogFilterEditedMessages), "", currentFilter == null || currentFilter.edit, true);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterPinnedMessages", R.string.EventLogFilterPinnedMessages), "", currentFilter == null || currentFilter.pinned, true);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterLeavingMembers", R.string.EventLogFilterLeavingMembers), "", currentFilter == null || currentFilter.leave, callsRow != -1);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterCalls", R.string.EventLogFilterCalls), "", currentFilter == null || currentFilter.group_call, false);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogFilterInvites", R.string.EventLogFilterInvites), "", currentFilter == null || currentFilter.invites, true);
Components/AdminLogFilterAlert.java:                        cell.setText(LocaleController.getString("EventLogAllAdmins", R.string.EventLogAllAdmins), "", selectedAdmins == null, true);
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportErrorUserBlocked", R.string.ImportErrorUserBlocked));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportMutualError", R.string.ImportMutualError));
Components/AlertsCreator.java:                    showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportErrorChatInvalidUser", R.string.ImportErrorChatInvalidUser));
Components/AlertsCreator.java:                    showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportErrorChatInvalidGroup", R.string.ImportErrorChatInvalidGroup));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportErrorNotAdmin", R.string.ImportErrorNotAdmin));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportErrorFileFormatInvalid", R.string.ImportErrorFileFormatInvalid));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportErrorPeerInvalid", R.string.ImportErrorPeerInvalid));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportErrorFileLang", R.string.ImportErrorFileLang));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ImportFailedToUpload", R.string.ImportFailedToUpload));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ImportErrorTitle", R.string.ImportErrorTitle), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
Components/AlertsCreator.java:                showUpdateAppAlert(fragment.getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
Components/AlertsCreator.java:                    showSimpleAlert(fragment, LocaleController.getString("EditMessageError", R.string.EditMessageError));
Components/AlertsCreator.java:                    showSimpleToast(null, LocaleController.getString("EditMessageError", R.string.EditMessageError));
Components/AlertsCreator.java:                    showSimpleToast(fragment, LocaleController.getString("MessageScheduledLimitReached", R.string.MessageScheduledLimitReached));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("JoinToGroupErrorFull", R.string.JoinToGroupErrorFull));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ExpiredLink", R.string.ExpiredLink), LocaleController.getString("InviteExpired", R.string.InviteExpired));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("JoinToGroupErrorNotExist", R.string.JoinToGroupErrorNotExist));
Components/AlertsCreator.java:                Toast.makeText(fragment.getParentActivity(), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text, Toast.LENGTH_SHORT).show();
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("InvalidCode", R.string.InvalidCode));
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("CodeExpired", R.string.CodeExpired));
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("InvalidCode", R.string.InvalidCode));
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("CodeExpired", R.string.CodeExpired));
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
Components/AlertsCreator.java:                return showSimpleAlert(fragment, LocaleController.getString("CancelLinkExpired", R.string.CancelLinkExpired));
Components/AlertsCreator.java:                    return showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
Components/AlertsCreator.java:                    return showSimpleAlert(fragment, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("InvalidCode", R.string.InvalidCode));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("CodeExpired", R.string.CodeExpired));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("InvalidCode", R.string.InvalidCode));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("CodeExpired", R.string.CodeExpired));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.formatString("ChangePhoneNumberOccupied", R.string.ChangePhoneNumberOccupied, args[0]));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
Components/AlertsCreator.java:                    showSimpleAlert(fragment, LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
Components/AlertsCreator.java:                    showSimpleAlert(fragment, LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
Components/AlertsCreator.java:                    showSimpleAlert(fragment, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
Components/AlertsCreator.java:                showSimpleAlert(fragment, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
Components/AlertsCreator.java:                    showSimpleToast(fragment, LocaleController.getString("PaymentPrecheckoutFailed", R.string.PaymentPrecheckoutFailed));
Components/AlertsCreator.java:                    showSimpleToast(fragment, LocaleController.getString("PaymentFailed", R.string.PaymentFailed));
Components/AlertsCreator.java:                    showSimpleToast(fragment, LocaleController.getString("PaymentNoShippingMethod", R.string.PaymentNoShippingMethod));
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/AlertsCreator.java:            builder.setNegativeButton(LocaleController.getString("UpdateApp", R.string.UpdateApp), (dialog, which) -> Browser.openUrl(context, BuildVars.PLAYSTORE_APP_URL));
Components/AlertsCreator.java:            builder.setTitle(LocaleController.getString("Language", R.string.Language));
Components/AlertsCreator.java:            str = LocaleController.formatString("LanguageSame", R.string.LanguageSame, language.name);
Components/AlertsCreator.java:            builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
Components/AlertsCreator.java:            builder.setNeutralButton(LocaleController.getString("SETTINGS", R.string.SETTINGS), (dialog, which) -> activity.presentFragment(new LanguageSelectActivity()));
Components/AlertsCreator.java:                builder.setTitle(LocaleController.getString("LanguageUnknownTitle", R.string.LanguageUnknownTitle));
Components/AlertsCreator.java:                str = LocaleController.formatString("LanguageUnknownCustomAlert", R.string.LanguageUnknownCustomAlert, language.name);
Components/AlertsCreator.java:                builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
Components/AlertsCreator.java:                builder.setTitle(LocaleController.getString("LanguageTitle", R.string.LanguageTitle));
Components/AlertsCreator.java:                    str = LocaleController.formatString("LanguageAlert", R.string.LanguageAlert, language.name, (int) Math.ceil(language.translated_count / (float) language.strings_count * 100));
Components/AlertsCreator.java:                    str = LocaleController.formatString("LanguageCustomAlert", R.string.LanguageCustomAlert, language.name, (int) Math.ceil(language.translated_count / (float) language.strings_count * 100));
Components/AlertsCreator.java:                builder.setPositiveButton(LocaleController.getString("Change", R.string.Change), (dialogInterface, i) -> {
Components/AlertsCreator.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:                    createSimpleAlert(context, chat.title, LocaleController.getString("SlowmodeSendError", R.string.SlowmodeSendError)).show();
Components/AlertsCreator.java:        builder.setTitle(title == null ? LocaleController.getString("AppName", R.string.AppName) : title);
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("BlockUser", R.string.BlockUser));
Components/AlertsCreator.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BlockUserReplyAlert", R.string.BlockUserReplyAlert, UserObject.getFirstName(user))));
Components/AlertsCreator.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BlockUserReplyAlert", R.string.BlockUserReplyAlert, chat.title)));
Components/AlertsCreator.java:        cells[0].setText(LocaleController.getString("DeleteReportSpam", R.string.DeleteReportSpam), "", true, false);
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("BlockAndDeleteReplies", R.string.BlockAndDeleteReplies), (dialogInterface, i) -> {
Components/AlertsCreator.java:                        Toast.makeText(fragment.getParentActivity(), LocaleController.getString("ReportChatSent", R.string.ReportChatSent), Toast.LENGTH_SHORT).show();
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:            builder.setTitle(LocaleController.formatString("BlockUserTitle", R.string.BlockUserTitle, UserObject.getFirstName(currentUser)));
Components/AlertsCreator.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BlockUserAlert", R.string.BlockUserAlert, UserObject.getFirstName(currentUser))));
Components/AlertsCreator.java:            reportText = LocaleController.getString("BlockContact", R.string.BlockContact);
Components/AlertsCreator.java:                    cells[a].setText(LocaleController.getString("DeleteReportSpam", R.string.DeleteReportSpam), "", true, false);
Components/AlertsCreator.java:                    cells[a].setText(LocaleController.formatString("DeleteThisChat", R.string.DeleteThisChat), "", true, false);
Components/AlertsCreator.java:                builder.setTitle(LocaleController.getString("ReportUnrelatedGroup", R.string.ReportUnrelatedGroup));
Components/AlertsCreator.java:                    builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("ReportUnrelatedGroupText", R.string.ReportUnrelatedGroupText, location.address)));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ReportUnrelatedGroupTextNoAddress", R.string.ReportUnrelatedGroupTextNoAddress));
Components/AlertsCreator.java:                builder.setTitle(LocaleController.getString("ReportSpamTitle", R.string.ReportSpamTitle));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ReportSpamAlertChannel", R.string.ReportSpamAlertChannel));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ReportSpamAlertGroup", R.string.ReportSpamAlertGroup));
Components/AlertsCreator.java:            reportText = LocaleController.getString("ReportChat", R.string.ReportChat);
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:                LocaleController.getString("NotificationsTurnOn", R.string.NotificationsTurnOn),
Components/AlertsCreator.java:                LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Hours", 1)),
Components/AlertsCreator.java:                LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Days", 2)),
Components/AlertsCreator.java:                did == 0 && parentFragment instanceof NotificationsCustomSettingsActivity ? null : LocaleController.getString("NotificationsCustomize", R.string.NotificationsCustomize),
Components/AlertsCreator.java:                LocaleController.getString("NotificationsTurnOff", R.string.NotificationsTurnOff)
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("Notifications", R.string.Notifications));
Components/AlertsCreator.java:            arrayList.add(LocaleController.getString("MapPreviewProviderTelegram", R.string.MapPreviewProviderTelegram));
Components/AlertsCreator.java:            arrayList.add(LocaleController.getString("MapPreviewProviderGoogle", R.string.MapPreviewProviderGoogle));
Components/AlertsCreator.java:            arrayList.add(LocaleController.getString("MapPreviewProviderYandex", R.string.MapPreviewProviderYandex));
Components/AlertsCreator.java:        arrayList.add(LocaleController.getString("MapPreviewProviderNobody", R.string.MapPreviewProviderNobody));
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("MapPreviewProviderTitle", R.string.MapPreviewProviderTitle));
Components/AlertsCreator.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:            builder.setTitle(LocaleController.getString("OpenUrlTitle", R.string.OpenUrlTitle));
Components/AlertsCreator.java:            String format = LocaleController.getString("OpenUrlAlert2", R.string.OpenUrlAlert2);
Components/AlertsCreator.java:            builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), (dialogInterface, i) -> Browser.openUrl(fragment.getParentActivity(), url, inlineReturn == 0, tryTelegraph));
Components/AlertsCreator.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        Spannable spanned = new SpannableString(Html.fromHtml(LocaleController.getString("AskAQuestionInfo", R.string.AskAQuestionInfo).replace("\n", "<br>")));
Components/AlertsCreator.java:        builder1.setTitle(LocaleController.getString("AskAQuestion", R.string.AskAQuestion));
Components/AlertsCreator.java:        builder1.setPositiveButton(LocaleController.getString("AskButton", R.string.AskButton), (dialogInterface, i) -> performAskAQuestion(fragment));
Components/AlertsCreator.java:        builder1.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        textView.setText(LocaleController.getString("ImportMessages", R.string.ImportMessages));
Components/AlertsCreator.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("ImportToChatNoTitle", R.string.ImportToChatNoTitle, chat.title)));
Components/AlertsCreator.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("ImportToChat", R.string.ImportToChat, title, chat.title)));
Components/AlertsCreator.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("ImportToUserNoTitle", R.string.ImportToUserNoTitle, ContactsController.formatName(user.first_name, user.last_name))));
Components/AlertsCreator.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("ImportToUser", R.string.ImportToUser, title, ContactsController.formatName(user.first_name, user.last_name))));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Import", R.string.Import), (dialogInterface, i) -> {
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:                textView.setText(LocaleController.getString("ClearHistoryCache", R.string.ClearHistoryCache));
Components/AlertsCreator.java:                textView.setText(LocaleController.getString("ClearHistory", R.string.ClearHistory));
Components/AlertsCreator.java:                        textView.setText(LocaleController.getString("DeleteMegaMenu", R.string.DeleteMegaMenu));
Components/AlertsCreator.java:                        textView.setText(LocaleController.getString("ChannelDeleteMenu", R.string.ChannelDeleteMenu));
Components/AlertsCreator.java:                    textView.setText(LocaleController.getString("DeleteMegaMenu", R.string.DeleteMegaMenu));
Components/AlertsCreator.java:                            textView.setText(LocaleController.getString("LeaveMegaMenu", R.string.LeaveMegaMenu));
Components/AlertsCreator.java:                            textView.setText(LocaleController.getString("LeaveChannelMenu", R.string.LeaveChannelMenu));
Components/AlertsCreator.java:                        textView.setText(LocaleController.getString("LeaveMegaMenu", R.string.LeaveMegaMenu));
Components/AlertsCreator.java:                    textView.setText(LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser));
Components/AlertsCreator.java:                    cell[0].setText(LocaleController.getString("DeleteChannelForAll", R.string.DeleteChannelForAll), "", false, false);
Components/AlertsCreator.java:                    cell[0].setText(LocaleController.getString("DeleteGroupForAll", R.string.DeleteGroupForAll), "", false, false);
Components/AlertsCreator.java:                cell[0].setText(LocaleController.formatString("ClearHistoryOptionAlso", R.string.ClearHistoryOptionAlso, UserObject.getFirstName(user)), "", false, false);
Components/AlertsCreator.java:                cell[0].setText(LocaleController.formatString("DeleteMessagesOptionAlso", R.string.DeleteMessagesOptionAlso, UserObject.getFirstName(user)), "", false, false);
Components/AlertsCreator.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("DeleteAllMessagesSavedAlert", R.string.DeleteAllMessagesSavedAlert)));
Components/AlertsCreator.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("DeleteAllMessagesAlert", R.string.DeleteAllMessagesAlert)));
Components/AlertsCreator.java:                        messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureClearHistoryWithSecretUser", R.string.AreYouSureClearHistoryWithSecretUser, UserObject.getUserName(user))));
Components/AlertsCreator.java:                            messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("AreYouSureClearHistorySavedMessages", R.string.AreYouSureClearHistorySavedMessages)));
Components/AlertsCreator.java:                            messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureClearHistoryWithUser", R.string.AreYouSureClearHistoryWithUser, UserObject.getUserName(user))));
Components/AlertsCreator.java:                        messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureClearHistoryWithChat", R.string.AreYouSureClearHistoryWithChat, chat.title)));
Components/AlertsCreator.java:                        messageTextView.setText(LocaleController.getString("AreYouSureClearHistoryGroup", R.string.AreYouSureClearHistoryGroup));
Components/AlertsCreator.java:                        messageTextView.setText(LocaleController.getString("AreYouSureClearHistoryChannel", R.string.AreYouSureClearHistoryChannel));
Components/AlertsCreator.java:                            messageTextView.setText(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
Components/AlertsCreator.java:                            messageTextView.setText(LocaleController.getString("AreYouSureDeleteAndExitChannel", R.string.AreYouSureDeleteAndExitChannel));
Components/AlertsCreator.java:                        messageTextView.setText(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
Components/AlertsCreator.java:                            messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureDeleteThisChatWithSecretUser", R.string.AreYouSureDeleteThisChatWithSecretUser, UserObject.getUserName(user))));
Components/AlertsCreator.java:                                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("AreYouSureDeleteThisChatSavedMessages", R.string.AreYouSureDeleteThisChatSavedMessages)));
Components/AlertsCreator.java:                                    messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureDeleteThisChatWithBot", R.string.AreYouSureDeleteThisChatWithBot, UserObject.getUserName(user))));
Components/AlertsCreator.java:                                    messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureDeleteThisChatWithUser", R.string.AreYouSureDeleteThisChatWithUser, UserObject.getUserName(user))));
Components/AlertsCreator.java:                            messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("MegaLeaveAlertWithName", R.string.MegaLeaveAlertWithName, chat.title)));
Components/AlertsCreator.java:                            messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("ChannelLeaveAlertWithName", R.string.ChannelLeaveAlertWithName, chat.title)));
Components/AlertsCreator.java:                        messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureDeleteAndExitName", R.string.AreYouSureDeleteAndExitName, chat.title)));
Components/AlertsCreator.java:            actionText = LocaleController.getString("DeleteAll", R.string.DeleteAll);
Components/AlertsCreator.java:                    actionText = LocaleController.getString("ClearHistoryCache", R.string.ClearHistoryCache);
Components/AlertsCreator.java:                    actionText = LocaleController.getString("ClearHistory", R.string.ClearHistory);
Components/AlertsCreator.java:                            actionText = LocaleController.getString("DeleteMega", R.string.DeleteMega);
Components/AlertsCreator.java:                            actionText = LocaleController.getString("ChannelDelete", R.string.ChannelDelete);
Components/AlertsCreator.java:                        actionText = LocaleController.getString("DeleteMega", R.string.DeleteMega);
Components/AlertsCreator.java:                            actionText = LocaleController.getString("LeaveMegaMenu", R.string.LeaveMegaMenu);
Components/AlertsCreator.java:                            actionText = LocaleController.getString("LeaveChannelMenu", R.string.LeaveChannelMenu);
Components/AlertsCreator.java:                        actionText = LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser);
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:            title = LocaleController.getString("VideoCallAlertTitle", R.string.VideoCallAlertTitle);
Components/AlertsCreator.java:            message = LocaleController.formatString("VideoCallAlert", R.string.VideoCallAlert, UserObject.getUserName(user));
Components/AlertsCreator.java:            title = LocaleController.getString("CallAlertTitle", R.string.CallAlertTitle);
Components/AlertsCreator.java:            message = LocaleController.formatString("CallAlert", R.string.CallAlert, UserObject.getUserName(user));
Components/AlertsCreator.java:                .setPositiveButton(LocaleController.getString("Call", R.string.Call), (dialogInterface, i) -> {
Components/AlertsCreator.java:                .setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null)
Components/AlertsCreator.java:            builder.setTitle(LocaleController.formatString("BlockUserTitle", R.string.BlockUserTitle, name));
Components/AlertsCreator.java:            actionText = LocaleController.getString("BlockUser", R.string.BlockUser);
Components/AlertsCreator.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BlockUserMessage", R.string.BlockUserMessage, name)));
Components/AlertsCreator.java:            builder.setTitle(LocaleController.formatString("BlockUserTitle", R.string.BlockUserTitle, LocaleController.formatPluralString("UsersCountTitle", count)));
Components/AlertsCreator.java:            actionText = LocaleController.getString("BlockUsers", R.string.BlockUsers);
Components/AlertsCreator.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BlockUsersMessage", R.string.BlockUsersMessage, LocaleController.formatPluralString("UsersCount", count))));
Components/AlertsCreator.java:                cell[a].setText(LocaleController.getString("ReportSpamTitle", R.string.ReportSpamTitle), "", true, false);
Components/AlertsCreator.java:                cell[a].setText(count == 1 ? LocaleController.getString("DeleteThisChatBothSides", R.string.DeleteThisChatBothSides) : LocaleController.getString("DeleteTheseChatsBothSides", R.string.DeleteTheseChatsBothSides), "", true, false);
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), (dialog, which) -> {
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:            titleView.setText(LocaleController.getString("SetReminder", R.string.SetReminder));
Components/AlertsCreator.java:            titleView.setText(LocaleController.getString("ScheduleMessage", R.string.ScheduleMessage));
Components/AlertsCreator.java:                optionsButton.addSubItem(1, LocaleController.formatString("ScheduleWhenOnline", R.string.ScheduleWhenOnline, name));
Components/AlertsCreator.java:                optionsButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
Components/AlertsCreator.java:                return LocaleController.getString("MessageScheduleToday", R.string.MessageScheduleToday);
Components/AlertsCreator.java:        titleView.setText(LocaleController.getString("ExpireAfter", R.string.ExpireAfter));
Components/AlertsCreator.java:                return LocaleController.getString("MessageScheduleToday", R.string.MessageScheduleToday);
Components/AlertsCreator.java:        buttonTextView.setText(LocaleController.getString("SetTimeLimit", R.string.SetTimeLimit));
Components/AlertsCreator.java:        titleView.setText(LocaleController.getString("ChooseDate", R.string.ChooseDate));
Components/AlertsCreator.java:                    return LocaleController.getString("January", R.string.January);
Components/AlertsCreator.java:                    return LocaleController.getString("February", R.string.February);
Components/AlertsCreator.java:                    return LocaleController.getString("March", R.string.March);
Components/AlertsCreator.java:                    return LocaleController.getString("April", R.string.April);
Components/AlertsCreator.java:                    return LocaleController.getString("May", R.string.May);
Components/AlertsCreator.java:                    return LocaleController.getString("June", R.string.June);
Components/AlertsCreator.java:                    return LocaleController.getString("July", R.string.July);
Components/AlertsCreator.java:                    return LocaleController.getString("August", R.string.August);
Components/AlertsCreator.java:                    return LocaleController.getString("September", R.string.September);
Components/AlertsCreator.java:                    return LocaleController.getString("October", R.string.October);
Components/AlertsCreator.java:                    return LocaleController.getString("November", R.string.November);
Components/AlertsCreator.java:                    return LocaleController.getString("December", R.string.December);
Components/AlertsCreator.java:        buttonTextView.setText(LocaleController.getString("JumpToDate", R.string.JumpToDate));
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("Notifications", R.string.Notifications), true);
Components/AlertsCreator.java:                LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Hours", 1)),
Components/AlertsCreator.java:                LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Hours", 8)),
Components/AlertsCreator.java:                LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Days", 2)),
Components/AlertsCreator.java:                LocaleController.getString("MuteDisable", R.string.MuteDisable)
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("ReportChat", R.string.ReportChat), true);
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatSpam", R.string.ReportChatSpam),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatViolence", R.string.ReportChatViolence),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatChild", R.string.ReportChatChild),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatPornography", R.string.ReportChatPornography),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatOther", R.string.ReportChatOther)
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatSpam", R.string.ReportChatSpam),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatFakeAccount", R.string.ReportChatFakeAccount),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatViolence", R.string.ReportChatViolence),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatChild", R.string.ReportChatChild),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatPornography", R.string.ReportChatPornography),
Components/AlertsCreator.java:                    LocaleController.getString("ReportChatOther", R.string.ReportChatOther)
Components/AlertsCreator.java:        return LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString);
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/AlertsCreator.java:        builder.setMessage(LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/AlertsCreator.java:            builder.setMessage(LocaleController.getString("ErrorSendRestrictedStickers", R.string.ErrorSendRestrictedStickers));
Components/AlertsCreator.java:            builder.setMessage(LocaleController.getString("ErrorSendRestrictedMedia", R.string.ErrorSendRestrictedMedia));
Components/AlertsCreator.java:            builder.setMessage(LocaleController.getString("ErrorSendRestrictedPolls", R.string.ErrorSendRestrictedPolls));
Components/AlertsCreator.java:            builder.setMessage(LocaleController.getString("ErrorSendRestrictedStickersAll", R.string.ErrorSendRestrictedStickersAll));
Components/AlertsCreator.java:            builder.setMessage(LocaleController.getString("ErrorSendRestrictedMediaAll", R.string.ErrorSendRestrictedMediaAll));
Components/AlertsCreator.java:            builder.setMessage(LocaleController.getString("ErrorSendRestrictedPollsAll", R.string.ErrorSendRestrictedPollsAll));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("NobodyLikesSpam2", R.string.NobodyLikesSpam2));
Components/AlertsCreator.java:                builder.setNegativeButton(LocaleController.getString("MoreInfo", R.string.MoreInfo), (dialogInterface, i) -> MessagesController.getInstance(fragment.getCurrentAccount()).openByUserName("spambot", fragment, 1));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ChannelUserCantAdd", R.string.ChannelUserCantAdd));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("GroupUserCantAdd", R.string.GroupUserCantAdd));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ChannelUserAddLimit", R.string.ChannelUserAddLimit));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("GroupUserAddLimit", R.string.GroupUserAddLimit));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ChannelUserLeftError", R.string.ChannelUserLeftError));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("GroupUserLeftError", R.string.GroupUserLeftError));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ChannelUserCantAdmin", R.string.ChannelUserCantAdmin));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("GroupUserCantAdmin", R.string.GroupUserCantAdmin));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ChannelUserCantBot", R.string.ChannelUserCantBot));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("GroupUserCantBot", R.string.GroupUserCantBot));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("InviteToChannelError", R.string.InviteToChannelError));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("InviteToGroupError", R.string.InviteToGroupError));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("CreateGroupError", R.string.CreateGroupError));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("UserRestricted", R.string.UserRestricted));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("YouBlockedUser", R.string.YouBlockedUser));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("AddUserErrorBlacklisted", R.string.AddUserErrorBlacklisted));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("AddAdminErrorBlacklisted", R.string.AddAdminErrorBlacklisted));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("AddAdminErrorNotAMember", R.string.AddAdminErrorNotAMember));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("AddBannedErrorAdmin", R.string.AddBannedErrorAdmin));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("PublicChannelsTooMuch", R.string.PublicChannelsTooMuch));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("LocatedChannelsTooMuch", R.string.LocatedChannelsTooMuch));
Components/AlertsCreator.java:                builder.setTitle(LocaleController.getString("ChannelTooMuchTitle", R.string.ChannelTooMuchTitle));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ChannelTooMuch", R.string.ChannelTooMuch));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("ChannelTooMuchJoin", R.string.ChannelTooMuchJoin));
Components/AlertsCreator.java:                builder.setTitle(LocaleController.getString("ChannelTooMuchTitle", R.string.ChannelTooMuchTitle));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("UserChannelTooMuchJoin", R.string.UserChannelTooMuchJoin));
Components/AlertsCreator.java:                builder.setTitle(LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("VoipGroupInviteAlreadyParticipant", R.string.VoipGroupInviteAlreadyParticipant));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error);
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/AlertsCreator.java:        String[] descriptions = new String[]{LocaleController.getString("ColorRed", R.string.ColorRed),
Components/AlertsCreator.java:                LocaleController.getString("ColorOrange", R.string.ColorOrange),
Components/AlertsCreator.java:                LocaleController.getString("ColorYellow", R.string.ColorYellow),
Components/AlertsCreator.java:                LocaleController.getString("ColorGreen", R.string.ColorGreen),
Components/AlertsCreator.java:                LocaleController.getString("ColorCyan", R.string.ColorCyan),
Components/AlertsCreator.java:                LocaleController.getString("ColorBlue", R.string.ColorBlue),
Components/AlertsCreator.java:                LocaleController.getString("ColorViolet", R.string.ColorViolet),
Components/AlertsCreator.java:                LocaleController.getString("ColorPink", R.string.ColorPink),
Components/AlertsCreator.java:                LocaleController.getString("ColorWhite", R.string.ColorWhite)};
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), (dialogInterface, which) -> {
Components/AlertsCreator.java:        builder.setNeutralButton(LocaleController.getString("LedDisabled", R.string.LedDisabled), (dialog, which) -> {
Components/AlertsCreator.java:            builder.setNegativeButton(LocaleController.getString("Default", R.string.Default), (dialog, which) -> {
Components/AlertsCreator.java:                    LocaleController.getString("VibrationDefault", R.string.VibrationDefault),
Components/AlertsCreator.java:                    LocaleController.getString("Short", R.string.Short),
Components/AlertsCreator.java:                    LocaleController.getString("Long", R.string.Long),
Components/AlertsCreator.java:                    LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled)
Components/AlertsCreator.java:                    LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled),
Components/AlertsCreator.java:                    LocaleController.getString("VibrationDefault", R.string.VibrationDefault),
Components/AlertsCreator.java:                    LocaleController.getString("Short", R.string.Short),
Components/AlertsCreator.java:                    LocaleController.getString("Long", R.string.Long),
Components/AlertsCreator.java:                    LocaleController.getString("OnlyIfSilent", R.string.OnlyIfSilent)
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:                LocaleController.getString("SendLiveLocationFor15m", R.string.SendLiveLocationFor15m),
Components/AlertsCreator.java:                LocaleController.getString("SendLiveLocationFor1h", R.string.SendLiveLocationFor1h),
Components/AlertsCreator.java:                LocaleController.getString("SendLiveLocationFor8h", R.string.SendLiveLocationFor8h),
Components/AlertsCreator.java:            titleTextView.setText(LocaleController.formatString("LiveLocationAlertPrivate", R.string.LiveLocationAlertPrivate, UserObject.getFirstName(user)));
Components/AlertsCreator.java:            titleTextView.setText(LocaleController.getString("LiveLocationAlertGroup", R.string.LiveLocationAlertGroup));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("ShareFile", R.string.ShareFile), (dialog, which) -> {
Components/AlertsCreator.java:        builder.setNeutralButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("PermissionBackgroundLocation", R.string.PermissionBackgroundLocation)));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), ((dialog, which) -> cancelRunnable.run()));
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("GigagroupAlertTitle", R.string.GigagroupAlertTitle));
Components/AlertsCreator.java:        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("GigagroupAlertText", R.string.GigagroupAlertText)));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("GigagroupAlertLearnMore", R.string.GigagroupAlertLearnMore), onProcess);
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), onCancel);
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("PermissionDrawAboveOtherAppsTitle", R.string.PermissionDrawAboveOtherAppsTitle));
Components/AlertsCreator.java:        builder.setMessage(LocaleController.getString("PermissionDrawAboveOtherApps", R.string.PermissionDrawAboveOtherApps));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Enable", R.string.Enable), (dialogInterface, i) -> {
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), onCancel);
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("PermissionDrawAboveOtherAppsGroupCallTitle", R.string.PermissionDrawAboveOtherAppsGroupCallTitle));
Components/AlertsCreator.java:        builder.setMessage(LocaleController.getString("PermissionDrawAboveOtherAppsGroupCall", R.string.PermissionDrawAboveOtherAppsGroupCall));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Enable", R.string.Enable), (dialogInterface, i) -> {
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("ContactsPermissionAlert", R.string.ContactsPermissionAlert)));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("ContactsPermissionAlertContinue", R.string.ContactsPermissionAlertContinue), (dialog, which) -> callback.run(1));
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("ContactsPermissionAlertNotNow", R.string.ContactsPermissionAlertNotNow), (dialog, which) -> callback.run(0));
Components/AlertsCreator.java:                LocaleController.getString("LowDiskSpaceNeverRemove", R.string.LowDiskSpaceNeverRemove)
Components/AlertsCreator.java:        titleTextView.setText(LocaleController.getString("LowDiskSpaceTitle2", R.string.LowDiskSpaceTitle2));
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("LowDiskSpaceTitle", R.string.LowDiskSpaceTitle));
Components/AlertsCreator.java:        builder.setMessage(LocaleController.getString("LowDiskSpaceMessage", R.string.LowDiskSpaceMessage));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> SharedConfig.setKeepMedia(selected[0]));
Components/AlertsCreator.java:        builder.setNeutralButton(LocaleController.getString("ClearMediaCache", R.string.ClearMediaCache), (dialog, which) -> parentActivity.presentFragment(new CacheControlActivity()));
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPrioritySettings", R.string.NotificationsPrioritySettings),
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPriorityLow", R.string.NotificationsPriorityLow),
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPriorityMedium", R.string.NotificationsPriorityMedium),
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh),
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPriorityUrgent", R.string.NotificationsPriorityUrgent)
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPriorityLow", R.string.NotificationsPriorityLow),
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPriorityMedium", R.string.NotificationsPriorityMedium),
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh),
Components/AlertsCreator.java:                    LocaleController.getString("NotificationsPriorityUrgent", R.string.NotificationsPriorityUrgent)
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:                LocaleController.getString("NoPopup", R.string.NoPopup),
Components/AlertsCreator.java:                LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn),
Components/AlertsCreator.java:                LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff),
Components/AlertsCreator.java:                LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup)
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("PopupNotification", R.string.PopupNotification));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
Components/AlertsCreator.java:                return LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), (dialog, which) -> {
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("SelectAccount", R.string.SelectAccount));
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java://        builder.setTitle(month ? LocaleController.getString("PaymentCardExpireDateMonth", R.string.PaymentCardExpireDateMonth) : LocaleController.getString("PaymentCardExpireDateYear", R.string.PaymentCardExpireDateYear));
Components/AlertsCreator.java://        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
Components/AlertsCreator.java:                        cell.setText(LocaleController.getString("DeleteBanUser", R.string.DeleteBanUser), "", false, false);
Components/AlertsCreator.java:                        cell.setText(LocaleController.getString("DeleteReportSpam", R.string.DeleteReportSpam), "", false, false);
Components/AlertsCreator.java:                        cell.setText(LocaleController.formatString("DeleteAllFrom", R.string.DeleteAllFrom, ContactsController.formatName(actionUser.first_name, actionUser.last_name)), "", false, false);
Components/AlertsCreator.java:                    cell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), "", false, false);
Components/AlertsCreator.java:                    cell.setText(LocaleController.getString("DeleteMessagesOption", R.string.DeleteMessagesOption), "", false, false);
Components/AlertsCreator.java:                    cell.setText(LocaleController.formatString("DeleteMessagesOptionAlso", R.string.DeleteMessagesOptionAlso, UserObject.getFirstName(user)), "", false, false);
Components/AlertsCreator.java:                    cell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), "", false, false);
Components/AlertsCreator.java:                    cell.setText(LocaleController.getString("DeleteMessagesOption", R.string.DeleteMessagesOption), "", false, false);
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
Components/AlertsCreator.java:            builder.setTitle(LocaleController.getString("DeleteSingleMessagesTitle", R.string.DeleteSingleMessagesTitle));
Components/AlertsCreator.java:            builder.setTitle(LocaleController.formatString("DeleteMessagesTitle", R.string.DeleteMessagesTitle, LocaleController.formatPluralString("messages", count)));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.formatString("DeleteMessagesTextGroupPart", R.string.DeleteMessagesTextGroupPart, LocaleController.formatPluralString("messages", myMessagesCount)));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("AreYouSureDeleteSingleMessage", R.string.AreYouSureDeleteSingleMessage));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.getString("AreYouSureDeleteFewMessages", R.string.AreYouSureDeleteFewMessages));
Components/AlertsCreator.java:                builder.setMessage(LocaleController.formatString("DeleteMessagesTextGroup", R.string.DeleteMessagesTextGroup, LocaleController.formatPluralString("messages", myMessagesCount)));
Components/AlertsCreator.java:                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("DeleteMessagesText", R.string.DeleteMessagesText, LocaleController.formatPluralString("messages", myMessagesCount), UserObject.getFirstName(user))));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("AreYouSureDeleteSingleMessageMega", R.string.AreYouSureDeleteSingleMessageMega));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("AreYouSureDeleteFewMessagesMega", R.string.AreYouSureDeleteFewMessagesMega));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("AreYouSureDeleteSingleMessage", R.string.AreYouSureDeleteSingleMessage));
Components/AlertsCreator.java:                    builder.setMessage(LocaleController.getString("AreYouSureDeleteFewMessages", R.string.AreYouSureDeleteFewMessages));
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        builder.setTitle(LocaleController.getString("NewTheme", R.string.NewTheme));
Components/AlertsCreator.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/AlertsCreator.java:        builder.setPositiveButton(LocaleController.getString("Create", R.string.Create), (dialog, which) -> {
Components/AlertsCreator.java:            message.setText(AndroidUtilities.replaceTags(LocaleController.getString("EnterThemeNameEdit", R.string.EnterThemeNameEdit)));
Components/AlertsCreator.java:            message.setText(LocaleController.getString("EnterThemeName", R.string.EnterThemeName));
Components/AlertsCreator.java:            Toast.makeText(fragment.getParentActivity(), LocaleController.getString("CreateNewThemeHelp", R.string.CreateNewThemeHelp), Toast.LENGTH_LONG).show();
Components/AudioPlayerAlert.java:        actionBar.setTitle(LocaleController.getString("AttachMusic", R.string.AttachMusic));
Components/AudioPlayerAlert.java:        searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));
Components/AudioPlayerAlert.java:        editText.setHint(LocaleController.getString("Search", R.string.Search));
Components/AudioPlayerAlert.java:                return LocaleController.formatString("AccDescrPlayerDuration", R.string.AccDescrPlayerDuration, time, totalTime);
Components/AudioPlayerAlert.java:        playbackSpeedButton.setContentDescription(LocaleController.getString("AccDescrPlayerSpeed", R.string.AccDescrPlayerSpeed));
Components/AudioPlayerAlert.java:        repeatSongItem = repeatButton.addSubItem(3, R.drawable.player_new_repeatone, LocaleController.getString("RepeatSong", R.string.RepeatSong));
Components/AudioPlayerAlert.java:        repeatListItem = repeatButton.addSubItem(4, R.drawable.player_new_repeatall, LocaleController.getString("RepeatList", R.string.RepeatList));
Components/AudioPlayerAlert.java:        shuffleListItem = repeatButton.addSubItem(2, R.drawable.player_new_shuffle, LocaleController.getString("ShuffleList", R.string.ShuffleList));
Components/AudioPlayerAlert.java:        reverseOrderItem = repeatButton.addSubItem(1, R.drawable.player_new_order, LocaleController.getString("ReverseOrder", R.string.ReverseOrder));
Components/AudioPlayerAlert.java:        prevButton.setContentDescription(LocaleController.getString("AccDescrPrevious", R.string.AccDescrPrevious));
Components/AudioPlayerAlert.java:        nextButton.setContentDescription(LocaleController.getString("Next", R.string.Next));
Components/AudioPlayerAlert.java:        optionsButton.addSubItem(1, R.drawable.msg_forward, LocaleController.getString("Forward", R.string.Forward));
Components/AudioPlayerAlert.java:        optionsButton.addSubItem(2, R.drawable.msg_shareout, LocaleController.getString("ShareFile", R.string.ShareFile));
Components/AudioPlayerAlert.java:        optionsButton.addSubItem(5, R.drawable.msg_download, LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
Components/AudioPlayerAlert.java:        optionsButton.addSubItem(4, R.drawable.msg_message, LocaleController.getString("ShowInChat", R.string.ShowInChat));
Components/AudioPlayerAlert.java:        optionsButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
Components/AudioPlayerAlert.java:        emptyTitleTextView.setText(LocaleController.getString("NoAudioFound", R.string.NoAudioFound));
Components/AudioPlayerAlert.java:                    parentActivity.startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
Components/AudioPlayerAlert.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/AudioPlayerAlert.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/AudioPlayerAlert.java:                    builder.setMessage(LocaleController.getString("PleaseDownload", R.string.PleaseDownload));
Components/AudioPlayerAlert.java:                repeatButton.setContentDescription(LocaleController.getString("AccDescrRepeatOff", R.string.AccDescrRepeatOff));
Components/AudioPlayerAlert.java:                        repeatButton.setContentDescription(LocaleController.getString("ShuffleList", R.string.ShuffleList));
Components/AudioPlayerAlert.java:                        repeatButton.setContentDescription(LocaleController.getString("ReverseOrder", R.string.ReverseOrder));
Components/AudioPlayerAlert.java:                    repeatButton.setContentDescription(LocaleController.getString("AccDescrRepeatList", R.string.AccDescrRepeatList));
Components/AudioPlayerAlert.java:            repeatButton.setContentDescription(LocaleController.getString("AccDescrRepeatOne", R.string.AccDescrRepeatOne));
Components/AudioPlayerAlert.java:                playButton.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
Components/AudioPlayerAlert.java:                playButton.setContentDescription(LocaleController.getString("AccActionPause", R.string.AccActionPause));
Components/AudioPlayerAlert.java:                emptySubtitleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("NoAudioFoundPlayerInfo", R.string.NoAudioFoundPlayerInfo, query)));
Components/BlockingUpdateView.java:        titleTextView.setText(LocaleController.getString("UpdateTelegram", R.string.UpdateTelegram));
Components/BlockingUpdateView.java:            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/BlockingUpdateView.java:            builder.setMessage(LocaleController.getString("ApkRestricted", R.string.ApkRestricted));
Components/BlockingUpdateView.java:            builder.setPositiveButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialogInterface, i) -> {
Components/BlockingUpdateView.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/BlockingUpdateView.java:            acceptTextView.setText(LocaleController.getString("Update", R.string.Update) + String.format(Locale.US, " (%1$s)", AndroidUtilities.formatFileSize(update.document.size)));
Components/BlockingUpdateView.java:            acceptTextView.setText(LocaleController.getString("Update", R.string.Update));
Components/Bulletin.java:                undoTextView.setText(LocaleController.getString("Undo", R.string.Undo));
Components/BulletinFactory.java:        PHOTO("PhotoSavedHint", R.string.PhotoSavedHint, Icon.SAVED_TO_GALLERY),
Components/BulletinFactory.java:        VIDEO("VideoSavedHint", R.string.VideoSavedHint, Icon.SAVED_TO_GALLERY),
Components/BulletinFactory.java:        PHOTO_TO_DOWNLOADS("PhotoSavedToDownloadsHint", R.string.PhotoSavedToDownloadsHint, Icon.SAVED_TO_DOWNLOADS),
Components/BulletinFactory.java:        VIDEO_TO_DOWNLOADS("VideoSavedToDownloadsHint", R.string.VideoSavedToDownloadsHint, Icon.SAVED_TO_DOWNLOADS),
Components/BulletinFactory.java:        AUDIO("AudioSavedHint", R.string.AudioSavedHint, Icon.SAVED_TO_MUSIC),
Components/BulletinFactory.java:        UNKNOWN("FileSavedHint", R.string.FileSavedHint, Icon.SAVED_TO_DOWNLOADS),
Components/BulletinFactory.java:        layout.textView.setText(LocaleController.getString("ReportChatSent", R.string.ReportChatSent));
Components/BulletinFactory.java:            layout.titleTextView.setText(LocaleController.getString("LinkCopied", R.string.LinkCopied));
Components/BulletinFactory.java:            layout.subtitleTextView.setText(LocaleController.getString("LinkCopiedPrivateInfo", R.string.LinkCopiedPrivateInfo));
Components/BulletinFactory.java:            layout.textView.setText(LocaleController.getString("LinkCopied", R.string.LinkCopied));
Components/BulletinFactory.java:                text = LocaleController.formatString("NotificationsMutedForHint", R.string.NotificationsMutedForHint, LocaleController.formatPluralString("Hours", 1));
Components/BulletinFactory.java:                text = LocaleController.formatString("NotificationsMutedForHint", R.string.NotificationsMutedForHint, LocaleController.formatPluralString("Hours", 8));
Components/BulletinFactory.java:                text = LocaleController.formatString("NotificationsMutedForHint", R.string.NotificationsMutedForHint, LocaleController.formatPluralString("Days", 2));
Components/BulletinFactory.java:                text = LocaleController.getString("NotificationsMutedHint", R.string.NotificationsMutedHint);
Components/BulletinFactory.java:                text = LocaleController.getString("NotificationsUnmutedHint", R.string.NotificationsUnmutedHint);
Components/BulletinFactory.java:            layout.titleTextView.setText(LocaleController.getString("PinnedMessagesHidden", R.string.PinnedMessagesHidden));
Components/BulletinFactory.java:            layout.subtitleTextView.setText(LocaleController.getString("PinnedMessagesHiddenInfo", R.string.PinnedMessagesHiddenInfo));
Components/BulletinFactory.java:        layout.textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("UserSetAsAdminHint", R.string.UserSetAsAdminHint, userFirstName)));
Components/BulletinFactory.java:            name = LocaleController.formatString("HiddenName", R.string.HiddenName);
Components/BulletinFactory.java:        layout.textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("UserRemovedFromChatHint", R.string.UserRemovedFromChatHint, name, chatName)));
Components/BulletinFactory.java:            text = LocaleController.getString("UserBlocked", R.string.UserBlocked);
Components/BulletinFactory.java:            text = LocaleController.getString("UserUnblocked", R.string.UserUnblocked);
Components/BulletinFactory.java:        layout.textView.setText(LocaleController.getString(pinned ? "MessagePinnedHint" : "MessageUnpinnedHint", pinned ? R.string.MessagePinnedHint : R.string.MessageUnpinnedHint));
Components/ChatActivityEnterView.java:            tooltipMessage = LocaleController.getString("SlideUpToLock", R.string.SlideUpToLock);
Components/ChatActivityEnterView.java:                    info.setText(LocaleController.getString("Send", R.string.Send));
Components/ChatActivityEnterView.java:                    info.setText(LocaleController.getString("Stop", R.string.Stop));
Components/ChatActivityEnterView.java:            emojiButton[a].setContentDescription(LocaleController.getString("AccDescrEmojiButton", R.string.AccDescrEmojiButton));
Components/ChatActivityEnterView.java:                scheduledButton.setContentDescription(LocaleController.getString("ScheduledMessages", R.string.ScheduledMessages));
Components/ChatActivityEnterView.java:            notifyButton.setContentDescription(silent ? LocaleController.getString("AccDescrChanSilentOn", R.string.AccDescrChanSilentOn) : LocaleController.getString("AccDescrChanSilentOff", R.string.AccDescrChanSilentOff));
Components/ChatActivityEnterView.java:                    notifyButton.setContentDescription(silent ? LocaleController.getString("AccDescrChanSilentOn", R.string.AccDescrChanSilentOn) : LocaleController.getString("AccDescrChanSilentOff", R.string.AccDescrChanSilentOff));
Components/ChatActivityEnterView.java:            attachButton.setContentDescription(LocaleController.getString("AccDescrAttachButton", R.string.AccDescrAttachButton));
Components/ChatActivityEnterView.java:        recordDeleteImageView.setContentDescription(LocaleController.getString("Delete", R.string.Delete));
Components/ChatActivityEnterView.java:        recordedAudioPlayButton.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
Components/ChatActivityEnterView.java:                recordedAudioPlayButton.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
Components/ChatActivityEnterView.java:                recordedAudioPlayButton.setContentDescription(LocaleController.getString("AccActionPause", R.string.AccActionPause));
Components/ChatActivityEnterView.java:        audioSendButton.setContentDescription(LocaleController.getString("AccDescrVoiceMessage", R.string.AccDescrVoiceMessage));
Components/ChatActivityEnterView.java:            videoSendButton.setContentDescription(LocaleController.getString("AccDescrVideoMessage", R.string.AccDescrVideoMessage));
Components/ChatActivityEnterView.java:        cancelBotButton.setContentDescription(LocaleController.getString("Cancel", R.string.Cancel));
Components/ChatActivityEnterView.java:        sendButton.setContentDescription(LocaleController.getString("Send", R.string.Send));
Components/ChatActivityEnterView.java:        expandStickersButton.setContentDescription(LocaleController.getString("AccDescrExpandPanel", R.string.AccDescrExpandPanel));
Components/ChatActivityEnterView.java:        doneButtonImage.setContentDescription(LocaleController.getString("Done", R.string.Done));
Components/ChatActivityEnterView.java:                        cell.setTextAndIcon(LocaleController.getString("SetReminder", R.string.SetReminder), R.drawable.msg_schedule);
Components/ChatActivityEnterView.java:                        cell.setTextAndIcon(LocaleController.getString("ScheduleMessage", R.string.ScheduleMessage), R.drawable.msg_schedule);
Components/ChatActivityEnterView.java:                    cell.setTextAndIcon(LocaleController.getString("SendWithoutSound", R.string.SendWithoutSound), R.drawable.input_notify_off);
Components/ChatActivityEnterView.java:            messageEditText.setHintText(editingCaption ? LocaleController.getString("Caption", R.string.Caption) : LocaleController.getString("TypeMessage", R.string.TypeMessage));
Components/ChatActivityEnterView.java:                messageEditText.setHintText(LocaleController.getString("SendAnonymously", R.string.SendAnonymously));
Components/ChatActivityEnterView.java:                        messageEditText.setHintText(LocaleController.getString("Comment", R.string.Comment));
Components/ChatActivityEnterView.java:                        messageEditText.setHintText(LocaleController.getString("Reply", R.string.Reply));
Components/ChatActivityEnterView.java:                        messageEditText.setHintText(LocaleController.getString("ChannelSilentBroadcast", R.string.ChannelSilentBroadcast), animated);
Components/ChatActivityEnterView.java:                        messageEditText.setHintText(LocaleController.getString("ChannelBroadcast", R.string.ChannelBroadcast), animated);
Components/ChatActivityEnterView.java:                    //messageEditText.setHintText(LocaleController.getString("TypeMessage", R.string.TypeMessage));
Components/ChatActivityEnterView.java:                    AlertsCreator.showSimpleAlert(parentFragment, LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSendErrorTooLong", R.string.SlowmodeSendErrorTooLong));
Components/ChatActivityEnterView.java:                    AlertsCreator.showSimpleAlert(parentFragment, LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSendError", R.string.SlowmodeSendError));
Components/ChatActivityEnterView.java:                    botButton.setContentDescription(LocaleController.getString("AccDescrShowKeyboard", R.string.AccDescrShowKeyboard));
Components/ChatActivityEnterView.java:                    botButton.setContentDescription(LocaleController.getString("AccDescrBotKeyboard", R.string.AccDescrBotKeyboard));
Components/ChatActivityEnterView.java:                botButton.setContentDescription(LocaleController.getString("AccDescrBotCommands", R.string.AccDescrBotCommands));
Components/ChatActivityEnterView.java:            builder.setTitle(LocaleController.getString("ShareYouLocationTitle", R.string.ShareYouLocationTitle));
Components/ChatActivityEnterView.java:            builder.setMessage(LocaleController.getString("ShareYouLocationInfo", R.string.ShareYouLocationInfo));
Components/ChatActivityEnterView.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
Components/ChatActivityEnterView.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/ChatActivityEnterView.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/ChatActivityEnterView.java:                builder.setMessage(LocaleController.getString("ClearRecentEmoji", R.string.ClearRecentEmoji));
Components/ChatActivityEnterView.java:                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), (dialogInterface, i) -> emojiView.clearRecentEmoji());
Components/ChatActivityEnterView.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/ChatActivityEnterView.java:                recordedAudioPlayButton.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
Components/ChatActivityEnterView.java:            expandStickersButton.setContentDescription(LocaleController.getString("AccDescrCollapsePanel", R.string.AccDescrCollapsePanel));
Components/ChatActivityEnterView.java:            expandStickersButton.setContentDescription(LocaleController.getString("AccDescrExpandPanel", R.string.AccDescrExpandPanel));
Components/ChatActivityEnterView.java:            slideToCancelString = LocaleController.getString("SlideToCancel", R.string.SlideToCancel);
Components/ChatActivityEnterView.java:            cancelString = LocaleController.getString("Cancel", R.string.Cancel).toUpperCase();
Components/ChatAttachAlert.java:        selectedMenuItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
Components/ChatAttachAlert.java:        doneItem.setText(LocaleController.getString("Create", R.string.Create).toUpperCase());
Components/ChatAttachAlert.java:        searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));
Components/ChatAttachAlert.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/ChatAttachAlert.java:                builder.setMessage(LocaleController.formatString("ChatHintsDelete", R.string.ChatHintsDelete, ContactsController.formatName(button.currentUser.first_name, button.currentUser.last_name)));
Components/ChatAttachAlert.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> MediaDataController.getInstance(currentAccount).removeInline(button.currentUser.id));
Components/ChatAttachAlert.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/ChatAttachAlert.java:        commentTextView.setHint(LocaleController.getString("AddCaption", R.string.AddCaption));
Components/ChatAttachAlert.java:                        itemCells[a].setTextAndIcon(LocaleController.getString("SetReminder", R.string.SetReminder), R.drawable.msg_schedule);
Components/ChatAttachAlert.java:                        itemCells[a].setTextAndIcon(LocaleController.getString("ScheduleMessage", R.string.ScheduleMessage), R.drawable.msg_schedule);
Components/ChatAttachAlert.java:                    itemCells[a].setTextAndIcon(LocaleController.getString("SendWithoutSound", R.string.SendWithoutSound), R.drawable.input_notify_off);
Components/ChatAttachAlert.java:        AndroidUtilities.makeAccessibilityAnnouncement(LocaleController.getString("AccDescrAttachButton", R.string.AccDescrAttachButton));
Components/ChatAttachAlert.java:                selectedTextView.setText(LocaleController.getString("ChoosePhotoOrVideo", R.string.ChoosePhotoOrVideo));
Components/ChatAttachAlert.java:                selectedTextView.setText(LocaleController.getString("ChoosePhoto", R.string.ChoosePhoto));
Components/ChatAttachAlert.java:                        attachButton.setTextAndIcon(1, LocaleController.getString("ChatGallery", R.string.ChatGallery), Theme.chat_attachButtonDrawables[0], Theme.key_chat_attachGalleryBackground, Theme.key_chat_attachGalleryText);
Components/ChatAttachAlert.java:                        attachButton.setTextAndIcon(4, LocaleController.getString("ChatDocument", R.string.ChatDocument), Theme.chat_attachButtonDrawables[2], Theme.key_chat_attachFileBackground, Theme.key_chat_attachFileText);
Components/ChatAttachAlert.java:                        attachButton.setTextAndIcon(6, LocaleController.getString("ChatLocation", R.string.ChatLocation), Theme.chat_attachButtonDrawables[4], Theme.key_chat_attachLocationBackground, Theme.key_chat_attachLocationText);
Components/ChatAttachAlert.java:                        attachButton.setTextAndIcon(3, LocaleController.getString("AttachMusic", R.string.AttachMusic), Theme.chat_attachButtonDrawables[1], Theme.key_chat_attachAudioBackground, Theme.key_chat_attachAudioText);
Components/ChatAttachAlert.java:                        attachButton.setTextAndIcon(9, LocaleController.getString("Poll", R.string.Poll), Theme.chat_attachButtonDrawables[5], Theme.key_chat_attachPollBackground, Theme.key_chat_attachPollText);
Components/ChatAttachAlert.java:                        attachButton.setTextAndIcon(5, LocaleController.getString("AttachContact", R.string.AttachContact), Theme.chat_attachButtonDrawables[3], Theme.key_chat_attachContactBackground, Theme.key_chat_attachContactText);
Components/ChatAttachAlertAudioLayout.java:        searchField.setHint(LocaleController.getString("SearchMusic", R.string.SearchMusic));
Components/ChatAttachAlertAudioLayout.java:                emptyTitleTextView.setText(LocaleController.getString("NoAudioFound", R.string.NoAudioFound));
Components/ChatAttachAlertAudioLayout.java:                emptyTitleTextView.setText(LocaleController.getString("NoAudioFiles", R.string.NoAudioFiles));
Components/ChatAttachAlertAudioLayout.java:                emptySubtitleTextView.setText(LocaleController.getString("NoAudioFilesInfo", R.string.NoAudioFilesInfo));
Components/ChatAttachAlertAudioLayout.java:        new AlertDialog.Builder(getContext()).setTitle(LocaleController.getString("AppName", R.string.AppName)).setMessage(error).setPositiveButton(LocaleController.getString("OK", R.string.OK), null).show();
Components/ChatAttachAlertAudioLayout.java:                showErrorBox(LocaleController.formatString("PassportUploadMaxReached", R.string.PassportUploadMaxReached, LocaleController.formatPluralString("Files", maxSelectedFiles)));
Components/ChatAttachAlertAudioLayout.java:                    emptySubtitleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("NoAudioFoundInfo", R.string.NoAudioFoundInfo, query)));
Components/ChatAttachAlertContactsLayout.java:                    statusTextView.setText(LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
Components/ChatAttachAlertContactsLayout.java:                        emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
Components/ChatAttachAlertContactsLayout.java:                        emptyView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
Components/ChatAttachAlertContactsLayout.java:        searchField.setHint(LocaleController.getString("SearchFriends", R.string.SearchFriends));
Components/ChatAttachAlertContactsLayout.java:        emptyView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
Components/ChatAttachAlertDocumentLayout.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
Components/ChatAttachAlertDocumentLayout.java:        searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));
Components/ChatAttachAlertDocumentLayout.java:        sortItem.setContentDescription(LocaleController.getString("AccDescrContactSorting", R.string.AccDescrContactSorting));
Components/ChatAttachAlertDocumentLayout.java:                showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
Components/ChatAttachAlertDocumentLayout.java:                showErrorBox(LocaleController.formatString("PassportUploadNotImage", R.string.PassportUploadNotImage));
Components/ChatAttachAlertDocumentLayout.java:                showErrorBox(LocaleController.formatString("FileUploadLimit", R.string.FileUploadLimit, AndroidUtilities.formatFileSize(FileLoader.MAX_FILE_SIZE)));
Components/ChatAttachAlertDocumentLayout.java:                showErrorBox(LocaleController.formatString("PassportUploadMaxReached", R.string.PassportUploadMaxReached, LocaleController.formatPluralString("Files", maxSelectedFiles)));
Components/ChatAttachAlertDocumentLayout.java:        parentAlert.actionBar.setTitle(LocaleController.getString("SelectFile", R.string.SelectFile));
Components/ChatAttachAlertDocumentLayout.java:            emptyTitleTextView.setText(LocaleController.getString("NoFilesFound", R.string.NoFilesFound));
Components/ChatAttachAlertDocumentLayout.java:            emptyTitleTextView.setText(LocaleController.getString("NoFilesFound", R.string.NoFilesFound));
Components/ChatAttachAlertDocumentLayout.java:            emptySubtitleTextView.setText(LocaleController.getString("NoFilesInfo", R.string.NoFilesInfo));
Components/ChatAttachAlertDocumentLayout.java:            searchItem.setSearchFieldHint(LocaleController.getString("SearchRecentFiles", R.string.SearchRecentFiles));
Components/ChatAttachAlertDocumentLayout.java:            searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
Components/ChatAttachAlertDocumentLayout.java:            showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
Components/ChatAttachAlertDocumentLayout.java:            showErrorBox(LocaleController.getString("UnknownError", R.string.UnknownError));
Components/ChatAttachAlertDocumentLayout.java:                item.subtitle = LocaleController.getString("Folder", R.string.Folder);
Components/ChatAttachAlertDocumentLayout.java:                item.subtitle = LocaleController.getString("Folder", R.string.Folder);
Components/ChatAttachAlertDocumentLayout.java:            item.subtitle = LocaleController.getString("Folder", R.string.Folder);
Components/ChatAttachAlertDocumentLayout.java:        new AlertDialog.Builder(getContext()).setTitle(LocaleController.getString("AppName", R.string.AppName)).setMessage(error).setPositiveButton(LocaleController.getString("OK", R.string.OK), null).show();
Components/ChatAttachAlertDocumentLayout.java:                ext.title = LocaleController.getString("SdCard", R.string.SdCard);
Components/ChatAttachAlertDocumentLayout.java:                ext.subtitle = LocaleController.getString("ExternalFolderInfo", R.string.ExternalFolderInfo);
Components/ChatAttachAlertDocumentLayout.java:                ext.title = LocaleController.getString("InternalStorage", R.string.InternalStorage);
Components/ChatAttachAlertDocumentLayout.java:                ext.subtitle = LocaleController.getString("InternalFolderInfo", R.string.InternalFolderInfo);
Components/ChatAttachAlertDocumentLayout.java:                                    item.title = LocaleController.getString("SdCard", R.string.SdCard);
Components/ChatAttachAlertDocumentLayout.java:                                    item.title = LocaleController.getString("ExternalStorage", R.string.ExternalStorage);
Components/ChatAttachAlertDocumentLayout.java:                                item.subtitle = LocaleController.getString("ExternalFolderInfo", R.string.ExternalFolderInfo);
Components/ChatAttachAlertDocumentLayout.java:        fs.subtitle = LocaleController.getString("SystemRoot", R.string.SystemRoot);
Components/ChatAttachAlertDocumentLayout.java:                fs.subtitle = LocaleController.getString("AppFolderInfo", R.string.AppFolderInfo);
Components/ChatAttachAlertDocumentLayout.java:        fs.title = LocaleController.getString("Gallery", R.string.Gallery);
Components/ChatAttachAlertDocumentLayout.java:        fs.subtitle = LocaleController.getString("GalleryInfo", R.string.GalleryInfo);
Components/ChatAttachAlertDocumentLayout.java:            fs.title = LocaleController.getString("AttachMusic", R.string.AttachMusic);
Components/ChatAttachAlertDocumentLayout.java:            fs.subtitle = LocaleController.getString("MusicInfo", R.string.MusicInfo);
Components/ChatAttachAlertDocumentLayout.java:            return LocaleController.formatString("FreeOfTotal", R.string.FreeOfTotal, AndroidUtilities.formatFileSize(free), AndroidUtilities.formatFileSize(total));
Components/ChatAttachAlertDocumentLayout.java:                        headerCell.setText(LocaleController.getString("RecentFilesAZ", R.string.RecentFilesAZ));
Components/ChatAttachAlertDocumentLayout.java:                        headerCell.setText(LocaleController.getString("RecentFiles", R.string.RecentFiles));
Components/ChatAttachAlertDocumentLayout.java:                    emptySubtitleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("NoFilesFoundInfo", R.string.NoFilesFoundInfo, query)));
Components/ChatAttachAlertLocationLayout.java:            addressTextView.setText(LocaleController.getString("TapToSendLocation", R.string.TapToSendLocation));
Components/ChatAttachAlertLocationLayout.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
Components/ChatAttachAlertLocationLayout.java:        searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));
Components/ChatAttachAlertLocationLayout.java:        searchAreaButton.setText(LocaleController.getString("PlacesInThisArea", R.string.PlacesInThisArea));
Components/ChatAttachAlertLocationLayout.java:        mapTypeButton.addSubItem(map_list_menu_map, R.drawable.msg_map, LocaleController.getString("Map", R.string.Map));
Components/ChatAttachAlertLocationLayout.java:        mapTypeButton.addSubItem(map_list_menu_satellite, R.drawable.msg_satellite, LocaleController.getString("Satellite", R.string.Satellite));
Components/ChatAttachAlertLocationLayout.java:        mapTypeButton.addSubItem(map_list_menu_hybrid, R.drawable.msg_hybrid, LocaleController.getString("Hybrid", R.string.Hybrid));
Components/ChatAttachAlertLocationLayout.java:        mapTypeButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
Components/ChatAttachAlertLocationLayout.java:        locationButton.setContentDescription(LocaleController.getString("AccDescrMyLocation", R.string.AccDescrMyLocation));
Components/ChatAttachAlertLocationLayout.java:        emptyTitleTextView.setText(LocaleController.getString("NoPlacesFound", R.string.NoPlacesFound));
Components/ChatAttachAlertLocationLayout.java:                    emptySubtitleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("NoPlacesFoundInfo", R.string.NoPlacesFoundInfo, searchAdapter.getLastSearchString())));
Components/ChatAttachAlertLocationLayout.java:                    builder.setTitle(LocaleController.getString("GpsDisabledAlertTitle", R.string.GpsDisabledAlertTitle));
Components/ChatAttachAlertLocationLayout.java:                    builder.setMessage(LocaleController.getString("GpsDisabledAlertText", R.string.GpsDisabledAlertText));
Components/ChatAttachAlertLocationLayout.java:                    builder.setPositiveButton(LocaleController.getString("ConnectingToProxyEnable", R.string.ConnectingToProxyEnable), (dialog, id) -> {
Components/ChatAttachAlertLocationLayout.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/ChatAttachAlertLocationLayout.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/ChatAttachAlertLocationLayout.java:            builder.setMessage(LocaleController.getString("PermissionNoLocationPosition", R.string.PermissionNoLocationPosition));
Components/ChatAttachAlertLocationLayout.java:            builder.setMessage(LocaleController.getString("PermissionNoLocation", R.string.PermissionNoLocation));
Components/ChatAttachAlertLocationLayout.java:        builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
Components/ChatAttachAlertLocationLayout.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/ChatAttachAlertLocationLayout.java:        parentAlert.actionBar.setTitle(LocaleController.getString("ShareLocation", R.string.ShareLocation));
Components/ChatAttachAlertPhotoLayout.java:        dropDown.setText(LocaleController.getString("ChatGallery", R.string.ChatGallery));
Components/ChatAttachAlertPhotoLayout.java:        parentAlert.selectedMenuItem.addSubItem(group, LocaleController.getString("SendWithoutGrouping", R.string.SendWithoutGrouping));
Components/ChatAttachAlertPhotoLayout.java:        parentAlert.selectedMenuItem.addSubItem(compress, LocaleController.getString("SendWithoutCompression", R.string.SendWithoutCompression));
Components/ChatAttachAlertPhotoLayout.java:        parentAlert.selectedMenuItem.addSubItem(open_in, R.drawable.msg_openin, LocaleController.getString("OpenInExternalApp", R.string.OpenInExternalApp));
Components/ChatAttachAlertPhotoLayout.java:        progressView.setText(LocaleController.getString("NoPhotos", R.string.NoPhotos));
Components/ChatAttachAlertPhotoLayout.java:        shutterButton.setContentDescription(LocaleController.getString("AccDescrShutter", R.string.AccDescrShutter));
Components/ChatAttachAlertPhotoLayout.java:        switchCameraButton.setContentDescription(LocaleController.getString("AccDescrSwitchCamera", R.string.AccDescrSwitchCamera));
Components/ChatAttachAlertPhotoLayout.java:        tooltipTextView.setText(LocaleController.getString("TapForVideo", R.string.TapForVideo));
Components/ChatAttachAlertPhotoLayout.java:                imageView.setContentDescription(LocaleController.getString("AccDescrCameraFlashOff", R.string.AccDescrCameraFlashOff));
Components/ChatAttachAlertPhotoLayout.java:                imageView.setContentDescription(LocaleController.getString("AccDescrCameraFlashOn", R.string.AccDescrCameraFlashOn));
Components/ChatAttachAlertPhotoLayout.java:                imageView.setContentDescription(LocaleController.getString("AccDescrCameraFlashAuto", R.string.AccDescrCameraFlashAuto));
Components/ChatAttachAlertPhotoLayout.java:            cameraView.setContentDescription(LocaleController.getString("AccDescrInstantCamera", R.string.AccDescrInstantCamera));
Components/ChatAttachAlertPhotoLayout.java:                    AlertsCreator.createSimpleAlert(getContext(), LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSendError", R.string.SlowmodeSendError)).show();
Components/ChatAttachAlertPhotoLayout.java:                dropDown.setText(LocaleController.getString("ChatGallery", R.string.ChatGallery));
Components/ChatAttachAlertPhotoLayout.java:                progressView.setText(LocaleController.getString("NoPhotos", R.string.NoPhotos));
Components/ChatAttachAlertPhotoLayout.java:                    progressView.setText(LocaleController.getString("GlobalAttachMediaRestricted", R.string.GlobalAttachMediaRestricted));
Components/ChatAttachAlertPhotoLayout.java:                    progressView.setText(LocaleController.formatString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
Components/ChatAttachAlertPhotoLayout.java:                    progressView.setText(LocaleController.formatString("AttachMediaRestricted", R.string.AttachMediaRestricted, LocaleController.formatDateForBan(chat.banned_rights.until_date)));
Components/ChatAttachAlertPhotoLayout.java:        dropDown.setText(LocaleController.getString("ChatGallery", R.string.ChatGallery));
Components/ChatAttachAlertPhotoLayout.java:                                AlertsCreator.createSimpleAlert(getContext(), LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSelectSendError", R.string.SlowmodeSelectSendError)).show();
Components/ChatAttachAlertPollLayout.java:        hintView.setText(LocaleController.getString("PollTapToSelect", R.string.PollTapToSelect));
Components/ChatAttachAlertPollLayout.java:            parentAlert.actionBar.setTitle(LocaleController.getString("NewQuiz", R.string.NewQuiz));
Components/ChatAttachAlertPollLayout.java:            parentAlert.actionBar.setTitle(LocaleController.getString("NewPoll", R.string.NewPoll));
Components/ChatAttachAlertPollLayout.java:            builder.setTitle(LocaleController.getString("CancelPollAlertTitle", R.string.CancelPollAlertTitle));
Components/ChatAttachAlertPollLayout.java:            builder.setMessage(LocaleController.getString("CancelPollAlertText", R.string.CancelPollAlertText));
Components/ChatAttachAlertPollLayout.java:            builder.setPositiveButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialogInterface, i) -> parentAlert.dismiss());
Components/ChatAttachAlertPollLayout.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/ChatAttachAlertPollLayout.java:                        cell.setText(LocaleController.getString("PollQuestion", R.string.PollQuestion));
Components/ChatAttachAlertPollLayout.java:                                cell.setText(LocaleController.getString("QuizAnswers", R.string.QuizAnswers));
Components/ChatAttachAlertPollLayout.java:                                cell.setText(LocaleController.getString("AnswerOptions", R.string.AnswerOptions));
Components/ChatAttachAlertPollLayout.java:                            cell.setText(LocaleController.getString("Settings", R.string.Settings));
Components/ChatAttachAlertPollLayout.java:                        cell.setText(LocaleController.getString("AddAnExplanationInfo", R.string.AddAnExplanationInfo));
Components/ChatAttachAlertPollLayout.java:                            cell.setText(LocaleController.getString("QuizInfo", R.string.QuizInfo));
Components/ChatAttachAlertPollLayout.java:                        cell.setText(LocaleController.getString("AddAnOptionInfoMax", R.string.AddAnOptionInfoMax));
Components/ChatAttachAlertPollLayout.java:                        cell.setText(LocaleController.formatString("AddAnOptionInfo", R.string.AddAnOptionInfo, LocaleController.formatPluralString("Option", 10 - answersCount)));
Components/ChatAttachAlertPollLayout.java:                    textCell.setTextAndIcon(LocaleController.getString("AddAnOption", R.string.AddAnOption), combinedDrawable, false);
Components/ChatAttachAlertPollLayout.java:                        checkCell.setTextAndCheck(LocaleController.getString("PollAnonymous", R.string.PollAnonymous), anonymousPoll, multipleRow != -1 || quizRow != -1);
Components/ChatAttachAlertPollLayout.java:                        checkCell.setTextAndCheck(LocaleController.getString("PollMultiple", R.string.PollMultiple), multipleChoise, quizRow != -1);
Components/ChatAttachAlertPollLayout.java:                        checkCell.setTextAndCheck(LocaleController.getString("PollQuiz", R.string.PollQuiz), quizPoll, false);
Components/ChatAttachAlertPollLayout.java:                textCell.setTextAndHint(questionString != null ? questionString : "", LocaleController.getString("QuestionHint", R.string.QuestionHint), false);
Components/ChatAttachAlertPollLayout.java:                textCell.setTextAndHint(answers[index], LocaleController.getString("OptionHint", R.string.OptionHint), true);
Components/ChatAttachAlertPollLayout.java:                textCell.setTextAndHint(solutionString != null ? solutionString : "", LocaleController.getString("AddAnExplanation", R.string.AddAnExplanation), false);
Components/ChatAvatarContainer.java:                    info.setText(LocaleController.getString("AccDescrProfilePicture", R.string.AccDescrProfilePicture));
Components/ChatAvatarContainer.java:                        info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_CLICK, LocaleController.getString("Open", R.string.Open)));
Components/ChatAvatarContainer.java:        avatarImageView.setContentDescription(LocaleController.getString("AccDescrProfilePicture", R.string.AccDescrProfilePicture));
Components/ChatAvatarContainer.java:                timeItem.setContentDescription(LocaleController.getString("SetTimer", R.string.SetTimer));
Components/ChatAvatarContainer.java:                timeItem.setContentDescription(LocaleController.getString("AccAutoDeleteTimer", R.string.AccAutoDeleteTimer));
Components/ChatAvatarContainer.java:                                newSubtitle = LocaleController.getString("Loading", R.string.Loading).toLowerCase();
Components/ChatAvatarContainer.java:                                    newSubtitle = LocaleController.getString("MegaLocation", R.string.MegaLocation).toLowerCase();
Components/ChatAvatarContainer.java:                                    newSubtitle = LocaleController.getString("MegaPublic", R.string.MegaPublic).toLowerCase();
Components/ChatAvatarContainer.java:                                    newSubtitle = LocaleController.getString("MegaPrivate", R.string.MegaPrivate).toLowerCase();
Components/ChatAvatarContainer.java:                                newSubtitle = LocaleController.getString("ChannelPublic", R.string.ChannelPublic).toLowerCase();
Components/ChatAvatarContainer.java:                                newSubtitle = LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate).toLowerCase();
Components/ChatAvatarContainer.java:                        newSubtitle = LocaleController.getString("YouWereKicked", R.string.YouWereKicked);
Components/ChatAvatarContainer.java:                        newSubtitle = LocaleController.getString("YouLeft", R.string.YouLeft);
Components/ChatAvatarContainer.java:                    newStatus = LocaleController.getString("ChatYourSelf", R.string.ChatYourSelf);
Components/ChatAvatarContainer.java:                    newStatus = LocaleController.getString("ServiceNotifications", R.string.ServiceNotifications);
Components/ChatAvatarContainer.java:                    newStatus = LocaleController.getString("SupportStatus", R.string.SupportStatus);
Components/ChatAvatarContainer.java:                    newStatus = LocaleController.getString("Bot", R.string.Bot);
Components/ChatAvatarContainer.java:            title = LocaleController.getString("WaitingForNetwork", R.string.WaitingForNetwork);
Components/ChatAvatarContainer.java:            title = LocaleController.getString("Connecting", R.string.Connecting);
Components/ChatAvatarContainer.java:            title = LocaleController.getString("Updating", R.string.Updating);
Components/ChatAvatarContainer.java:            title = LocaleController.getString("ConnectingToProxy", R.string.ConnectingToProxy);
Components/ChatAvatarContainer.java:            info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_CLICK, LocaleController.getString("OpenProfile", R.string.OpenProfile)));
Components/ChatBigEmptyView.java:            textView.setText(LocaleController.getString("EncryptedDescriptionTitle", R.string.EncryptedDescriptionTitle));
Components/ChatBigEmptyView.java:            textView.setText(LocaleController.getString("GroupEmptyTitle2", R.string.GroupEmptyTitle2));
Components/ChatBigEmptyView.java:            textView.setText(LocaleController.getString("ChatYourSelfTitle", R.string.ChatYourSelfTitle));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("EncryptedDescription1", R.string.EncryptedDescription1));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("ChatYourSelfDescription1", R.string.ChatYourSelfDescription1));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("GroupDescription1", R.string.GroupDescription1));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("EncryptedDescription2", R.string.EncryptedDescription2));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("ChatYourSelfDescription2", R.string.ChatYourSelfDescription2));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("GroupDescription2", R.string.GroupDescription2));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("EncryptedDescription3", R.string.EncryptedDescription3));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("ChatYourSelfDescription3", R.string.ChatYourSelfDescription3));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("GroupDescription3", R.string.GroupDescription3));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("EncryptedDescription4", R.string.EncryptedDescription4));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("ChatYourSelfDescription4", R.string.ChatYourSelfDescription4));
Components/ChatBigEmptyView.java:                        textView.setText(LocaleController.getString("GroupDescription4", R.string.GroupDescription4));
Components/ChatGreetingsView.java:            titleView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
Components/ChatGreetingsView.java:            descriptionView.setText(LocaleController.getString("NoMessagesGreetingsDescription", R.string.NoMessagesGreetingsDescription));
Components/ChatGreetingsView.java:            titleView.setText(LocaleController.formatString("NearbyPeopleGreetingsMessage", R.string.NearbyPeopleGreetingsMessage, user.first_name, LocaleController.formatDistance(distance, 1)));
Components/ChatGreetingsView.java:            descriptionView.setText(LocaleController.getString("NearbyPeopleGreetingsDescription", R.string.NearbyPeopleGreetingsDescription));
Components/ChecksHintView.java:                textView[a].setText(LocaleController.getString("HintSent", R.string.HintSent));
Components/ChecksHintView.java:                textView[a].setText(LocaleController.getString("HintRead", R.string.HintRead));
Components/ClearHistoryAlert.java:            textView.setText(LocaleController.getString("ClearHistory", R.string.ClearHistory));
Components/ClearHistoryAlert.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureClearHistoryWithUser", R.string.AreYouSureClearHistoryWithUser, UserObject.getUserName(user))));
Components/ClearHistoryAlert.java:                    messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureClearHistoryWithChat", R.string.AreYouSureClearHistoryWithChat, chat.title)));
Components/ClearHistoryAlert.java:                    messageTextView.setText(LocaleController.getString("AreYouSureClearHistoryGroup", R.string.AreYouSureClearHistoryGroup));
Components/ClearHistoryAlert.java:                    messageTextView.setText(LocaleController.getString("AreYouSureClearHistoryChannel", R.string.AreYouSureClearHistoryChannel));
Components/ClearHistoryAlert.java:                cell.setText(LocaleController.formatString("ClearHistoryOptionAlso", R.string.ClearHistoryOptionAlso, UserObject.getFirstName(user)), "", false, false);
Components/ClearHistoryAlert.java:            clearButton.setText(LocaleController.getString("AlertClearHistory", R.string.AlertClearHistory));
Components/ClearHistoryAlert.java:            headerCell.setText(LocaleController.getString("AutoDeleteHeader", R.string.AutoDeleteHeader));
Components/ClearHistoryAlert.java:            percentTextView.setText(LocaleController.getString("AutoDeleteAlertTitle", R.string.AutoDeleteAlertTitle));
Components/ClearHistoryAlert.java:                infoTextView.setText(LocaleController.formatString("AutoDeleteAlertUserInfo", R.string.AutoDeleteAlertUserInfo, UserObject.getFirstName(user)));
Components/ClearHistoryAlert.java:                    infoTextView.setText(LocaleController.getString("AutoDeleteAlertChannelInfo", R.string.AutoDeleteAlertChannelInfo));
Components/ClearHistoryAlert.java:                    infoTextView.setText(LocaleController.getString("AutoDeleteAlertGroupInfo", R.string.AutoDeleteAlertGroupInfo));
Components/ClearHistoryAlert.java:                LocaleController.getString("AutoDeleteNever", R.string.AutoDeleteNever),
Components/ClearHistoryAlert.java:                LocaleController.getString("AutoDelete24Hours", R.string.AutoDelete24Hours),
Components/ClearHistoryAlert.java:                LocaleController.getString("AutoDelete7Days", R.string.AutoDelete7Days)
Components/ClearHistoryAlert.java:        infoCell.setText(LocaleController.getString("AutoDeleteInfo", R.string.AutoDeleteInfo));
Components/ClearHistoryAlert.java:            setTimerButton.setText(LocaleController.getString("AutoDeleteSet", R.string.AutoDeleteSet));
Components/ClearHistoryAlert.java:            setTimerButton.setText(LocaleController.getString("EnableAutoDelete", R.string.EnableAutoDelete));
Components/ClearHistoryAlert.java:            setTimerButton.setText(LocaleController.getString("AutoDeleteConfirm", R.string.AutoDeleteConfirm));
Components/ColorPicker.java:        clearButton.setContentDescription(LocaleController.getString("ClearButton", R.string.ClearButton));
Components/ColorPicker.java:            menuItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
Components/ColorPicker.java:            menuItem.addSubItem(item_edit, R.drawable.msg_edit, LocaleController.getString("OpenInEditor", R.string.OpenInEditor));
Components/ColorPicker.java:            menuItem.addSubItem(item_share, R.drawable.msg_share, LocaleController.getString("ShareTheme", R.string.ShareTheme));
Components/ColorPicker.java:            menuItem.addSubItem(item_delete, R.drawable.msg_delete, LocaleController.getString("DeleteTheme", R.string.DeleteTheme));
Components/ColorPicker.java:        resetButton.setText(resetType == 1 ? LocaleController.getString("ColorPickerResetAll", R.string.ColorPickerResetAll) : LocaleController.getString("ColorPickerReset", R.string.ColorPickerReset));
Components/ContactsEmptyView.java:        titleTextView.setText(LocaleController.getString("NoContactsYet", R.string.NoContactsYet));
Components/ContactsEmptyView.java:                    textView.setText(LocaleController.getString("NoContactsYetLine1", R.string.NoContactsYetLine1));
Components/ContactsEmptyView.java:                    textView.setText(LocaleController.getString("NoContactsYetLine2", R.string.NoContactsYetLine2));
Components/ContactsEmptyView.java:                    textView.setText(LocaleController.getString("NoContactsYetLine3", R.string.NoContactsYetLine3));
Components/Crop/CropRotationWheel.java:        mirrorButton.setContentDescription(LocaleController.getString("AccDescrMirror", R.string.AccDescrMirror));
Components/Crop/CropRotationWheel.java:        aspectRatioButton.setContentDescription(LocaleController.getString("AccDescrAspectRatio", R.string.AccDescrAspectRatio));
Components/Crop/CropRotationWheel.java:        rotation90Button.setContentDescription(LocaleController.getString("AccDescrRotate", R.string.AccDescrRotate));
Components/Crop/CropView.java:        actions[0] = LocaleController.getString("CropOriginal", R.string.CropOriginal);
Components/Crop/CropView.java:        actions[1] = LocaleController.getString("CropSquare", R.string.CropSquare);
Components/EditTextCaption.java:        builder.setTitle(LocaleController.getString("CreateLink", R.string.CreateLink));
Components/EditTextCaption.java:        editText.setHintText(LocaleController.getString("URL", R.string.URL));
Components/EditTextCaption.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
Components/EditTextCaption.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/EditTextCaption.java:            infoCompat.addAction(new AccessibilityNodeInfoCompat.AccessibilityActionCompat(R.id.menu_bold, LocaleController.getString("Bold", R.string.Bold)));
Components/EditTextCaption.java:            infoCompat.addAction(new AccessibilityNodeInfoCompat.AccessibilityActionCompat(R.id.menu_italic, LocaleController.getString("Italic", R.string.Italic)));
Components/EditTextCaption.java:            infoCompat.addAction(new AccessibilityNodeInfoCompat.AccessibilityActionCompat(R.id.menu_mono, LocaleController.getString("Mono", R.string.Mono)));
Components/EditTextCaption.java:            infoCompat.addAction(new AccessibilityNodeInfoCompat.AccessibilityActionCompat(R.id.menu_strike, LocaleController.getString("Strike", R.string.Strike)));
Components/EditTextCaption.java:            infoCompat.addAction(new AccessibilityNodeInfoCompat.AccessibilityActionCompat(R.id.menu_underline, LocaleController.getString("Underline", R.string.Underline)));
Components/EditTextCaption.java:            infoCompat.addAction(new AccessibilityNodeInfoCompat.AccessibilityActionCompat(R.id.menu_link, LocaleController.getString("CreateLink", R.string.CreateLink)));
Components/EditTextCaption.java:            infoCompat.addAction(new AccessibilityNodeInfoCompat.AccessibilityActionCompat(R.id.menu_regular, LocaleController.getString("Regular", R.string.Regular)));
Components/EditTextEmoji.java:        emojiButton.setContentDescription(LocaleController.getString("Emoji", R.string.Emoji));
Components/EditTextEmoji.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/EditTextEmoji.java:                builder.setMessage(LocaleController.getString("ClearRecentEmoji", R.string.ClearRecentEmoji));
Components/EditTextEmoji.java:                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), (dialogInterface, i) -> emojiView.clearRecentEmoji());
Components/EditTextEmoji.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/EmbedBottomSheet.java:        textView.setText(LocaleController.getString("Close", R.string.Close).toUpperCase());
Components/EmbedBottomSheet.java:        pipButton.setContentDescription(LocaleController.getString("AccDescrPipMode", R.string.AccDescrPipMode));
Components/EmbedBottomSheet.java:        copyButton.setContentDescription(LocaleController.getString("CopyLink", R.string.CopyLink));
Components/EmbedBottomSheet.java:        copyTextButton.setText(LocaleController.getString("Copy", R.string.Copy).toUpperCase());
Components/EmbedBottomSheet.java:        openInButton.setText(LocaleController.getString("OpenInBrowser", R.string.OpenInBrowser).toUpperCase());
Components/EmojiView.java:                searchEditText.setHint(LocaleController.getString("SearchStickersHint", R.string.SearchStickersHint));
Components/EmojiView.java:                searchEditText.setHint(LocaleController.getString("SearchEmojiHint", R.string.SearchEmojiHint));
Components/EmojiView.java:                searchEditText.setHint(LocaleController.getString("SearchGifsTitle", R.string.SearchGifsTitle));
Components/EmojiView.java:                LocaleController.getString("Emoji1", R.string.Emoji1),
Components/EmojiView.java:                LocaleController.getString("Emoji2", R.string.Emoji2),
Components/EmojiView.java:                LocaleController.getString("Emoji3", R.string.Emoji3),
Components/EmojiView.java:                LocaleController.getString("Emoji4", R.string.Emoji4),
Components/EmojiView.java:                LocaleController.getString("Emoji5", R.string.Emoji5),
Components/EmojiView.java:                LocaleController.getString("Emoji6", R.string.Emoji6),
Components/EmojiView.java:                LocaleController.getString("Emoji7", R.string.Emoji7),
Components/EmojiView.java:                LocaleController.getString("Emoji8", R.string.Emoji8)
Components/EmojiView.java:        backspaceButton.setContentDescription(LocaleController.getString("AccDescrBackspace", R.string.AccDescrBackspace));
Components/EmojiView.java:            stickerSettingsButton.setContentDescription(LocaleController.getString("Settings", R.string.Settings));
Components/EmojiView.java:            searchButton.setContentDescription(LocaleController.getString("Search", R.string.Search));
Components/EmojiView.java:            backspaceButton.setContentDescription(LocaleController.getString("AccDescrBackspace", R.string.AccDescrBackspace));
Components/EmojiView.java:                LocaleController.getString("RecentStickers", R.string.RecentStickers),
Components/EmojiView.java:                LocaleController.getString("Emoji1", R.string.Emoji1),
Components/EmojiView.java:                LocaleController.getString("Emoji2", R.string.Emoji2),
Components/EmojiView.java:                LocaleController.getString("Emoji3", R.string.Emoji3),
Components/EmojiView.java:                LocaleController.getString("Emoji4", R.string.Emoji4),
Components/EmojiView.java:                LocaleController.getString("Emoji5", R.string.Emoji5),
Components/EmojiView.java:                LocaleController.getString("Emoji6", R.string.Emoji6),
Components/EmojiView.java:                LocaleController.getString("Emoji7", R.string.Emoji7),
Components/EmojiView.java:                LocaleController.getString("Emoji8", R.string.Emoji8),
Components/EmojiView.java:            trendingStickersTabView.setContentDescription(LocaleController.getString("FeaturedStickers", R.string.FeaturedStickers));
Components/EmojiView.java:            stickersTab.addIconTab(1, stickerIcons[1]).setContentDescription(LocaleController.getString("FavoriteStickers", R.string.FavoriteStickers));
Components/EmojiView.java:            stickersTab.addIconTab(0, stickerIcons[0]).setContentDescription(LocaleController.getString("RecentStickers", R.string.RecentStickers));
Components/EmojiView.java:                stickersTab.addStickerTab(thumb, svgThumb, document, stickerSet).setContentDescription(stickerSet.set.title + ", " + LocaleController.getString("AccDescrStickerSet", R.string.AccDescrStickerSet));
Components/EmojiView.java:            gifTabs.addIconTab(0, gifIcons[0]).setContentDescription(LocaleController.getString("RecentStickers", R.string.RecentStickers));
Components/EmojiView.java:        gifTabs.addIconTab(1, gifIcons[1]).setContentDescription(LocaleController.getString("FeaturedGifs", R.string.FeaturedGifs));
Components/EmojiView.java:                mediaBanTooltip.setText(LocaleController.getString("GlobalAttachGifRestricted", R.string.GlobalAttachGifRestricted));
Components/EmojiView.java:                mediaBanTooltip.setText(LocaleController.getString("GlobalAttachStickersRestricted", R.string.GlobalAttachStickersRestricted));
Components/EmojiView.java:                    mediaBanTooltip.setText(LocaleController.getString("AttachGifRestrictedForever", R.string.AttachGifRestrictedForever));
Components/EmojiView.java:                    mediaBanTooltip.setText(LocaleController.getString("AttachStickersRestrictedForever", R.string.AttachStickersRestrictedForever));
Components/EmojiView.java:                    mediaBanTooltip.setText(LocaleController.formatString("AttachGifRestricted", R.string.AttachGifRestricted, LocaleController.formatDateForBan(chat.banned_rights.until_date)));
Components/EmojiView.java:                    mediaBanTooltip.setText(LocaleController.formatString("AttachStickersRestricted", R.string.AttachStickersRestricted, LocaleController.formatDateForBan(chat.banned_rights.until_date)));
Components/EmojiView.java:                        cell.setText(LocaleController.formatString("CurrentGroupStickers", R.string.CurrentGroupStickers, chat != null ? chat.title : "Group Stickers"), icon);
Components/EmojiView.java:                            cell.setText(LocaleController.getString("RecentStickers", R.string.RecentStickers), 0);
Components/EmojiView.java:                            cell.setText(LocaleController.getString("FavoriteStickers", R.string.FavoriteStickers), 0);
Components/EmojiView.java:                    textView.setText(LocaleController.getString("NoEmojiFound", R.string.NoEmojiFound));
Components/EmojiView.java:                            textView.setText(LocaleController.getString("EmojiSuggestions", R.string.EmojiSuggestions));
Components/EmojiView.java:                            textView.setText(AndroidUtilities.replaceTags(LocaleController.getString("EmojiSuggestionsInfo", R.string.EmojiSuggestionsInfo)));
Components/EmojiView.java:                            textView.setText(LocaleController.formatString("EmojiSuggestionsUrl", R.string.EmojiSuggestionsUrl, lastSearchAlias != null ? lastSearchAlias : lastSearchKeyboardLanguage));
Components/EmojiView.java:                    return LocaleController.getString("Emoji", R.string.Emoji);
Components/EmojiView.java:                    return LocaleController.getString("AccDescrGIFs", R.string.AccDescrGIFs);
Components/EmojiView.java:                    return LocaleController.getString("AccDescrStickers", R.string.AccDescrStickers);
Components/EmojiView.java:                    cell1.setText(LocaleController.getString("FeaturedGifs", R.string.FeaturedGifs), 0);
Components/EmojiView.java:            textView.setText(LocaleController.getString("NoGIFsFound", R.string.NoGIFsFound));
Components/EmojiView.java:                    textView.setText(LocaleController.getString("NoStickersFound", R.string.NoStickersFound));
Components/EmptyTextProgressView.java:        textView.setText(LocaleController.getString("NoResult", R.string.NoResult));
Components/FiltersListBottomSheet.java:        titleTextView.setText(LocaleController.getString("FilterChoose", R.string.FilterChoose));
Components/FiltersListBottomSheet.java:                cell.setTextAndIcon(LocaleController.getString("CreateNewFilter", R.string.CreateNewFilter), combinedDrawable);
Components/FilterTabsView.java:                info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_LONG_CLICK, LocaleController.getString("AccDescrOpenMenu2", R.string.AccDescrOpenMenu2)));
Components/FilterTabsView.java:            firstTab.setTitle(LocaleController.getString("FilterAllChats", R.string.FilterAllChats));
Components/FilterTabsView.java:            firstTab.setTitle(allTabsWidth > width ? LocaleController.getString("FilterAllChatsShort", R.string.FilterAllChatsShort) : LocaleController.getString("FilterAllChats", R.string.FilterAllChats));
Components/FilterTabsView.java:                tabs.get(0).setTitle(LocaleController.getString("FilterAllChats", R.string.FilterAllChats));
Components/FilterTabsView.java:            tabs.get(0).setTitle(LocaleController.getString("FilterAllChats", R.string.FilterAllChats));
Components/FragmentContextView.java:        joinButton.setText(LocaleController.getString("VoipChatJoin", R.string.VoipChatJoin));
Components/FragmentContextView.java:            playbackSpeedButton.setContentDescription(LocaleController.getString("AccDescrPlayerSpeed", R.string.AccDescrPlayerSpeed));
Components/FragmentContextView.java:                info.setText(isMuted ? LocaleController.getString("VoipUnmute", R.string.VoipUnmute) : LocaleController.getString("VoipMute", R.string.VoipMute));
Components/FragmentContextView.java:                builder.setTitle(LocaleController.getString("StopLiveLocationAlertToTitle", R.string.StopLiveLocationAlertToTitle));
Components/FragmentContextView.java:                    builder.setMessage(LocaleController.getString("StopLiveLocationAlertAllText", R.string.StopLiveLocationAlertAllText));
Components/FragmentContextView.java:                        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("StopLiveLocationAlertToGroupText", R.string.StopLiveLocationAlertToGroupText, chat.title)));
Components/FragmentContextView.java:                        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("StopLiveLocationAlertToUserText", R.string.StopLiveLocationAlertToUserText, UserObject.getFirstName(user))));
Components/FragmentContextView.java:                        builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
Components/FragmentContextView.java:                builder.setPositiveButton(LocaleController.getString("Stop", R.string.Stop), (dialogInterface, i) -> {
Components/FragmentContextView.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/FragmentContextView.java:            closeButton.setContentDescription(LocaleController.getString("AccDescrClosePlayer", R.string.AccDescrClosePlayer));
Components/FragmentContextView.java:                closeButton.setContentDescription(LocaleController.getString("AccDescrClosePlayer", R.string.AccDescrClosePlayer));
Components/FragmentContextView.java:                closeButton.setContentDescription(LocaleController.getString("AccDescrStopLiveLocation", R.string.AccDescrStopLiveLocation));
Components/FragmentContextView.java:            titleTextView.setText(LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat), false);
Components/FragmentContextView.java:                        subtitleTextView.setText(LocaleController.getString("MembersTalkingNobody", R.string.MembersTalkingNobody), false);
Components/FragmentContextView.java:                String liveLocation = LocaleController.getString("LiveLocationContext", R.string.LiveLocationContext);
Components/FragmentContextView.java:                        str = LocaleController.getString("AttachLiveLocationIsSharing", R.string.AttachLiveLocationIsSharing);
Components/FragmentContextView.java:                        str = LocaleController.getString("AttachLiveLocationIsSharingChat", R.string.AttachLiveLocationIsSharingChat);
Components/FragmentContextView.java:                    str = LocaleController.getString("AttachLiveLocationIsSharingChats", R.string.AttachLiveLocationIsSharingChats);
Components/FragmentContextView.java:        String liveLocation = LocaleController.getString("LiveLocationContext", R.string.LiveLocationContext);
Components/FragmentContextView.java:                        fullString = String.format("%1$s - %2$s", liveLocation, LocaleController.formatString("SharingYouAndOtherName", R.string.SharingYouAndOtherName, UserObject.getFirstName(notYouUser)));
Components/FragmentContextView.java:                        fullString = String.format("%1$s - %2$s %3$s", liveLocation, LocaleController.getString("ChatYourSelfName", R.string.ChatYourSelfName), LocaleController.formatPluralString("AndOther", otherSharingCount));
Components/FragmentContextView.java:                    fullString = String.format("%1$s - %2$s", liveLocation, LocaleController.getString("ChatYourSelfName", R.string.ChatYourSelfName));
Components/FragmentContextView.java:                playButton.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
Components/FragmentContextView.java:                playButton.setContentDescription(LocaleController.getString("AccActionPause", R.string.AccActionPause));
Components/FragmentContextView.java:                titleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("ImportUploading", R.string.ImportUploading, importingHistory.uploadProgress)), false);
Components/FragmentContextView.java:                    subtitleTextView.setText(LocaleController.getString("MembersTalkingNobody", R.string.MembersTalkingNobody), false);
Components/FragmentContextView.java:                titleTextView.setText(LocaleController.getString("VoipGroupConnecting", R.string. VoipGroupConnecting), false);
Components/FragmentContextView.java:                        titleTextView.setText(LocaleController.getString("VoipGroupViewVoiceChat", R.string.VoipGroupViewVoiceChat), false);
Components/FragmentContextView.java:                    titleTextView.setText(LocaleController.getString("ReturnToCall", R.string.ReturnToCall));
Components/GigagroupConvertAlert.java:        percentTextView.setText(LocaleController.getString("GigagroupConvertTitle", R.string.GigagroupConvertTitle));
Components/GigagroupConvertAlert.java:                    textView.setText(LocaleController.getString("GigagroupConvertInfo1", R.string.GigagroupConvertInfo1));
Components/GigagroupConvertAlert.java:                    textView.setText(LocaleController.getString("GigagroupConvertInfo2", R.string.GigagroupConvertInfo2));
Components/GigagroupConvertAlert.java:                    textView.setText(LocaleController.getString("GigagroupConvertInfo3", R.string.GigagroupConvertInfo3));
Components/GigagroupConvertAlert.java:        clearButton.setText(LocaleController.getString("GigagroupConvertProcessButton", R.string.GigagroupConvertProcessButton));
Components/GigagroupConvertAlert.java:            builder.setTitle(LocaleController.getString("GigagroupConvertAlertTitle", R.string.GigagroupConvertAlertTitle));
Components/GigagroupConvertAlert.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("GigagroupConvertAlertText", R.string.GigagroupConvertAlertText)));
Components/GigagroupConvertAlert.java:            builder.setPositiveButton(LocaleController.getString("GigagroupConvertAlertConver", R.string.GigagroupConvertAlertConver), (dialogInterface, i) -> onCovert());
Components/GigagroupConvertAlert.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/GigagroupConvertAlert.java:        cancelTextView.setText(LocaleController.getString("GigagroupConvertCancelButton", R.string.GigagroupConvertCancelButton));
Components/GroupCallPipAlertView.java:                    info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_CLICK, LocaleController.getString("VoipGroupOpenVoiceChat", R.string.VoipGroupOpenVoiceChat)));
Components/GroupCallPipAlertView.java:        leaveButton.setData(R.drawable.calls_decline, 0xffffffff, 0xFFCE4A4A, 0.3f, false, LocaleController.getString("VoipGroupLeave", R.string.VoipGroupLeave), false, false);
Components/GroupCallPipAlertView.java:                subtitleView.setText(LocaleController.getString("VoipGroupConnecting", R.string. VoipGroupConnecting));
Components/GroupCallPipAlertView.java:            soundButton.setData(R.drawable.calls_bluetooth, Color.WHITE, 0, 0.1f, true, LocaleController.getString("VoipAudioRoutingBluetooth", R.string.VoipAudioRoutingBluetooth), false, animated);
Components/GroupCallPipAlertView.java:            soundButton.setData(R.drawable.calls_speaker, Color.WHITE, 0, 0.3f, true, LocaleController.getString("VoipSpeaker", R.string.VoipSpeaker), false, animated);
Components/GroupCallPipAlertView.java:                soundButton.setData(R.drawable.calls_headphones, Color.WHITE, 0, 0.1f, true, LocaleController.getString("VoipAudioRoutingHeadset", R.string.VoipAudioRoutingHeadset), false, animated);
Components/GroupCallPipAlertView.java:                soundButton.setData(R.drawable.calls_speaker, Color.WHITE, 0, 0.1f, true, LocaleController.getString("VoipSpeaker", R.string.VoipSpeaker), false, animated);
Components/GroupCallPipAlertView.java:            muteButton.setData(R.drawable.calls_unmute, Color.WHITE, ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.3f)), 0.1f, true, LocaleController.getString("VoipMutedByAdminShort", R.string.VoipMutedByAdminShort), true, animated);
Components/GroupCallPipAlertView.java:            muteButton.setData(R.drawable.calls_unmute, Color.WHITE, ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * (service.isMicMute() ? 0.3f : 0.15f))), 0.1f, true, service.isMicMute() ? LocaleController.getString("VoipUnmute", R.string.VoipUnmute) : LocaleController.getString("VoipMute", R.string.VoipMute), service.isMicMute(), animated);
Components/GroupCallPipButton.java:        String contentDescription = LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat);
Components/GroupCallPipButton.java:            contentDescription +=  ", " + LocaleController.getString("VoipTapToMute", R.string.VoipTapToMute);
Components/GroupCallPipButton.java:            contentDescription += ", " + LocaleController.getString("Connecting", R.string.Connecting);
Components/GroupCallPipButton.java:            contentDescription += ", " + LocaleController.getString("VoipMutedByAdmin", R.string.VoipMutedByAdmin);
Components/GroupCallPipButton.java:            final String label = GroupCallPip.getInstance().showAlert ? LocaleController.getString("AccDescrCloseMenu", R.string.AccDescrCloseMenu) : LocaleController.getString("AccDescrOpenMenu2", R.string.AccDescrOpenMenu2);
Components/GroupCreateSpan.java:                    firstName = LocaleController.getString("FilterContacts", R.string.FilterContacts);
Components/GroupCreateSpan.java:                    firstName = LocaleController.getString("FilterNonContacts", R.string.FilterNonContacts);
Components/GroupCreateSpan.java:                    firstName = LocaleController.getString("FilterGroups", R.string.FilterGroups);
Components/GroupCreateSpan.java:                    firstName = LocaleController.getString("FilterChannels", R.string.FilterChannels);
Components/GroupCreateSpan.java:                    firstName = LocaleController.getString("FilterBots", R.string.FilterBots);
Components/GroupCreateSpan.java:                    firstName = LocaleController.getString("FilterMuted", R.string.FilterMuted);
Components/GroupCreateSpan.java:                    firstName = LocaleController.getString("FilterRead", R.string.FilterRead);
Components/GroupCreateSpan.java:                    firstName = LocaleController.getString("FilterArchived", R.string.FilterArchived);
Components/GroupCreateSpan.java:                firstName = LocaleController.getString("RepliesTitle", R.string.RepliesTitle);
Components/GroupCreateSpan.java:                firstName = LocaleController.getString("SavedMessages", R.string.SavedMessages);
Components/GroupCreateSpan.java:            info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_CLICK.getId(), LocaleController.getString("Delete", R.string.Delete)));
Components/GroupVoipInviteAlert.java:                        sectionCell.setText(LocaleController.getString("ChannelMembers", R.string.ChannelMembers));
Components/GroupVoipInviteAlert.java:                        sectionCell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
Components/GroupVoipInviteAlert.java:                        actionCell.setText(LocaleController.getString("VoipGroupCopyInviteLink", R.string.VoipGroupCopyInviteLink), null, R.drawable.msg_link, 7, showDivider);
Components/GroupVoipInviteAlert.java:                        sectionCell.setText(LocaleController.getString("ChannelOtherMembers", R.string.ChannelOtherMembers));
Components/GroupVoipInviteAlert.java:                            sectionCell.setText(LocaleController.getString("YourContactsToInvite", R.string.YourContactsToInvite));
Components/GroupVoipInviteAlert.java:                            sectionCell.setText(LocaleController.getString("GroupContacts", R.string.GroupContacts));
Components/HintView.java:            textView.setText(LocaleController.getString("AutoplayVideoInfo", R.string.AutoplayVideoInfo));
Components/HintView.java:                textView.setText(LocaleController.getString("PollSelectOption", R.string.PollSelectOption));
Components/HintView.java:                        textView.setText(LocaleController.getString("NoVotesQuiz", R.string.NoVotesQuiz));
Components/HintView.java:                        textView.setText(LocaleController.getString("NoVotes", R.string.NoVotes));
Components/HintView.java:                textView.setText(LocaleController.getString("HidAccount", R.string.HidAccount));
Components/ImageUpdater.java:        builder.setTitle(LocaleController.getString("ChoosePhoto", R.string.ChoosePhoto), true);
Components/ImageUpdater.java:        items.add(LocaleController.getString("ChooseTakePhoto", R.string.ChooseTakePhoto));
Components/ImageUpdater.java:            items.add(LocaleController.getString("ChooseRecordVideo", R.string.ChooseRecordVideo));
Components/ImageUpdater.java:        items.add(LocaleController.getString("ChooseFromGallery", R.string.ChooseFromGallery));
Components/ImageUpdater.java:            items.add(LocaleController.getString("ChooseFromSearch", R.string.ChooseFromSearch));
Components/ImageUpdater.java:            items.add(LocaleController.getString("DeletePhoto", R.string.DeletePhoto));
Components/ImportingAlert.java:        textView.setText(LocaleController.getString("ImportImportingTitle", R.string.ImportImportingTitle));
Components/ImportingAlert.java:        cell.setText(LocaleController.getString("ImportDone", R.string.ImportDone));
Components/ImportingAlert.java:                infoTextView[a].setText(LocaleController.getString("ImportImportingInfo", R.string.ImportImportingInfo));
Components/ImportingAlert.java:                importCountTextView[a].setText(LocaleController.formatString("ImportCount", R.string.ImportCount, AndroidUtilities.formatFileSize(importingHistory.getUploadedCount()), AndroidUtilities.formatFileSize(importingHistory.getTotalCount())));
Components/ImportingAlert.java:                infoTextView[a].setText(LocaleController.getString("ImportDoneInfo", R.string.ImportDoneInfo));
Components/ImportingAlert.java:                importCountTextView[a].setText(LocaleController.getString("ImportDoneTitle", R.string.ImportDoneTitle));
Components/ImportingAlert.java:            importCountTextView[0].setText(LocaleController.formatString("ImportCount", R.string.ImportCount, AndroidUtilities.formatFileSize(importingHistory.getUploadedCount()), AndroidUtilities.formatFileSize(importingHistory.getTotalCount())));
Components/InstantCameraView.java:        switchCameraButton.setContentDescription(LocaleController.getString("AccDescrSwitchCamera", R.string.AccDescrSwitchCamera));
Components/InviteLinkBottomSheet.java:                titleTextView.setText(LocaleController.getString("ExpiredLink", R.string.ExpiredLink));
Components/InviteLinkBottomSheet.java:                titleTextView.setText(LocaleController.getString("RevokedLink", R.string.RevokedLink));
Components/InviteLinkBottomSheet.java:                titleTextView.setText(LocaleController.getString("InviteLink", R.string.InviteLink));
Components/InviteLinkBottomSheet.java:            titleTextView.setText(LocaleController.getString("InviteLink", R.string.InviteLink));
Components/InviteLinkBottomSheet.java:                        headerCell.setText(LocaleController.getString("LinkCreatedeBy", R.string.LinkCreatedeBy));
Components/InviteLinkBottomSheet.java:                            headerCell.setText(LocaleController.getString("NoOneJoined", R.string.NoOneJoined));
Components/InviteLinkBottomSheet.java:                                                role = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
Components/InviteLinkBottomSheet.java:                                                role = LocaleController.getString("ChannelAdmin", R.string.ChannelAdmin);
Components/InviteLinkBottomSheet.java:                                            role = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
Components/InviteLinkBottomSheet.java:                                            role = LocaleController.getString("ChannelAdmin", R.string.ChannelAdmin);
Components/InviteLinkBottomSheet.java:                        privacyCell.setText(LocaleController.getString("LinkIsNoActive", R.string.LinkIsNoActive));
Components/InviteLinkBottomSheet.java:                            privacyCell.setText(LocaleController.getString("LinkIsExpiredLimitReached", R.string.LinkIsExpiredLimitReached));
Components/InviteLinkBottomSheet.java:                            privacyCell.setText(LocaleController.getString("LinkIsExpired", R.string.LinkIsExpired));
Components/InviteLinkBottomSheet.java:                            privacyCell.setText(LocaleController.formatString("LinkExpiresIn", R.string.LinkExpiresIn, time));
Components/InviteLinkBottomSheet.java:                            privacyCell.setText(LocaleController.formatString("LinkExpiresInTime", R.string.LinkExpiresInTime, time));
Components/InviteMembersBottomSheet.java:        searchView.searchEditText.setHint(LocaleController.getString("SearchForChats", R.string.SearchForChats));
Components/InviteMembersBottomSheet.java:                    builder.setTitle(LocaleController.getString("AddOneMemberAlertTitle", R.string.AddOneMemberAlertTitle));
Components/InviteMembersBottomSheet.java:                    builder.setTitle(LocaleController.formatString("AddMembersAlertTitle", R.string.AddMembersAlertTitle, LocaleController.formatPluralString("Members", selectedContacts.size())));
Components/InviteMembersBottomSheet.java:                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(AndroidUtilities.replaceTags(LocaleController.formatString("AddMembersAlertNamesText", R.string.AddMembersAlertNamesText, LocaleController.formatPluralString("Members", selectedContacts.size()), chat.title)));
Components/InviteMembersBottomSheet.java:                    builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AddMembersAlertNamesText", R.string.AddMembersAlertNamesText, stringBuilder, chat.title)));
Components/InviteMembersBottomSheet.java:                builder.setPositiveButton(LocaleController.getString("Add", R.string.Add), (dialogInterface, i) -> onAddToGroupDone(0));
Components/InviteMembersBottomSheet.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/InviteMembersBottomSheet.java:        floatingButton.setContentDescription(LocaleController.getString("Next", R.string.Next));
Components/InviteMembersBottomSheet.java:                    manageChatTextCell.setText(LocaleController.getString("VoipGroupCopyInviteLink", R.string.VoipGroupCopyInviteLink), null, R.drawable.msg_link, 7, true);
Components/InviteMembersBottomSheet.java:                        stickerEmptyView.title.setText(LocaleController.getString("FilterNoChats", R.string.FilterNoChats));
Components/InviteMembersBottomSheet.java:                        stickerEmptyView.title.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
Components/InviteMembersBottomSheet.java:                    cell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
Components/JoinCallAlert.java:            textView.setText(LocaleController.getString("VoipGroupDisplayAs", R.string.VoipGroupDisplayAs));
Components/JoinCallAlert.java:            textView.setText(LocaleController.getString("VoipGroupStartAs", R.string.VoipGroupStartAs));
Components/JoinCallAlert.java:            textView.setText(LocaleController.getString("VoipGroupJoinAs", R.string.VoipGroupJoinAs));
Components/JoinCallAlert.java:            messageTextView.setText(LocaleController.getString("VoipGroupStartAsInfoGroup", R.string.VoipGroupStartAsInfoGroup));
Components/JoinCallAlert.java:            messageTextView.setText(LocaleController.getString("VoipGroupStartAsInfo", R.string.VoipGroupStartAsInfo));
Components/JoinCallAlert.java:            doneButton.setText(LocaleController.formatString("VoipGroupContinueAs", R.string.VoipGroupContinueAs, UserObject.getFirstName(user)), animated);
Components/JoinCallAlert.java:            doneButton.setText(LocaleController.formatString("VoipGroupContinueAs", R.string.VoipGroupContinueAs, chat.title), animated);
Components/JoinCallAlert.java:                status = LocaleController.getString("VoipGroupPersonalAccount", R.string.VoipGroupPersonalAccount);
Components/JoinCallByUrlAlert.java:                infoTextView.setText(LocaleController.getString("NoOneJoinedYet", R.string.NoOneJoinedYet));
Components/JoinCallByUrlAlert.java:            infoTextView.setText(LocaleController.getString("NoOneJoinedYet", R.string.NoOneJoinedYet));
Components/JoinCallByUrlAlert.java:        clearButton.setText(LocaleController.getString("VoipGroupJoinVoiceChatUrl", R.string.VoipGroupJoinVoiceChatUrl));
Components/JoinGroupAlert.java:        pickerBottomLayout.cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
Components/JoinGroupAlert.java:            pickerBottomLayout.doneButtonTextView.setText(LocaleController.getString("ProfileJoinChannel", R.string.ProfileJoinChannel).toUpperCase());
Components/JoinGroupAlert.java:            pickerBottomLayout.doneButtonTextView.setText(LocaleController.getString("JoinGroup", R.string.JoinGroup));
Components/LinkActionView.java:        spannableStringBuilder.append(LocaleController.getString("LinkActionCopy", R.string.LinkActionCopy));
Components/LinkActionView.java:        spannableStringBuilder.append(LocaleController.getString("LinkActionShare", R.string.LinkActionShare));
Components/LinkActionView.java:        spannableStringBuilder.append(LocaleController.getString("DeleteLink", R.string.DeleteLink));
Components/LinkActionView.java:                fragment.startActivityForResult(Intent.createChooser(intent, LocaleController.getString("InviteToGroupByLink", R.string.InviteToGroupByLink)), 500);
Components/LinkActionView.java:            builder.setTitle(LocaleController.getString("DeleteLink", R.string.DeleteLink));
Components/LinkActionView.java:            builder.setMessage(LocaleController.getString("DeleteLinkHelp", R.string.DeleteLinkHelp));
Components/LinkActionView.java:            builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface2, i2) -> {
Components/LinkActionView.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/LinkActionView.java:                subItem.setTextAndIcon(LocaleController.getString("Edit", R.string.Edit), R.drawable.msg_edit);
Components/LinkActionView.java:            subItem.setTextAndIcon(LocaleController.getString("GetQRCode", R.string.GetQRCode), R.drawable.msg_qrcode);
Components/LinkActionView.java:                subItem.setTextAndIcon(LocaleController.getString("RevokeLink", R.string.RevokeLink), R.drawable.msg_delete);
Components/LinkActionView.java:        qrCodeBottomSheet = new QRCodeBottomSheet(getContext(), link, isChannel ? LocaleController.getString("QRCodeLinkHelpChannel", R.string.QRCodeLinkHelpChannel) : LocaleController.getString("QRCodeLinkHelpGroup", R.string.QRCodeLinkHelpGroup)) {
Components/LinkActionView.java:            linkView.setText(LocaleController.getString("Loading", R.string.Loading));
Components/LinkActionView.java:        builder.setMessage(LocaleController.getString("RevokeAlert", R.string.RevokeAlert));
Components/LinkActionView.java:        builder.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
Components/LinkActionView.java:        builder.setPositiveButton(LocaleController.getString("RevokeButton", R.string.RevokeButton), (dialogInterface, i) -> {
Components/LinkActionView.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/OtherDocumentPlaceholderDrawable.java:            button = LocaleController.getString("OpenFile", R.string.OpenFile);
Components/OtherDocumentPlaceholderDrawable.java:                button = LocaleController.getString("Cancel", R.string.Cancel).toUpperCase();
Components/OtherDocumentPlaceholderDrawable.java:                button = LocaleController.getString("TapToDownload", R.string.TapToDownload);
Components/PasscodeView.java:        checkImage.setContentDescription(LocaleController.getString("Done", R.string.Done));
Components/PasscodeView.java:                frameLayout.setContentDescription(LocaleController.getString("AccDescrBackspace", R.string.AccDescrBackspace));
Components/PasscodeView.java:                retryTextView.setText(LocaleController.formatString("TooManyTries", R.string.TooManyTries, LocaleController.formatPluralString("Seconds", value)));
Components/PasscodeView.java:                    fingerprintTextView.setText(LocaleController.getString("FingerprintInfo", R.string.FingerprintInfo));
Components/PasscodeView.java:                    fingerprintStatusTextView.setText(LocaleController.getString("FingerprintHelp", R.string.FingerprintHelp));
Components/PasscodeView.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/PasscodeView.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/PasscodeView.java:                            showFingerprintError(LocaleController.getString("FingerprintNotRecognized", R.string.FingerprintNotRecognized));
Components/PasscodeView.java:        passcodeTextView.setText(LocaleController.getString("EnterYourPasscode", R.string.EnterYourPasscode));
Components/PermanentLinkBottomSheet.java:        titleView.setText(LocaleController.getString("InviteLink", R.string.InviteLink));
Components/PermanentLinkBottomSheet.java:        subtitle.setText(isChannel ? LocaleController.getString("LinkInfoChannel", R.string.LinkInfoChannel) : LocaleController.getString("LinkInfo", R.string.LinkInfo));
Components/PermanentLinkBottomSheet.java:        manage.setText(LocaleController.getString("ManageInviteLinks", R.string.ManageInviteLinks));
Components/PermanentLinkBottomSheet.java:                    builder.setMessage(LocaleController.getString("RevokeAlertNewLink", R.string.RevokeAlertNewLink));
Components/PermanentLinkBottomSheet.java:                    builder.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
Components/PermanentLinkBottomSheet.java:                    builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
Components/PhonebookShareAlert.java:                            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, (dialogInterface, i) -> {
Components/PhonebookShareAlert.java:                                        Toast.makeText(this.parentFragment.getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
Components/PhonebookShareAlert.java:                                layout.textView.setText(LocaleController.getString("PhoneCopied", R.string.PhoneCopied));
Components/PhonebookShareAlert.java:                                layout.textView.setText(LocaleController.getString("EmailCopied", R.string.EmailCopied));
Components/PhonebookShareAlert.java:                                layout.textView.setText(LocaleController.getString("TextCopied", R.string.TextCopied));
Components/PhonebookShareAlert.java:            actionBar.setTitle(LocaleController.getString("AddContactPhonebookTitle", R.string.AddContactPhonebookTitle));
Components/PhonebookShareAlert.java:            actionBar.setTitle(LocaleController.getString("ShareContactTitle", R.string.ShareContactTitle));
Components/PhonebookShareAlert.java:            buttonTextView.setText(LocaleController.getString("AddContactPhonebookTitle", R.string.AddContactPhonebookTitle));
Components/PhonebookShareAlert.java:            buttonTextView.setText(LocaleController.getString("ShareContactTitle", R.string.ShareContactTitle));
Components/PhonebookShareAlert.java:                builder.setTitle(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
Components/PhonebookShareAlert.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/PhonebookShareAlert.java:                        LocaleController.getString("CreateNewContact", R.string.CreateNewContact),
Components/PhonebookShareAlert.java:                        LocaleController.getString("AddToExistingContact", R.string.AddToExistingContact)
Components/PhotoFilterView.java:        cancelTextView.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
Components/PhotoFilterView.java:        doneTextView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
Components/PhotoFilterView.java:                String str = LocaleController.getString("CurvesAll", R.string.CurvesAll);
Components/PhotoFilterView.java:                String str = LocaleController.getString("CurvesRed", R.string.CurvesRed);
Components/PhotoFilterView.java:                String str = LocaleController.getString("CurvesGreen", R.string.CurvesGreen);
Components/PhotoFilterView.java:                String str = LocaleController.getString("CurvesBlue", R.string.CurvesBlue);
Components/PhotoFilterView.java:        blurOffButton.setText(LocaleController.getString("BlurOff", R.string.BlurOff));
Components/PhotoFilterView.java:        blurRadialButton.setText(LocaleController.getString("BlurRadial", R.string.BlurRadial));
Components/PhotoFilterView.java:        blurLinearButton.setText(LocaleController.getString("BlurLinear", R.string.BlurLinear));
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Enhance", R.string.Enhance), enhanceValue, 0, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Highlights", R.string.Highlights), highlightsValue, -100, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Contrast", R.string.Contrast), contrastValue, -100, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Exposure", R.string.Exposure), exposureValue, -100, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Warmth", R.string.Warmth), warmthValue, -100, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Saturation", R.string.Saturation), saturationValue, -100, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Vignette", R.string.Vignette), vignetteValue, 0, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Shadows", R.string.Shadows), shadowsValue, -100, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Grain", R.string.Grain), grainValue, 0, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Sharpen", R.string.Sharpen), sharpenValue, 0, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("Fade", R.string.Fade), fadeValue, 0, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("SoftenSkin", R.string.SoftenSkin), softenSkinValue, 0, 100);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("TintShadows", R.string.TintShadows), 0, tintShadowsColor);
Components/PhotoFilterView.java:                        cell.setIconAndTextAndValue(LocaleController.getString("TintHighlights", R.string.TintHighlights), 0, tintHighlightsColor);
Components/PhotoPaintView.java:        cancelTextView.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
Components/PhotoPaintView.java:        doneTextView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
Components/PhotoPaintView.java:            builder.setMessage(LocaleController.getString("PhotoEditorDiscardAlert", R.string.PhotoEditorDiscardAlert));
Components/PhotoPaintView.java:            builder.setTitle(LocaleController.getString("DiscardChanges", R.string.DiscardChanges));
Components/PhotoPaintView.java:            builder.setPositiveButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialogInterface, i) -> okRunnable.run());
Components/PhotoPaintView.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/PhotoPaintView.java:            deleteView.setText(LocaleController.getString("PaintDelete", R.string.PaintDelete));
Components/PhotoPaintView.java:                editView.setText(LocaleController.getString("PaintEdit", R.string.PaintEdit));
Components/PhotoPaintView.java:            duplicateView.setText(LocaleController.getString("PaintDuplicate", R.string.PaintDuplicate));
Components/PhotoPaintView.java:            View radial = buttonForBrush(0, R.drawable.msg_draw_pen, LocaleController.getString("PaintPen", R.string.PaintPen), currentBrush == 0);
Components/PhotoPaintView.java:            View elliptical = buttonForBrush(1, R.drawable.msg_draw_marker, LocaleController.getString("PaintMarker", R.string.PaintMarker), currentBrush == 1);
Components/PhotoPaintView.java:            View neon = buttonForBrush(2, R.drawable.msg_draw_neon, LocaleController.getString("PaintNeon", R.string.PaintNeon), currentBrush == 2);
Components/PhotoPaintView.java:            View arrow = buttonForBrush(3, R.drawable.msg_draw_arrow, LocaleController.getString("PaintArrow", R.string.PaintArrow), currentBrush == 3);
Components/PhotoPaintView.java:                    text = LocaleController.getString("PaintOutlined", R.string.PaintOutlined);
Components/PhotoPaintView.java:                    text = LocaleController.getString("PaintRegular", R.string.PaintRegular);
Components/PhotoPaintView.java:                    text = LocaleController.getString("PaintFramed", R.string.PaintFramed);
Components/PhotoViewerCaptionEnterView.java:        emojiButton.setContentDescription(LocaleController.getString("Emoji", R.string.Emoji));
Components/PhotoViewerCaptionEnterView.java:        messageEditText.setHint(LocaleController.getString("AddCaption", R.string.AddCaption));
Components/PhotoViewerCaptionEnterView.java:        doneButton.setContentDescription(LocaleController.getString("Done", R.string.Done));
Components/PickerBottomLayout.java:        cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
Components/PickerBottomLayout.java:        doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
Components/PickerBottomLayoutViewer.java:        cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
Components/PickerBottomLayoutViewer.java:        doneButton.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
Components/PollVotesAlert.java:                righTextView.setText(LocaleController.getString("PollExpand", R.string.PollExpand));
Components/PollVotesAlert.java:                righTextView.setText(LocaleController.getString("PollCollapse", R.string.PollCollapse));
Components/PollVotesAlert.java:        actionBar.setTitle(LocaleController.getString("PollResults", R.string.PollResults));
Components/ProximitySheet.java:        titleView.setText(LocaleController.getString("LocationNotifiation", R.string.LocationNotifiation));
Components/ProximitySheet.java:                return LocaleController.formatString("MilesShort", R.string.MilesShort, value);
Components/ProximitySheet.java:                return LocaleController.formatString("KMetersShort", R.string.KMetersShort, value);
Components/ProximitySheet.java:                    return LocaleController.formatString("FootsShort", R.string.FootsShort, 250);
Components/ProximitySheet.java:                    return LocaleController.formatString("MetersShort", R.string.MetersShort, 50);
Components/ProximitySheet.java:                    return LocaleController.formatString("MetersShort", R.string.MetersShort, value * 100);
Components/ProximitySheet.java:                buttonTextView.setText(LocaleController.formatString("LocationNotifiationButtonGroup", R.string.LocationNotifiationButtonGroup, distance));
Components/ProximitySheet.java:                String format = LocaleController.getString("LocationNotifiationButtonUser", R.string.LocationNotifiationButtonUser);
Components/ProximitySheet.java:                buttonTextView.setText(LocaleController.formatString("LocationNotifiationButtonUser", R.string.LocationNotifiationButtonUser, name, distance));
Components/ProximitySheet.java:            infoTextView.setText(LocaleController.formatString("LocationNotifiationCloser", R.string.LocationNotifiationCloser, distance));
Components/QRCodeBottomSheet.java:        setTitle(LocaleController.getString("InviteByQRCode", R.string.InviteByQRCode), true);
Components/QRCodeBottomSheet.java:        buttonTextView.setText(LocaleController.getString("ShareQrCode", R.string.ShareQrCode));
Components/QRCodeBottomSheet.java:                    AndroidUtilities.findActivity(context).startActivityForResult(Intent.createChooser(i, LocaleController.getString("InviteByQRCode", R.string.InviteByQRCode)), 500);
Components/ReportAlert.java:            percentTextView.setText(LocaleController.getString("ReportTitleSpam", R.string.ReportTitleSpam));
Components/ReportAlert.java:            percentTextView.setText(LocaleController.getString("ReportTitleFake", R.string.ReportTitleFake));
Components/ReportAlert.java:            percentTextView.setText(LocaleController.getString("ReportTitleViolence", R.string.ReportTitleViolence));
Components/ReportAlert.java:            percentTextView.setText(LocaleController.getString("ReportTitleChild", R.string.ReportTitleChild));
Components/ReportAlert.java:            percentTextView.setText(LocaleController.getString("ReportTitlePornography", R.string.ReportTitlePornography));
Components/ReportAlert.java:            percentTextView.setText(LocaleController.getString("ReportChat", R.string.ReportChat));
Components/ReportAlert.java:        infoTextView.setText(LocaleController.getString("ReportInfo", R.string.ReportInfo));
Components/ReportAlert.java:        editText.setHint(LocaleController.getString("ReportHint", R.string.ReportHint));
Components/ReportAlert.java:        clearButton.setText(LocaleController.getString("ReportSend", R.string.ReportSend));
Components/ScamDrawable.java:            text = LocaleController.getString("ScamMessage", R.string.ScamMessage);
Components/ScamDrawable.java:            text = LocaleController.getString("FakeMessage", R.string.FakeMessage);
Components/ScamDrawable.java:            newText = LocaleController.getString("ScamMessage", R.string.ScamMessage);
Components/ScamDrawable.java:            newText = LocaleController.getString("FakeMessage", R.string.FakeMessage);
Components/SearchViewPager.java:        emptyView.title.setText(LocaleController.getString("NoResult", R.string.NoResult));
Components/SearchViewPager.java:                    return LocaleController.getString("SearchAllChatsShort", R.string.SearchAllChatsShort);
Components/SearchViewPager.java:            gotoItem = actionMode.addItemWithWidth(gotoItemId, R.drawable.msg_message, AndroidUtilities.dp(54), LocaleController.getString("AccDescrGoToMessage", R.string.AccDescrGoToMessage));
Components/SearchViewPager.java:            forwardItem = actionMode.addItemWithWidth(forwardItemId, R.drawable.msg_forward, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward));
Components/ShareAlert.java:            leftTab.setText(LocaleController.getString("VoipGroupInviteCanSpeak", R.string.VoipGroupInviteCanSpeak));
Components/ShareAlert.java:            rightTab.setText(LocaleController.getString("VoipGroupInviteListenOnly", R.string.VoipGroupInviteListenOnly));
Components/ShareAlert.java:            searchEditText.setHint(LocaleController.getString("ShareSendTo", R.string.ShareSendTo));
Components/ShareAlert.java:                            searchEmptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
Components/ShareAlert.java:                            searchEmptyView.setText(LocaleController.getString("NoChats", R.string.NoChats));
Components/ShareAlert.java:                        pickerBottomLayout.setText(LocaleController.getString("VoipGroupCopySpeakerLink", R.string.VoipGroupCopySpeakerLink).toUpperCase());
Components/ShareAlert.java:                        pickerBottomLayout.setText(LocaleController.getString("VoipGroupCopyListenLink", R.string.VoipGroupCopyListenLink).toUpperCase());
Components/ShareAlert.java:                        builder.setTitle(LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle));
Components/ShareAlert.java:                            builder.setMessage(LocaleController.getString("PublicPollCantForward", R.string.PublicPollCantForward));
Components/ShareAlert.java:                            builder.setMessage(LocaleController.getString("ErrorSendRestrictedPollsAll", R.string.ErrorSendRestrictedPollsAll));
Components/ShareAlert.java:                            builder.setMessage(LocaleController.getString("ErrorSendRestrictedPolls", R.string.ErrorSendRestrictedPolls));
Components/ShareAlert.java:                        builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
Components/ShareAlert.java:        searchEmptyView.setText(LocaleController.getString("NoChats", R.string.NoChats));
Components/ShareAlert.java:                pickerBottomLayout.setText(LocaleController.getString("VoipGroupCopySpeakerLink", R.string.VoipGroupCopySpeakerLink).toUpperCase());
Components/ShareAlert.java:                pickerBottomLayout.setText(LocaleController.getString("CopyLink", R.string.CopyLink).toUpperCase());
Components/ShareAlert.java:                        Toast.makeText(ShareAlert.this.getContext(), LocaleController.getString("Loading", R.string.Loading), Toast.LENGTH_SHORT).show();
Components/ShareAlert.java:        commentTextView.setHint(LocaleController.getString("ShareComment", R.string.ShareComment));
Components/SharedMediaLayout.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
Components/SharedMediaLayout.java:        searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));
Components/SharedMediaLayout.java:        closeButton.setContentDescription(LocaleController.getString("Close", R.string.Close));
Components/SharedMediaLayout.java:            gotoItem.setContentDescription(LocaleController.getString("AccDescrGoToMessage", R.string.AccDescrGoToMessage));
Components/SharedMediaLayout.java:            forwardItem.setContentDescription(LocaleController.getString("Forward", R.string.Forward));
Components/SharedMediaLayout.java:        deleteItem.setContentDescription(LocaleController.getString("Delete", R.string.Delete));
Components/SharedMediaLayout.java:            mediaPages[a].emptyView.title.setText(LocaleController.getString("NoResult", R.string.NoResult));
Components/SharedMediaLayout.java:            mediaPages[a].emptyView.subtitle.setText(LocaleController.getString("SearchEmptyViewFilteredSubtitle2", R.string.SearchEmptyViewFilteredSubtitle2));
Components/SharedMediaLayout.java:                    scrollSlidingTextTabStrip.addTextTab(7, LocaleController.getString("GroupMembers", R.string.GroupMembers), idToView);
Components/SharedMediaLayout.java:                        scrollSlidingTextTabStrip.addTextTab(0, LocaleController.getString("SharedMediaTabFull2", R.string.SharedMediaTabFull2), idToView);
Components/SharedMediaLayout.java:                        scrollSlidingTextTabStrip.addTextTab(0, LocaleController.getString("SharedMediaTab2", R.string.SharedMediaTab2), idToView);
Components/SharedMediaLayout.java:                    scrollSlidingTextTabStrip.addTextTab(1, LocaleController.getString("SharedFilesTab2", R.string.SharedFilesTab2), idToView);
Components/SharedMediaLayout.java:                        scrollSlidingTextTabStrip.addTextTab(3, LocaleController.getString("SharedLinksTab2", R.string.SharedLinksTab2), idToView);
Components/SharedMediaLayout.java:                        scrollSlidingTextTabStrip.addTextTab(4, LocaleController.getString("SharedMusicTab2", R.string.SharedMusicTab2), idToView);
Components/SharedMediaLayout.java:                            scrollSlidingTextTabStrip.addTextTab(4, LocaleController.getString("SharedMusicTab2", R.string.SharedMusicTab2), idToView);
Components/SharedMediaLayout.java:                    scrollSlidingTextTabStrip.addTextTab(2, LocaleController.getString("SharedVoiceTab2", R.string.SharedVoiceTab2), idToView);
Components/SharedMediaLayout.java:                    scrollSlidingTextTabStrip.addTextTab(5, LocaleController.getString("SharedGIFsTab2", R.string.SharedGIFsTab2), idToView);
Components/SharedMediaLayout.java:                    scrollSlidingTextTabStrip.addTextTab(6, LocaleController.getString("SharedGroupsTab2", R.string.SharedGroupsTab2), idToView);
Components/SharedMediaLayout.java:                builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoMediaSecret", R.string.NoMediaSecret));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedFilesSecret", R.string.NoSharedFilesSecret));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedFiles", R.string.NoSharedFiles));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedVoiceSecret", R.string.NoSharedVoiceSecret));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedVoice", R.string.NoSharedVoice));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedLinksSecret", R.string.NoSharedLinksSecret));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedLinks", R.string.NoSharedLinks));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedAudioSecret", R.string.NoSharedAudioSecret));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedAudio", R.string.NoSharedAudio));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoSharedGifSecret", R.string.NoSharedGifSecret));
Components/SharedMediaLayout.java:                emptyStubView.emptyTextView.setText(LocaleController.getString("NoGIFs", R.string.NoGIFs));
Components/SharedMediaLayout.java:            emptyStubView.emptyTextView.setText(LocaleController.getString("NoGroupsInCommon", R.string.NoGroupsInCommon));
Components/SharedMediaLayout.java:                            role = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
Components/SharedMediaLayout.java:                            role = LocaleController.getString("ChannelAdmin", R.string.ChannelAdmin);
Components/SharedMediaLayout.java:                        role = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
Components/SharedMediaLayout.java:                        role = LocaleController.getString("ChannelAdmin", R.string.ChannelAdmin);
Components/SharingLocationsAlert.java:        pickerBottomLayout.cancelButton.setText(LocaleController.getString("StopAllLocationSharings", R.string.StopAllLocationSharings));
Components/SharingLocationsAlert.java:        pickerBottomLayout.doneButtonTextView.setText(LocaleController.getString("Close", R.string.Close).toUpperCase());
Components/SharingLocationsAlert.java:                        textView.setText(LocaleController.formatString("SharingLiveLocationTitle", R.string.SharingLiveLocationTitle, LocaleController.formatPluralString("Chats", LocationController.getLocationsCount())));
Components/ShutterButton.java:            info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_CLICK.getId(), LocaleController.getString("AccActionTakePicture", R.string.AccActionTakePicture)));
Components/ShutterButton.java:            info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_LONG_CLICK.getId(), LocaleController.getString("AccActionRecordVideo", R.string.AccActionRecordVideo)));
Components/StickerMasksAlert.java:                searchEditText.setHint(LocaleController.getString("SearchStickersHint", R.string.SearchStickersHint));
Components/StickerMasksAlert.java:                searchEditText.setHint(LocaleController.getString("SearchEmojiHint", R.string.SearchEmojiHint));
Components/StickerMasksAlert.java:                searchEditText.setHint(LocaleController.getString("SearchGifsTitle", R.string.SearchGifsTitle));
Components/StickerMasksAlert.java:            stickersTab.addIconTab(1, stickerIcons[1]).setContentDescription(LocaleController.getString("FavoriteStickers", R.string.FavoriteStickers));
Components/StickerMasksAlert.java:            stickersTab.addIconTab(0, stickerIcons[0]).setContentDescription(LocaleController.getString("RecentStickers", R.string.RecentStickers));
Components/StickerMasksAlert.java:            stickersTab.addStickerTab(thumb, svgThumb, document, stickerSet).setContentDescription(stickerSet.set.title + ", " + LocaleController.getString("AccDescrStickerSet", R.string.AccDescrStickerSet));
Components/StickerMasksAlert.java:                        cell.setText(LocaleController.getString("RecentStickers", R.string.RecentStickers), 0);
Components/StickerMasksAlert.java:                        cell.setText(LocaleController.getString("FavoriteStickers", R.string.FavoriteStickers), 0);
Components/StickerMasksAlert.java:                    textView.setText(LocaleController.getString("NoStickersFound", R.string.NoStickersFound));
Components/StickersAlert.java:                        Toast.makeText(getContext(), LocaleController.getString("AddStickersNotFound", R.string.AddStickersNotFound), Toast.LENGTH_SHORT).show();
Components/StickersAlert.java:        optionsButton.addSubItem(1, R.drawable.msg_share, LocaleController.getString("StickersShare", R.string.StickersShare));
Components/StickersAlert.java:        optionsButton.addSubItem(2, R.drawable.msg_link, LocaleController.getString("CopyLink", R.string.CopyLink));
Components/StickersAlert.java:        optionsButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
Components/StickersAlert.java:            previewSendButton.setText(LocaleController.getString("SendSticker", R.string.SendSticker).toUpperCase());
Components/StickersAlert.java:            previewSendButton.setText(LocaleController.getString("Close", R.string.Close).toUpperCase());
Components/StickersAlert.java:                    text = LocaleController.formatString("AddStickersCount", R.string.AddStickersCount, LocaleController.formatPluralString("MasksCount", stickerSet.documents.size())).toUpperCase();
Components/StickersAlert.java:                    text = LocaleController.formatString("AddStickersCount", R.string.AddStickersCount, LocaleController.formatPluralString("Stickers", stickerSet.documents.size())).toUpperCase();
Components/StickersAlert.java:                                Toast.makeText(getContext(), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred), Toast.LENGTH_SHORT).show();
Components/StickersAlert.java:                    text = LocaleController.formatString("RemoveStickersCount", R.string.RemoveStickersCount, LocaleController.formatPluralString("MasksCount", stickerSet.documents.size())).toUpperCase();
Components/StickersAlert.java:                    text = LocaleController.formatString("RemoveStickersCount", R.string.RemoveStickersCount, LocaleController.formatPluralString("Stickers", stickerSet.documents.size())).toUpperCase();
Components/StickersAlert.java:            String text = LocaleController.getString("Close", R.string.Close).toUpperCase();
Components/StickersArchiveAlert.java:            setTitle(LocaleController.getString("ArchivedMasksAlertTitle", R.string.ArchivedMasksAlertTitle));
Components/StickersArchiveAlert.java:            setTitle(LocaleController.getString("ArchivedStickersAlertTitle", R.string.ArchivedStickersAlertTitle));
Components/StickersArchiveAlert.java:            textView.setText(LocaleController.getString("ArchivedMasksAlertInfo", R.string.ArchivedMasksAlertInfo));
Components/StickersArchiveAlert.java:            textView.setText(LocaleController.getString("ArchivedStickersAlertInfo", R.string.ArchivedStickersAlertInfo));
Components/StickersArchiveAlert.java:        setNegativeButton(LocaleController.getString("Close", R.string.Close), (dialog, which) -> dialog.dismiss());
Components/StickersArchiveAlert.java:            setPositiveButton(LocaleController.getString("Settings", R.string.Settings), (dialog, which) -> {
Components/StickerSetBulletinLayout.java:                    titleTextView.setText(LocaleController.getString("AddMasksInstalled", R.string.AddMasksInstalled));
Components/StickerSetBulletinLayout.java:                    subtitleTextView.setText(LocaleController.formatString("AddMasksInstalledInfo", R.string.AddMasksInstalledInfo, stickerSet.title));
Components/StickerSetBulletinLayout.java:                    titleTextView.setText(LocaleController.getString("AddStickersInstalled", R.string.AddStickersInstalled));
Components/StickerSetBulletinLayout.java:                    subtitleTextView.setText(LocaleController.formatString("AddStickersInstalledInfo", R.string.AddStickersInstalledInfo, stickerSet.title));
Components/StickerSetBulletinLayout.java:                    titleTextView.setText(LocaleController.getString("MasksRemoved", R.string.MasksRemoved));
Components/StickerSetBulletinLayout.java:                    subtitleTextView.setText(LocaleController.formatString("MasksRemovedInfo", R.string.MasksRemovedInfo, stickerSet.title));
Components/StickerSetBulletinLayout.java:                    titleTextView.setText(LocaleController.getString("StickersRemoved", R.string.StickersRemoved));
Components/StickerSetBulletinLayout.java:                    subtitleTextView.setText(LocaleController.formatString("StickersRemovedInfo", R.string.StickersRemovedInfo, stickerSet.title));
Components/StickerSetBulletinLayout.java:                    titleTextView.setText(LocaleController.getString("MasksArchived", R.string.MasksArchived));
Components/StickerSetBulletinLayout.java:                    subtitleTextView.setText(LocaleController.formatString("MasksArchivedInfo", R.string.MasksArchivedInfo, stickerSet.title));
Components/StickerSetBulletinLayout.java:                    titleTextView.setText(LocaleController.getString("StickersArchived", R.string.StickersArchived));
Components/StickerSetBulletinLayout.java:                    subtitleTextView.setText(LocaleController.formatString("StickersArchivedInfo", R.string.StickersArchivedInfo, stickerSet.title));
Components/StickerSetBulletinLayout.java:                titleTextView.setText(LocaleController.getString("RemovedFromFavorites", R.string.RemovedFromFavorites));
Components/StickerSetBulletinLayout.java:                titleTextView.setText(LocaleController.getString("AddedToFavorites", R.string.AddedToFavorites));
Components/StickerSetBulletinLayout.java:                titleTextView.setText(LocaleController.getString("RemovedFromRecent", R.string.RemovedFromRecent));
Components/Switch.java:        //info.setContentDescription(isChecked ? LocaleController.getString("NotificationsOn", R.string.NotificationsOn) : LocaleController.getString("NotificationsOff", R.string.NotificationsOff));
Components/TermsOfServiceView.java:        titleTextView.setText(LocaleController.getString("PrivacyPolicyAndTerms", R.string.PrivacyPolicyAndTerms));
Components/TermsOfServiceView.java:        declineTextView.setText(LocaleController.getString("Decline", R.string.Decline).toUpperCase());
Components/TermsOfServiceView.java:            builder.setTitle(LocaleController.getString("TermsOfService", R.string.TermsOfService));
Components/TermsOfServiceView.java:            builder.setPositiveButton(LocaleController.getString("DeclineDeactivate", R.string.DeclineDeactivate), (dialog, which) -> {
Components/TermsOfServiceView.java:                builder12.setMessage(LocaleController.getString("TosDeclineDeleteAccount", R.string.TosDeclineDeleteAccount));
Components/TermsOfServiceView.java:                builder12.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/TermsOfServiceView.java:                builder12.setPositiveButton(LocaleController.getString("Deactivate", R.string.Deactivate), (dialogInterface, i) -> {
Components/TermsOfServiceView.java:                            String errorText = LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred);
Components/TermsOfServiceView.java:                            builder1.setTitle(LocaleController.getString("AppName", R.string.AppName));
Components/TermsOfServiceView.java:                            builder1.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/TermsOfServiceView.java:                builder12.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/TermsOfServiceView.java:            builder.setNegativeButton(LocaleController.getString("Back", R.string.Back), null);
Components/TermsOfServiceView.java:            builder.setMessage(LocaleController.getString("TosUpdateDecline", R.string.TosUpdateDecline));
Components/TermsOfServiceView.java:        acceptTextView.setText(LocaleController.getString("Accept", R.string.Accept));
Components/TermsOfServiceView.java:                builder.setTitle(LocaleController.getString("TosAgeTitle", R.string.TosAgeTitle));
Components/TermsOfServiceView.java:                builder.setPositiveButton(LocaleController.getString("Agree", R.string.Agree), (dialog, which) -> accept());
Components/TermsOfServiceView.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/TermsOfServiceView.java:                builder.setMessage(LocaleController.formatString("TosAgeText", R.string.TosAgeText, LocaleController.formatPluralString("Years", currentTos.min_age_confirm)));
Components/ThemeEditorView.java:                searchEditText.setHint(LocaleController.getString("Search", R.string.Search));
Components/ThemeEditorView.java:                                searchEmptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
Components/ThemeEditorView.java:                                searchEmptyView.setText(LocaleController.getString("NoChats", R.string.NoChats));
Components/ThemeEditorView.java:            searchEmptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
Components/ThemeEditorView.java:            closeButton.setText(LocaleController.getString("CloseEditor", R.string.CloseEditor).toUpperCase());
Components/ThemeEditorView.java:            saveButton.setText(LocaleController.getString("SaveTheme", R.string.SaveTheme).toUpperCase());
Components/ThemeEditorView.java:            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
Components/ThemeEditorView.java:            defaultButtom.setText(LocaleController.getString("Default", R.string.Default).toUpperCase());
Components/ThemeEditorView.java:            saveButton.setText(LocaleController.getString("Save", R.string.Save).toUpperCase());
Components/TimerDrawable.java:                timeString += LocaleController.getString("SecretChatTimerSeconds", R.string.SecretChatTimerSeconds);
Components/TimerDrawable.java:                timeString += LocaleController.getString("SecretChatTimerMinutes", R.string.SecretChatTimerMinutes);
Components/TimerDrawable.java:                timeString += LocaleController.getString("SecretChatTimerHours", R.string.SecretChatTimerHours);
Components/TimerDrawable.java:                timeString += LocaleController.getString("SecretChatTimerDays", R.string.SecretChatTimerDays);
Components/TimerDrawable.java:                timeString += LocaleController.getString("SecretChatTimerWeeks", R.string.SecretChatTimerWeeks);
Components/TrendingStickersLayout.java:        searchView.setHint(LocaleController.getString("SearchTrendingStickersHint", R.string.SearchTrendingStickersHint));
Components/TrendingStickersLayout.java:                    ((GraySectionCell) holder.itemView).setText(LocaleController.getString("OtherStickers", R.string.OtherStickers));
Components/UndoView.java:        undoTextView.setText(LocaleController.getString("Undo", R.string.Undo));
Components/UndoView.java:        undoTextView.setText(LocaleController.getString("Undo", R.string.Undo).toUpperCase());
Components/UndoView.java:                infoText = LocaleController.getString("ReportChatSent", R.string.ReportChatSent);
Components/UndoView.java:                subInfoText = LocaleController.formatString("ReportSentInfo", R.string.ReportSentInfo);
Components/UndoView.java:                infoText = AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupInvitedUser", R.string.VoipGroupInvitedUser, UserObject.getFirstName(user)));
Components/UndoView.java:                infoText = AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupUserChanged", R.string.VoipGroupUserChanged, name));
Components/UndoView.java:                infoText = LocaleController.getString("VoipGroupCopyInviteLinkCopied", R.string.VoipGroupCopyInviteLinkCopied);
Components/UndoView.java:                infoText = AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupUserCantNowSpeak", R.string.VoipGroupUserCantNowSpeak, name));
Components/UndoView.java:                infoText = AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupUserCantNowSpeakForYou", R.string.VoipGroupUserCantNowSpeakForYou, name));
Components/UndoView.java:                infoText = AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupUserCanNowSpeak", R.string.VoipGroupUserCanNowSpeak, name));
Components/UndoView.java:                    infoText = AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupYouCanNowSpeakIn", R.string.VoipGroupYouCanNowSpeakIn, chat.title));
Components/UndoView.java:                    infoText = AndroidUtilities.replaceTags(LocaleController.getString("VoipGroupYouCanNowSpeak", R.string.VoipGroupYouCanNowSpeak));
Components/UndoView.java:                infoText = AndroidUtilities.replaceTags(LocaleController.getString("VoipGroupAudioRecordStarted", R.string.VoipGroupAudioRecordStarted));
Components/UndoView.java:                String text = LocaleController.getString("VoipGroupAudioRecordSaved", R.string.VoipGroupAudioRecordSaved);
Components/UndoView.java:                infoText = AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupUserCanNowSpeakForYou", R.string.VoipGroupUserCanNowSpeakForYou, name));
Components/UndoView.java:                infoText = AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupRemovedFromGroup", R.string.VoipGroupRemovedFromGroup, name));
Components/UndoView.java:                    infoText = AndroidUtilities.replaceTags(LocaleController.formatString("EditAdminTransferChannelToast", R.string.EditAdminTransferChannelToast, UserObject.getFirstName(user)));
Components/UndoView.java:                    infoText = AndroidUtilities.replaceTags(LocaleController.formatString("EditAdminTransferGroupToast", R.string.EditAdminTransferGroupToast, UserObject.getFirstName(user)));
Components/UndoView.java:                infoText = LocaleController.formatString("NowInContacts", R.string.NowInContacts, UserObject.getFirstName(user));
Components/UndoView.java:                        infoText = LocaleController.getString("MainProfilePhotoSetHint", R.string.MainProfilePhotoSetHint);
Components/UndoView.java:                        infoText = LocaleController.getString("MainProfileVideoSetHint", R.string.MainProfileVideoSetHint);
Components/UndoView.java:                            infoText = LocaleController.getString("MainChannelProfilePhotoSetHint", R.string.MainChannelProfilePhotoSetHint);
Components/UndoView.java:                            infoText = LocaleController.getString("MainChannelProfileVideoSetHint", R.string.MainChannelProfileVideoSetHint);
Components/UndoView.java:                            infoText = LocaleController.getString("MainGroupProfilePhotoSetHint", R.string.MainGroupProfilePhotoSetHint);
Components/UndoView.java:                            infoText = LocaleController.getString("MainGroupProfileVideoSetHint", R.string.MainGroupProfileVideoSetHint);
Components/UndoView.java:                infoText = LocaleController.getString("ChatWasMovedToMainList", R.string.ChatWasMovedToMainList);
Components/UndoView.java:                infoText = LocaleController.getString("ArchiveHidden", R.string.ArchiveHidden);
Components/UndoView.java:                subInfoText = LocaleController.getString("ArchiveHiddenInfo", R.string.ArchiveHiddenInfo);
Components/UndoView.java:                infoText = LocaleController.getString("QuizWellDone", R.string.QuizWellDone);
Components/UndoView.java:                subInfoText = LocaleController.getString("QuizWellDoneInfo", R.string.QuizWellDoneInfo);
Components/UndoView.java:                infoText = LocaleController.getString("QuizWrongAnswer", R.string.QuizWrongAnswer);
Components/UndoView.java:                subInfoText = LocaleController.getString("QuizWrongAnswerInfo", R.string.QuizWrongAnswerInfo);
Components/UndoView.java:                infoText = LocaleController.getString("ArchivePinned", R.string.ArchivePinned);
Components/UndoView.java:                    subInfoText = LocaleController.getString("ArchivePinnedInfo", R.string.ArchivePinnedInfo);
Components/UndoView.java:                            infoText = AndroidUtilities.replaceTags(LocaleController.formatString("FilterUserAddedToExisting", R.string.FilterUserAddedToExisting, UserObject.getFirstName(user), filter.name));
Components/UndoView.java:                            infoText = AndroidUtilities.replaceTags(LocaleController.formatString("FilterUserRemovedFrom", R.string.FilterUserRemovedFrom, UserObject.getFirstName(user), filter.name));
Components/UndoView.java:                            infoText = AndroidUtilities.replaceTags(LocaleController.formatString("FilterChatAddedToExisting", R.string.FilterChatAddedToExisting, chat.title, filter.name));
Components/UndoView.java:                            infoText = AndroidUtilities.replaceTags(LocaleController.formatString("FilterChatRemovedFrom", R.string.FilterChatRemovedFrom, chat.title, filter.name));
Components/UndoView.java:                        infoText = AndroidUtilities.replaceTags(LocaleController.formatString("FilterChatsAddedToExisting", R.string.FilterChatsAddedToExisting, LocaleController.formatPluralString("Chats", (Integer) infoObject), filter.name));
Components/UndoView.java:                        infoText = AndroidUtilities.replaceTags(LocaleController.formatString("FilterChatsRemovedFrom", R.string.FilterChatsRemovedFrom, LocaleController.formatPluralString("Chats", (Integer) infoObject), filter.name));
Components/UndoView.java:                    infoText = LocaleController.getString("ChatArchived", R.string.ChatArchived);
Components/UndoView.java:                    infoText = LocaleController.getString("ChatsArchived", R.string.ChatsArchived);
Components/UndoView.java:                    subInfoText = LocaleController.getString("ChatArchivedInfo", R.string.ChatArchivedInfo);
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("BroadcastGroupConvertSuccess", R.string.BroadcastGroupConvertSuccess));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("GigagroupConvertCancelHint", R.string.GigagroupConvertCancelHint));
Components/UndoView.java:                infoTextView.setText(LocaleController.formatString("AutoDeleteHintOnText", R.string.AutoDeleteHintOnText, time));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("AutoDeleteHintOffText", R.string.AutoDeleteHintOffText));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ImportMutualError", R.string.ImportMutualError));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ImportNotAdmin", R.string.ImportNotAdmin));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ImportedInfo", R.string.ImportedInfo));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("AudioSpeedNormal", R.string.AudioSpeedNormal));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("AudioSpeedFast", R.string.AudioSpeedFast));
Components/UndoView.java:                    infoTextView.setText(LocaleController.getString("PhoneCopied", R.string.PhoneCopied));
Components/UndoView.java:                    infoTextView.setText(LocaleController.getString("UsernameCopied", R.string.UsernameCopied));
Components/UndoView.java:                    infoTextView.setText(LocaleController.getString("HashtagCopied", R.string.HashtagCopied));
Components/UndoView.java:                    infoTextView.setText(LocaleController.getString("MessageCopied", R.string.MessageCopied));
Components/UndoView.java:                    infoTextView.setText(LocaleController.getString("LinkCopied", R.string.LinkCopied));
Components/UndoView.java:                    infoTextView.setText(LocaleController.getString("TextCopied", R.string.TextCopied));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ChannelNotifyMembersInfoOn", R.string.ChannelNotifyMembersInfoOn));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ChannelNotifyMembersInfoOff", R.string.ChannelNotifyMembersInfoOff));
Components/UndoView.java:                        infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("InvLinkToSavedMessages", R.string.InvLinkToSavedMessages)));
Components/UndoView.java:                            infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("InvLinkToGroup", R.string.InvLinkToGroup, chat.title)));
Components/UndoView.java:                            infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("InvLinkToUser", R.string.InvLinkToUser, UserObject.getFirstName(user))));
Components/UndoView.java:                    infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("InvLinkToChats", R.string.InvLinkToChats, LocaleController.formatPluralString("Chats", amount))));
Components/UndoView.java:                            infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("FwdMessageToSavedMessages", R.string.FwdMessageToSavedMessages)));
Components/UndoView.java:                            infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("FwdMessagesToSavedMessages", R.string.FwdMessagesToSavedMessages)));
Components/UndoView.java:                                infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("FwdMessageToGroup", R.string.FwdMessageToGroup, chat.title)));
Components/UndoView.java:                                infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("FwdMessagesToGroup", R.string.FwdMessagesToGroup, chat.title)));
Components/UndoView.java:                                infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("FwdMessageToUser", R.string.FwdMessageToUser, UserObject.getFirstName(user))));
Components/UndoView.java:                                infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("FwdMessagesToUser", R.string.FwdMessagesToUser, UserObject.getFirstName(user))));
Components/UndoView.java:                        infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("FwdMessageToChats", R.string.FwdMessageToChats, LocaleController.formatPluralString("Chats", amount))));
Components/UndoView.java:                        infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("FwdMessagesToChats", R.string.FwdMessagesToChats, LocaleController.formatPluralString("Chats", amount))));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ProximityAlertSet", R.string.ProximityAlertSet));
Components/UndoView.java:                    subinfoTextView.setText(LocaleController.formatString("ProximityAlertSetInfoUser", R.string.ProximityAlertSetInfoUser, UserObject.getFirstName(user), LocaleController.formatDistance(radius, 2)));
Components/UndoView.java:                    subinfoTextView.setText(LocaleController.formatString("ProximityAlertSetInfoGroup2", R.string.ProximityAlertSetInfoGroup2, LocaleController.formatDistance(radius, 2)));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ProximityAlertCancelled", R.string.ProximityAlertCancelled));
Components/UndoView.java:            infoTextView.setText(LocaleController.getString("AuthAnotherClientOk", R.string.AuthAnotherClientOk));
Components/UndoView.java:            undoTextView.setText(LocaleController.getString("Open", R.string.Open).toUpperCase());
Components/UndoView.java:            infoTextView.setText(LocaleController.getString("FilterAvailableTitle", R.string.FilterAvailableTitle));
Components/UndoView.java:            String text = LocaleController.getString("FilterAvailableText", R.string.FilterAvailableText);
Components/UndoView.java:                infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("DiceInfo2", R.string.DiceInfo2)));
Components/UndoView.java:                    infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.getString("DartInfo", R.string.DartInfo)));
Components/UndoView.java:                        infoTextView.setText(Emoji.replaceEmoji(LocaleController.formatString("DiceEmojiInfo", R.string.DiceEmojiInfo, emoji), infoTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14), false));
Components/UndoView.java:            undoTextView.setText(LocaleController.getString("SendDice", R.string.SendDice));
Components/UndoView.java:            infoTextView.setText(LocaleController.getString("ColorThemeChanged", R.string.ColorThemeChanged));
Components/UndoView.java:            String text = LocaleController.getString("ColorThemeChangedInfo", R.string.ColorThemeChangedInfo);
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ChatArchived", R.string.ChatArchived));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("ChatsArchived", R.string.ChatsArchived));
Components/UndoView.java:                infoTextView.setText(LocaleController.getString("HistoryClearedUndo", R.string.HistoryClearedUndo));
Components/UndoView.java:                        infoTextView.setText(LocaleController.getString("ChannelDeletedUndo", R.string.ChannelDeletedUndo));
Components/UndoView.java:                        infoTextView.setText(LocaleController.getString("GroupDeletedUndo", R.string.GroupDeletedUndo));
Components/UndoView.java:                    infoTextView.setText(LocaleController.getString("ChatDeletedUndo", R.string.ChatDeletedUndo));
Components/UpdateAppAlertDialog.java:        setTitle(LocaleController.getString("UpdateTelegram", R.string.UpdateTelegram));
Components/UpdateAppAlertDialog.java:        setPositiveButton(LocaleController.getString("UpdateNow", R.string.UpdateNow), (dialog, which) -> {
Components/UpdateAppAlertDialog.java:        setNeutralButton(LocaleController.getString("Later", R.string.Later), (dialog, which) -> {
Components/UsersAlertBase.java:        emptyView.title.setText(LocaleController.getString("NoResult", R.string.NoResult));
Components/UsersAlertBase.java:        emptyView.subtitle.setText(LocaleController.getString("SearchEmptyViewFilteredSubtitle2", R.string.SearchEmptyViewFilteredSubtitle2));
Components/UsersAlertBase.java:            searchEditText.setHint(LocaleController.getString("VoipGroupSearchMembers", R.string.VoipGroupSearchMembers));
Components/voip/AcceptDeclineView.java:        String acceptStr = LocaleController.getString("AcceptCall", R.string.AcceptCall);
Components/voip/AcceptDeclineView.java:        String declineStr = LocaleController.getString("DeclineCall", R.string.DeclineCall);
Components/voip/AcceptDeclineView.java:        String retryStr = LocaleController.getString("RetryCall", R.string.RetryCall);
Components/voip/VoIPHelper.java:					.setTitle(LocaleController.getString("VoipFailed", R.string.VoipFailed))
Components/voip/VoIPHelper.java:					.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("CallNotAvailable", R.string.CallNotAvailable,
Components/voip/VoIPHelper.java:					.setPositiveButton(LocaleController.getString("OK", R.string.OK), null)
Components/voip/VoIPHelper.java:					.setTitle(isAirplaneMode ? LocaleController.getString("VoipOfflineAirplaneTitle", R.string.VoipOfflineAirplaneTitle) : LocaleController.getString("VoipOfflineTitle", R.string.VoipOfflineTitle))
Components/voip/VoIPHelper.java:					.setMessage(isAirplaneMode ? LocaleController.getString("VoipOfflineAirplane", R.string.VoipOfflineAirplane) : LocaleController.getString("VoipOffline", R.string.VoipOffline))
Components/voip/VoIPHelper.java:					.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/voip/VoIPHelper.java:					bldr.setNeutralButton(LocaleController.getString("VoipOfflineOpenSettings", R.string.VoipOfflineOpenSettings), (dialog, which) -> activity.startActivity(settingsIntent));
Components/voip/VoIPHelper.java:					.setTitle(isAirplaneMode ? LocaleController.getString("VoipOfflineAirplaneTitle", R.string.VoipOfflineAirplaneTitle) : LocaleController.getString("VoipOfflineTitle", R.string.VoipOfflineTitle))
Components/voip/VoIPHelper.java:					.setMessage(isAirplaneMode ? LocaleController.getString("VoipGroupOfflineAirplane", R.string.VoipGroupOfflineAirplane) : LocaleController.getString("VoipGroupOffline", R.string.VoipGroupOffline))
Components/voip/VoIPHelper.java:					.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
Components/voip/VoIPHelper.java:					bldr.setNeutralButton(LocaleController.getString("VoipOfflineOpenSettings", R.string.VoipOfflineOpenSettings), (dialog, which) -> activity.startActivity(settingsIntent));
Components/voip/VoIPHelper.java:						key2 = R.string.VoipOngoingAlert;
Components/voip/VoIPHelper.java:						key2 = R.string.VoipOngoingAlert2;
Components/voip/VoIPHelper.java:						key2 = R.string.VoipOngoingChatAlert2;
Components/voip/VoIPHelper.java:						key2 = R.string.VoipOngoingChatAlert;
Components/voip/VoIPHelper.java:						.setTitle(callerId < 0 ? LocaleController.getString("VoipOngoingChatAlertTitle", R.string.VoipOngoingChatAlertTitle) : LocaleController.getString("VoipOngoingAlertTitle", R.string.VoipOngoingAlertTitle))
Components/voip/VoIPHelper.java:						.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
Components/voip/VoIPHelper.java:						.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null)
Components/voip/VoIPHelper.java:					.setTitle(LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat))
Components/voip/VoIPHelper.java:					.setMessage(LocaleController.getString("VoipGroupJoinAnonymouseAlert", R.string.VoipGroupJoinAnonymouseAlert))
Components/voip/VoIPHelper.java:					.setPositiveButton(LocaleController.getString("VoipChatJoin", R.string.VoipChatJoin), (dialog, which) -> doInitiateCall(user, chat, hash, peer, false, videoCall, canVideoCall, createCall, activity, fragment, accountInstance, false, false))
Components/voip/VoIPHelper.java:					.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null)
Components/voip/VoIPHelper.java:					.setTitle(LocaleController.getString("AppName", R.string.AppName))
Components/voip/VoIPHelper.java:					.setMessage(code == 102 ? LocaleController.getString("VoipNeedMicCameraPermission", R.string.VoipNeedMicCameraPermission) : LocaleController.getString("VoipNeedMicPermission", R.string.VoipNeedMicPermission))
Components/voip/VoIPHelper.java:					.setPositiveButton(LocaleController.getString("OK", R.string.OK), null)
Components/voip/VoIPHelper.java:					.setNegativeButton(LocaleController.getString("Settings", R.string.Settings), (dialog, which) -> {
Components/voip/VoIPHelper.java:		text.setText(LocaleController.getString("VoipRateCallAlert", R.string.VoipRateCallAlert));
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallVideoDistorted", R.string.RateCallVideoDistorted);
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallVideoPixelated", R.string.RateCallVideoPixelated);
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallEcho", R.string.RateCallEcho);
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallNoise", R.string.RateCallNoise);
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallInterruptions", R.string.RateCallInterruptions);
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallDistorted", R.string.RateCallDistorted);
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallSilentLocal", R.string.RateCallSilentLocal);
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallSilentRemote", R.string.RateCallSilentRemote);
Components/voip/VoIPHelper.java:					label = LocaleController.getString("RateCallDropped", R.string.RateCallDropped);
Components/voip/VoIPHelper.java:		commentBox.setHint(LocaleController.getString("VoipFeedbackCommentHint", R.string.VoipFeedbackCommentHint));
Components/voip/VoIPHelper.java:		checkbox.setText(LocaleController.getString("CallReportIncludeLogs", R.string.CallReportIncludeLogs), null, true, false);
Components/voip/VoIPHelper.java:		logsText.setText(LocaleController.getString("CallReportLogsExplain", R.string.CallReportLogsExplain));
Components/voip/VoIPHelper.java:				.setTitle(LocaleController.getString("CallMessageReportProblem", R.string.CallMessageReportProblem))
Components/voip/VoIPHelper.java:				.setPositiveButton(LocaleController.getString("Send", R.string.Send), (dialog, which) -> {
Components/voip/VoIPHelper.java:				.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null)
Components/voip/VoIPHelper.java:			/*commentBox.setHint(rating<4 ? LocaleController.getString("CallReportHint", R.string.CallReportHint) : LocaleController.getString("VoipFeedbackCommentHint", R.string.VoipFeedbackCommentHint));
Components/voip/VoIPHelper.java:			((TextView) btn).setText((rating < 4 ? LocaleController.getString("Next", R.string.Next) : LocaleController.getString("Send", R.string.Send)).toUpperCase());
Components/voip/VoIPHelper.java:						Toast.makeText(context, LocaleController.getString("CallReportSent", R.string.CallReportSent), Toast.LENGTH_LONG).show();
Components/voip/VoIPHelper.java:				//text.setText(LocaleController.getString("CallReportHint", R.string.CallReportHint));
Components/voip/VoIPHelper.java:				alert.setTitle(LocaleController.getString("CallReportHint", R.string.CallReportHint));
Components/voip/VoIPHelper.java:				((TextView) btn).setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
Components/voip/VoIPHelper.java:				.setTitle(LocaleController.getString("DebugMenuCallSettings", R.string.DebugMenuCallSettings))
Components/voip/VoIPHelper.java:				builder.setTitle(LocaleController.getString("StartVoipChatTitle", R.string.StartVoipChatTitle));
Components/voip/VoIPHelper.java:					builder.setMessage(LocaleController.getString("VoipGroupEndedStartNew", R.string.VoipGroupEndedStartNew));
Components/voip/VoIPHelper.java:						builder.setMessage(LocaleController.getString("StartVoipChannelAlertText", R.string.StartVoipChannelAlertText));
Components/voip/VoIPHelper.java:						builder.setMessage(LocaleController.getString("StartVoipChatAlertText", R.string.StartVoipChatAlertText));
Components/voip/VoIPHelper.java:				builder.setPositiveButton(LocaleController.getString("Start", R.string.Start), (dialogInterface, i) -> {
Components/voip/VoIPHelper.java:				builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
Components/voip/VoIPPiPView.java:            closeIcon.setContentDescription(LocaleController.getString("Close", R.string.Close));
Components/voip/VoIPPiPView.java:            enlargeIcon.setContentDescription(LocaleController.getString("Open", R.string.Open));
Components/voip/VoIPStatusTextView.java:        SpannableStringBuilder ssb = new SpannableStringBuilder(LocaleController.getString("VoipReconnecting", R.string.VoipReconnecting));
Components/WallpaperUpdater.java:        builder.setTitle(LocaleController.getString("ChoosePhoto", R.string.ChoosePhoto), true);
Components/WallpaperUpdater.java:            items = new CharSequence[]{LocaleController.getString("ChooseTakePhoto", R.string.ChooseTakePhoto), LocaleController.getString("SelectFromGallery", R.string.SelectFromGallery), LocaleController.getString("SelectColor", R.string.SelectColor), LocaleController.getString("Default", R.string.Default)};
Components/WallpaperUpdater.java:            items = new CharSequence[]{LocaleController.getString("ChooseTakePhoto", R.string.ChooseTakePhoto), LocaleController.getString("SelectFromGallery", R.string.SelectFromGallery)};
ContactAddActivity.java:            actionBar.setTitle(LocaleController.getString("NewContact", R.string.NewContact));
ContactAddActivity.java:            actionBar.setTitle(LocaleController.getString("EditName", R.string.EditName));
ContactAddActivity.java:        doneButton = menu.addItem(done_button, LocaleController.getString("Done", R.string.Done).toUpperCase());
ContactAddActivity.java:        firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
ContactAddActivity.java:        lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
ContactAddActivity.java:                checkBoxCell.setText(LocaleController.formatString("SharePhoneNumberWith", R.string.SharePhoneNumberWith, UserObject.getFirstName(user)), "", true, false);
ContactAddActivity.java:            nameTextView.setText(LocaleController.getString("MobileHidden", R.string.MobileHidden));
ContactAddActivity.java:            infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("MobileHiddenExceptionInfo", R.string.MobileHiddenExceptionInfo, UserObject.getFirstName(user))));
ContactAddActivity.java:                infoTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("MobileVisibleInfo", R.string.MobileVisibleInfo, UserObject.getFirstName(user))));
ContactsActivity.java:                actionBar.setTitle(LocaleController.getString("SelectContact", R.string.SelectContact));
ContactsActivity.java:                    actionBar.setTitle(LocaleController.getString("NewSecretChat", R.string.NewSecretChat));
ContactsActivity.java:                    actionBar.setTitle(LocaleController.getString("NewMessageTitle", R.string.NewMessageTitle));
ContactsActivity.java:            actionBar.setTitle(LocaleController.getString("Contacts", R.string.Contacts));
ContactsActivity.java:               // emptyView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
ContactsActivity.java:        item.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
ContactsActivity.java:        item.setContentDescription(LocaleController.getString("Search", R.string.Search));
ContactsActivity.java:            sortItem.setContentDescription(LocaleController.getString("AccDescrContactSorting", R.string.AccDescrContactSorting));
ContactsActivity.java:        emptyView.title.setText(LocaleController.getString("NoResult", R.string.NoResult));
ContactsActivity.java:        emptyView.subtitle.setText(LocaleController.getString("SearchEmptyViewFilteredSubtitle2", R.string.SearchEmptyViewFilteredSubtitle2));
ContactsActivity.java:                        builder.setMessage(LocaleController.getString("InviteUser", R.string.InviteUser));
ContactsActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ContactsActivity.java:                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
ContactsActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ContactsActivity.java:            floatingButtonContainer.setContentDescription(LocaleController.getString("CreateNewContact", R.string.CreateNewContact));
ContactsActivity.java:                        BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("BotCantJoinGroups", R.string.BotCantJoinGroups)).show();
ContactsActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ContactsActivity.java:                        builder.setMessage(LocaleController.getString("AddBotAsAdmin", R.string.AddBotAsAdmin));
ContactsActivity.java:                        builder.setPositiveButton(LocaleController.getString("MakeAdmin", R.string.MakeAdmin), (dialogInterface, i) -> {
ContactsActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ContactsActivity.java:                        builder.setMessage(LocaleController.getString("CantAddBotAsAdmin", R.string.CantAddBotAsAdmin));
ContactsActivity.java:                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ContactsActivity.java:            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ContactsActivity.java:                message = String.format("%s\n\n%s", message, LocaleController.getString("AddToTheGroupForwardCount", R.string.AddToTheGroupForwardCount));
ContactsActivity.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> didSelectResult(user, false, finalEditText != null ? finalEditText.getText().toString() : "0"));
ContactsActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ContentPreviewViewer.java:                        items.add(LocaleController.getString("SendStickerPreview", R.string.SendStickerPreview));
ContentPreviewViewer.java:                        items.add(LocaleController.getString("Schedule", R.string.Schedule));
ContentPreviewViewer.java:                        items.add(LocaleController.formatString("ViewPackPreview", R.string.ViewPackPreview));
ContentPreviewViewer.java:                    items.add(inFavs ? LocaleController.getString("DeleteFromFavorites", R.string.DeleteFromFavorites) : LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
ContentPreviewViewer.java:                    items.add(LocaleController.getString("DeleteFromRecent", R.string.DeleteFromRecent));
ContentPreviewViewer.java:                    items.add(LocaleController.getString("SendGifPreview", R.string.SendGifPreview));
ContentPreviewViewer.java:                    items.add(LocaleController.getString("Schedule", R.string.Schedule));
ContentPreviewViewer.java:                        items.add(LocaleController.formatString("Delete", R.string.Delete));
ContentPreviewViewer.java:                        items.add(LocaleController.formatString("SaveToGIFs", R.string.SaveToGIFs));
CountrySelectActivity.java:        actionBar.setTitle(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
CountrySelectActivity.java:        item.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
CountrySelectActivity.java:        emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
DataAutoDownloadActivity.java:            actionBar.setTitle(LocaleController.getString("AutoDownloadOnMobileData", R.string.AutoDownloadOnMobileData));
DataAutoDownloadActivity.java:            actionBar.setTitle(LocaleController.getString("AutoDownloadOnWiFiData", R.string.AutoDownloadOnWiFiData));
DataAutoDownloadActivity.java:            actionBar.setTitle(LocaleController.getString("AutoDownloadOnRoamingData", R.string.AutoDownloadOnRoamingData));
DataAutoDownloadActivity.java:                        headerCell.setText(LocaleController.getString("AutoDownloadPhotosTitle", R.string.AutoDownloadPhotosTitle));
DataAutoDownloadActivity.java:                        headerCell.setText(LocaleController.getString("AutoDownloadVideosTitle", R.string.AutoDownloadVideosTitle));
DataAutoDownloadActivity.java:                        headerCell.setText(LocaleController.getString("AutoDownloadFilesTitle", R.string.AutoDownloadFilesTitle));
DataAutoDownloadActivity.java:                            cells[a].setTextAndCheck(LocaleController.getString("AutodownloadContacts", R.string.AutodownloadContacts), (currentPreset.mask[DownloadController.PRESET_NUM_CONTACT] & type) != 0, true);
DataAutoDownloadActivity.java:                            cells[a].setTextAndCheck(LocaleController.getString("AutodownloadPrivateChats", R.string.AutodownloadPrivateChats), (currentPreset.mask[DownloadController.PRESET_NUM_PM] & type) != 0, true);
DataAutoDownloadActivity.java:                            cells[a].setTextAndCheck(LocaleController.getString("AutodownloadGroupChats", R.string.AutodownloadGroupChats), (currentPreset.mask[DownloadController.PRESET_NUM_GROUP] & type) != 0, true);
DataAutoDownloadActivity.java:                            cells[a].setTextAndCheck(LocaleController.getString("AutodownloadChannels", R.string.AutodownloadChannels), (currentPreset.mask[DownloadController.PRESET_NUM_CHANNEL] & type) != 0, position != photosRow);
DataAutoDownloadActivity.java:                                    infoCell.setText(LocaleController.formatString("AutoDownloadPreloadVideoInfo", R.string.AutoDownloadPreloadVideoInfo, AndroidUtilities.formatFileSize(value)));
DataAutoDownloadActivity.java:                            sizeCell[0].setText(LocaleController.getString("AutoDownloadMaxVideoSize", R.string.AutoDownloadMaxVideoSize));
DataAutoDownloadActivity.java:                            checkCell[0].setTextAndCheck(LocaleController.getString("AutoDownloadPreloadVideo", R.string.AutoDownloadPreloadVideo), currentPreset.preloadVideo, false);
DataAutoDownloadActivity.java:                            infoCell.setText(LocaleController.formatString("AutoDownloadPreloadVideoInfo", R.string.AutoDownloadPreloadVideoInfo, AndroidUtilities.formatFileSize(currentPreset.sizes[index])));
DataAutoDownloadActivity.java:                            sizeCell[0].setText(LocaleController.getString("AutoDownloadMaxFileSize", R.string.AutoDownloadMaxFileSize));
DataAutoDownloadActivity.java:                            checkCell[0].setTextAndCheck(LocaleController.getString("AutoDownloadPreloadMusic", R.string.AutoDownloadPreloadMusic), currentPreset.preloadMusic, false);
DataAutoDownloadActivity.java:                            infoCell.setText(LocaleController.getString("AutoDownloadPreloadMusicInfo", R.string.AutoDownloadPreloadMusicInfo));
DataAutoDownloadActivity.java:                    textView.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
DataAutoDownloadActivity.java:                    textView.setText(LocaleController.getString("Save", R.string.Save).toUpperCase());
DataAutoDownloadActivity.java:                        view.setTextAndCheck(LocaleController.getString("AutoDownloadMedia", R.string.AutoDownloadMedia), typePreset.enabled, false);
DataAutoDownloadActivity.java:                        view.setText(LocaleController.getString("AutoDownloadDataUsage", R.string.AutoDownloadDataUsage));
DataAutoDownloadActivity.java:                        view.setText(LocaleController.getString("AutoDownloadTypes", R.string.AutoDownloadTypes));
DataAutoDownloadActivity.java:                        text = LocaleController.getString("AutoDownloadPhotos", R.string.AutoDownloadPhotos);
DataAutoDownloadActivity.java:                        text = LocaleController.getString("AutoDownloadVideos", R.string.AutoDownloadVideos);
DataAutoDownloadActivity.java:                        text = LocaleController.getString("AutoDownloadFiles", R.string.AutoDownloadFiles);
DataAutoDownloadActivity.java:                                    builder.append(LocaleController.getString("AutoDownloadContacts", R.string.AutoDownloadContacts));
DataAutoDownloadActivity.java:                                    builder.append(LocaleController.getString("AutoDownloadPm", R.string.AutoDownloadPm));
DataAutoDownloadActivity.java:                                    builder.append(LocaleController.getString("AutoDownloadGroups", R.string.AutoDownloadGroups));
DataAutoDownloadActivity.java:                                    builder.append(LocaleController.getString("AutoDownloadChannels", R.string.AutoDownloadChannels));
DataAutoDownloadActivity.java:                            builder.append(LocaleController.getString("AutoDownloadOnAllChats", R.string.AutoDownloadOnAllChats));
DataAutoDownloadActivity.java:                            builder.append(LocaleController.formatString("AutoDownloadUpToOnAllChats", R.string.AutoDownloadUpToOnAllChats, AndroidUtilities.formatFileSize(maxSize)));
DataAutoDownloadActivity.java:                        builder.append(LocaleController.getString("AutoDownloadOff", R.string.AutoDownloadOff));
DataAutoDownloadActivity.java:                            builder = new StringBuilder(LocaleController.formatString("AutoDownloadOnFor", R.string.AutoDownloadOnFor, builder.toString()));
DataAutoDownloadActivity.java:                            builder = new StringBuilder(LocaleController.formatString("AutoDownloadOnUpToFor", R.string.AutoDownloadOnUpToFor, AndroidUtilities.formatFileSize(maxSize), builder.toString()));
DataAutoDownloadActivity.java:                        view.setText(LocaleController.getString("AutoDownloadAudioInfo", R.string.AutoDownloadAudioInfo));
DataAutoDownloadActivity.java:                                view.setText(LocaleController.getString("AutoDownloadOnMobileDataInfo", R.string.AutoDownloadOnMobileDataInfo));
DataAutoDownloadActivity.java:                                view.setText(LocaleController.getString("AutoDownloadOnWiFiDataInfo", R.string.AutoDownloadOnWiFiDataInfo));
DataAutoDownloadActivity.java:                                view.setText(LocaleController.getString("AutoDownloadOnRoamingDataInfo", R.string.AutoDownloadOnRoamingDataInfo));
DataAutoDownloadActivity.java:                presetsStr[i] = LocaleController.getString("AutoDownloadLow", R.string.AutoDownloadLow);
DataAutoDownloadActivity.java:                presetsStr[i] = LocaleController.getString("AutoDownloadMedium", R.string.AutoDownloadMedium);
DataAutoDownloadActivity.java:                presetsStr[i] = LocaleController.getString("AutoDownloadHigh", R.string.AutoDownloadHigh);
DataAutoDownloadActivity.java:                presetsStr[i] = LocaleController.getString("AutoDownloadCustom", R.string.AutoDownloadCustom);
DataSettingsActivity.java:        actionBar.setTitle(LocaleController.getString("DataSettings", R.string.DataSettings));
DataSettingsActivity.java:                builder.setTitle(LocaleController.getString("ResetAutomaticMediaDownloadAlertTitle", R.string.ResetAutomaticMediaDownloadAlertTitle));
DataSettingsActivity.java:                builder.setMessage(LocaleController.getString("ResetAutomaticMediaDownloadAlert", R.string.ResetAutomaticMediaDownloadAlert));
DataSettingsActivity.java:                builder.setPositiveButton(LocaleController.getString("Reset", R.string.Reset), (dialogInterface, i) -> {
DataSettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DataSettingsActivity.java:                                LocaleController.getString("UseLessDataNever", R.string.UseLessDataNever),
DataSettingsActivity.java:                                LocaleController.getString("UseLessDataOnRoaming", R.string.UseLessDataOnRoaming),
DataSettingsActivity.java:                                LocaleController.getString("UseLessDataOnMobile", R.string.UseLessDataOnMobile),
DataSettingsActivity.java:                                LocaleController.getString("UseLessDataAlways", R.string.UseLessDataAlways)},
DataSettingsActivity.java:                        LocaleController.getString("VoipUseLessData", R.string.VoipUseLessData), selected, (dialog, which) -> {
DataSettingsActivity.java:                builder.setTitle(LocaleController.getString("StoragePath", R.string.StoragePath));
DataSettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DataSettingsActivity.java:                builder.setTitle(LocaleController.getString("AreYouSureClearDraftsTitle", R.string.AreYouSureClearDraftsTitle));
DataSettingsActivity.java:                builder.setMessage(LocaleController.getString("AreYouSureClearDrafts", R.string.AreYouSureClearDrafts));
DataSettingsActivity.java:                builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
DataSettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DataSettingsActivity.java:                        textCell.setText(LocaleController.getString("StorageUsage", R.string.StorageUsage), true);
DataSettingsActivity.java:                                value = LocaleController.getString("UseLessDataNever", R.string.UseLessDataNever);
DataSettingsActivity.java:                                value = LocaleController.getString("UseLessDataOnMobile", R.string.UseLessDataOnMobile);
DataSettingsActivity.java:                                value = LocaleController.getString("UseLessDataOnRoaming", R.string.UseLessDataOnRoaming);
DataSettingsActivity.java:                                value = LocaleController.getString("UseLessDataAlways", R.string.UseLessDataAlways);
DataSettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("VoipUseLessData", R.string.VoipUseLessData), value, true);
DataSettingsActivity.java:                        textCell.setText(LocaleController.getString("NetworkUsage", R.string.NetworkUsage), storageNumRow != -1);
DataSettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("StoragePath", R.string.StoragePath), dir, false);
DataSettingsActivity.java:                        textCell.setText(LocaleController.getString("ProxySettings", R.string.ProxySettings), false);
DataSettingsActivity.java:                        textCell.setText(LocaleController.getString("ResetAutomaticMediaDownload", R.string.ResetAutomaticMediaDownload), false);
DataSettingsActivity.java:                        textCell.setText(LocaleController.getString("VoipQuickReplies", R.string.VoipQuickReplies), false);
DataSettingsActivity.java:                        textCell.setText(LocaleController.getString("PrivacyDeleteCloudDrafts", R.string.PrivacyDeleteCloudDrafts), false);
DataSettingsActivity.java:                        headerCell.setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
DataSettingsActivity.java:                        headerCell.setText(LocaleController.getString("DataUsage", R.string.DataUsage));
DataSettingsActivity.java:                        headerCell.setText(LocaleController.getString("Calls", R.string.Calls));
DataSettingsActivity.java:                        headerCell.setText(LocaleController.getString("Proxy", R.string.Proxy));
DataSettingsActivity.java:                        headerCell.setText(LocaleController.getString("Streaming", R.string.Streaming));
DataSettingsActivity.java:                        headerCell.setText(LocaleController.getString("AutoplayMedia", R.string.AutoplayMedia));
DataSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("EnableStreaming", R.string.EnableStreaming), SharedConfig.streamMedia, enableAllStreamRow != -1);
DataSettingsActivity.java:                        //checkCell.setTextAndCheck(LocaleController.getString("CacheStreamFile", R.string.CacheStreamFile), SharedConfig.saveStreamMedia, true);
DataSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("AutoplayGIF", R.string.AutoplayGIF), SharedConfig.autoplayGifs, true);
DataSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("AutoplayVideo", R.string.AutoplayVideo), SharedConfig.autoplayVideo, false);
DataSettingsActivity.java:                        cell.setText(LocaleController.getString("EnableAllStreamingInfo", R.string.EnableAllStreamingInfo));
DataSettingsActivity.java:                        text = LocaleController.getString("WhenUsingMobileData", R.string.WhenUsingMobileData);
DataSettingsActivity.java:                        text = LocaleController.getString("WhenConnectedOnWiFi", R.string.WhenConnectedOnWiFi);
DataSettingsActivity.java:                        text = LocaleController.getString("WhenRoaming", R.string.WhenRoaming);
DataSettingsActivity.java:                            builder.append(LocaleController.getString("AutoDownloadPhotosOn", R.string.AutoDownloadPhotosOn));
DataSettingsActivity.java:                            builder.append(LocaleController.getString("AutoDownloadVideosOn", R.string.AutoDownloadVideosOn));
DataSettingsActivity.java:                            builder.append(LocaleController.getString("AutoDownloadFilesOn", R.string.AutoDownloadFilesOn));
DataSettingsActivity.java:                        builder.append(LocaleController.getString("NoMediaAutoDownload", R.string.NoMediaAutoDownload));
DataUsageActivity.java:        actionBar.setTitle(LocaleController.getString("NetworkUsage", R.string.NetworkUsage));
DataUsageActivity.java:                    builder.setTitle(LocaleController.getString("ResetStatisticsAlertTitle", R.string.ResetStatisticsAlertTitle));
DataUsageActivity.java:                    builder.setMessage(LocaleController.getString("ResetStatisticsAlert", R.string.ResetStatisticsAlert));
DataUsageActivity.java:                    builder.setPositiveButton(LocaleController.getString("Reset", R.string.Reset), (dialogInterface, i) -> {
DataUsageActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DataUsageActivity.java:        scrollSlidingTextTabStrip.addTextTab(0, LocaleController.getString("NetworkUsageMobileTab", R.string.NetworkUsageMobileTab));
DataUsageActivity.java:        scrollSlidingTextTabStrip.addTextTab(1, LocaleController.getString("NetworkUsageWiFiTab", R.string.NetworkUsageWiFiTab));
DataUsageActivity.java:        scrollSlidingTextTabStrip.addTextTab(2, LocaleController.getString("NetworkUsageRoamingTab", R.string.NetworkUsageRoamingTab));
DataUsageActivity.java:                        textCell.setText(LocaleController.getString("ResetStatistics", R.string.ResetStatistics), false);
DataUsageActivity.java:                            textCell.setTextAndValue(LocaleController.getString("OutgoingCalls", R.string.OutgoingCalls), String.format("%d", StatsController.getInstance(currentAccount).getSentItemsCount(currentType, type)), true);
DataUsageActivity.java:                            textCell.setTextAndValue(LocaleController.getString("IncomingCalls", R.string.IncomingCalls), String.format("%d", StatsController.getInstance(currentAccount).getRecivedItemsCount(currentType, type)), true);
DataUsageActivity.java:                            textCell.setTextAndValue(LocaleController.getString("CallsTotalTime", R.string.CallsTotalTime), time, false);
DataUsageActivity.java:                            textCell.setTextAndValue(LocaleController.getString("CountSent", R.string.CountSent), String.format("%d", StatsController.getInstance(currentAccount).getSentItemsCount(currentType, type)), true);
DataUsageActivity.java:                            textCell.setTextAndValue(LocaleController.getString("CountReceived", R.string.CountReceived), String.format("%d", StatsController.getInstance(currentAccount).getRecivedItemsCount(currentType, type)), true);
DataUsageActivity.java:                            textCell.setTextAndValue(LocaleController.getString("BytesSent", R.string.BytesSent), AndroidUtilities.formatFileSize(StatsController.getInstance(currentAccount).getSentBytesCount(currentType, type)), true);
DataUsageActivity.java:                            textCell.setTextAndValue(LocaleController.getString("BytesReceived", R.string.BytesReceived), AndroidUtilities.formatFileSize(StatsController.getInstance(currentAccount).getReceivedBytesCount(currentType, type)), position == callsBytesReceivedRow);
DataUsageActivity.java:                        headerCell.setText(LocaleController.getString("TotalDataUsage", R.string.TotalDataUsage));
DataUsageActivity.java:                        headerCell.setText(LocaleController.getString("CallsDataUsage", R.string.CallsDataUsage));
DataUsageActivity.java:                        headerCell.setText(LocaleController.getString("FilesDataUsage", R.string.FilesDataUsage));
DataUsageActivity.java:                        headerCell.setText(LocaleController.getString("LocalAudioCache", R.string.LocalAudioCache));
DataUsageActivity.java:                        headerCell.setText(LocaleController.getString("LocalVideoCache", R.string.LocalVideoCache));
DataUsageActivity.java:                        headerCell.setText(LocaleController.getString("LocalPhotoCache", R.string.LocalPhotoCache));
DataUsageActivity.java:                        headerCell.setText(LocaleController.getString("MessagesDataUsage", R.string.MessagesDataUsage));
DataUsageActivity.java:                    cell.setText(LocaleController.formatString("NetworkUsageSince", R.string.NetworkUsageSince, LocaleController.getInstance().formatterStats.format(StatsController.getInstance(currentAccount).getResetStatsDate(currentType))));
DialogOrContactPickerActivity.java:        actionBar.setTitle(LocaleController.getString("BlockUserMultiTitle", R.string.BlockUserMultiTitle));
DialogOrContactPickerActivity.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
DialogOrContactPickerActivity.java:        builder.setTitle(LocaleController.getString("BlockUser", R.string.BlockUser));
DialogOrContactPickerActivity.java:        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureBlockContact2", R.string.AreYouSureBlockContact2, ContactsController.formatName(user.first_name, user.last_name))));
DialogOrContactPickerActivity.java:        builder.setPositiveButton(LocaleController.getString("BlockContact", R.string.BlockContact), (dialogInterface, i) -> {
DialogOrContactPickerActivity.java:                AlertsCreator.showSimpleToast(DialogOrContactPickerActivity.this, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
DialogOrContactPickerActivity.java:                AlertsCreator.showSimpleToast(DialogOrContactPickerActivity.this, LocaleController.getString("UserBlocked", R.string.UserBlocked));
DialogOrContactPickerActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DialogOrContactPickerActivity.java:        scrollSlidingTextTabStrip.addTextTab(0, LocaleController.getString("BlockUserChatsTitle", R.string.BlockUserChatsTitle));
DialogOrContactPickerActivity.java:        scrollSlidingTextTabStrip.addTextTab(1, LocaleController.getString("BlockUserContactsTitle", R.string.BlockUserContactsTitle));
DialogsActivity.java:            doneItem.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
DialogsActivity.java:            proxyItem.setContentDescription(LocaleController.getString("ProxySettings", R.string.ProxySettings));
DialogsActivity.java:                actionBar.setBackButtonContentDescription(LocaleController.getString("AccDescrGoBack", R.string.AccDescrGoBack));
DialogsActivity.java:                    actionBar.setBackButtonContentDescription(LocaleController.getString("AccDescrOpenMenu", R.string.AccDescrOpenMenu));
DialogsActivity.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
DialogsActivity.java:        searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));*/
DialogsActivity.java:                actionBar.setTitle(LocaleController.getString("ForwardTo", R.string.ForwardTo));
DialogsActivity.java:                actionBar.setTitle(LocaleController.getString("SelectChats", R.string.SelectChats));
DialogsActivity.java:                actionBar.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
DialogsActivity.java:                actionBar.setBackButtonContentDescription(LocaleController.getString("AccDescrOpenMenu", R.string.AccDescrOpenMenu));
DialogsActivity.java:                actionBar.setTitle(LocaleController.getString("ArchivedChats", R.string.ArchivedChats));
DialogsActivity.java:                    actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
DialogsActivity.java:                    builder.setTitle(LocaleController.getString("FilterDelete", R.string.FilterDelete));
DialogsActivity.java:                    builder.setMessage(LocaleController.getString("FilterDeleteAlert", R.string.FilterDeleteAlert));
DialogsActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DialogsActivity.java:                    builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialog2, which2) -> {
DialogsActivity.java:                            cell.setTextAndIcon(LocaleController.getString("FilterReorder", R.string.FilterReorder), R.drawable.tabs_reorder);
DialogsActivity.java:                                cell.setTextAndIcon(LocaleController.getString("FilterEditAll", R.string.FilterEditAll), R.drawable.msg_edit);
DialogsActivity.java:                                cell.setTextAndIcon(LocaleController.getString("FilterEdit", R.string.FilterEdit), R.drawable.msg_edit);
DialogsActivity.java:                            cell.setTextAndIcon(LocaleController.getString("FilterDeleteItem", R.string.FilterDeleteItem), R.drawable.msg_delete);
DialogsActivity.java:                viewPage.pullForegroundDrawable = new PullForegroundDrawable(LocaleController.getString("AccSwipeForArchive", R.string.AccSwipeForArchive), LocaleController.getString("AccReleaseForArchive", R.string.AccReleaseForArchive)) {
DialogsActivity.java:                builder.setTitle(LocaleController.getString("ChatHintsDeleteAlertTitle", R.string.ChatHintsDeleteAlertTitle));
DialogsActivity.java:                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("ChatHintsDeleteAlert", R.string.ChatHintsDeleteAlert, ContactsController.formatName(user.first_name, user.last_name))));
DialogsActivity.java:                builder.setPositiveButton(LocaleController.getString("StickersRemove", R.string.StickersRemove), (dialogInterface, i) -> getMediaDataController().removePeer(did));
DialogsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DialogsActivity.java:                builder.setTitle(LocaleController.getString("ClearSearchAlertTitle", R.string.ClearSearchAlertTitle));
DialogsActivity.java:                builder.setMessage(LocaleController.getString("ClearSearchAlert", R.string.ClearSearchAlert));
DialogsActivity.java:                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), (dialogInterface, i) -> {
DialogsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DialogsActivity.java:            floatingButtonContainer.setContentDescription(LocaleController.getString("Done", R.string.Done));
DialogsActivity.java:            floatingButtonContainer.setContentDescription(LocaleController.getString("NewMessageTitle", R.string.NewMessageTitle));
DialogsActivity.java:            FiltersView.MediaFilterData filterData = new FiltersView.MediaFilterData(R.drawable.chats_archive, R.drawable.chats_archive, LocaleController.getString("ArchiveSearchFilter", R.string.ArchiveSearchFilter), null, FiltersView.FILTER_TYPE_ARCHIVE);
DialogsActivity.java:        deleteItem = actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete));
DialogsActivity.java:        ActionBarMenuItem otherItem = actionMode.addItemWithWidth(0, R.drawable.ic_ab_other, AndroidUtilities.dp(54), LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
DialogsActivity.java:        archiveItem = otherItem.addSubItem(archive, R.drawable.msg_archive, LocaleController.getString("Archive", R.string.Archive));
DialogsActivity.java:        pin2Item = otherItem.addSubItem(pin2, R.drawable.msg_pin, LocaleController.getString("DialogPin", R.string.DialogPin));
DialogsActivity.java:        addToFolderItem = otherItem.addSubItem(add_to_folder, R.drawable.msg_addfolder, LocaleController.getString("FilterAddTo", R.string.FilterAddTo));
DialogsActivity.java:        removeFromFolderItem = otherItem.addSubItem(remove_from_folder, R.drawable.msg_removefolder, LocaleController.getString("FilterRemoveFrom", R.string.FilterRemoveFrom));
DialogsActivity.java:        readItem = otherItem.addSubItem(read, R.drawable.msg_markread, LocaleController.getString("MarkAsRead", R.string.MarkAsRead));
DialogsActivity.java:        clearItem = otherItem.addSubItem(clear, R.drawable.msg_clear, LocaleController.getString("ClearHistory", R.string.ClearHistory));
DialogsActivity.java:        blockItem = otherItem.addSubItem(block, R.drawable.msg_block, LocaleController.getString("BlockUser", R.string.BlockUser));
DialogsActivity.java:                            showDialog(AlertsCreator.createSimpleAlert(getParentActivity(), LocaleController.getString("FilterAddToAlertFullTitle", R.string.FilterAddToAlertFullTitle), LocaleController.getString("FilterRemoveFromAlertFullText", R.string.FilterRemoveFromAlertFullText)).create());
DialogsActivity.java:                        showDialog(AlertsCreator.createSimpleAlert(getParentActivity(), LocaleController.getString("FilterAddToAlertFullTitle", R.string.FilterAddToAlertFullTitle), LocaleController.getString("FilterAddToAlertFullText", R.string.FilterAddToAlertFullText)).create());
DialogsActivity.java:                filterTabsView.addTab(Integer.MAX_VALUE, 0, LocaleController.getString("FilterAllChats", R.string.FilterAllChats));
DialogsActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
DialogsActivity.java:                        builder.setMessage(LocaleController.getString("PermissionStorage", R.string.PermissionStorage));
DialogsActivity.java:                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
DialogsActivity.java:                    .setTitle(LocaleController.getString("AppName", R.string.AppName))
DialogsActivity.java:                    .setMessage(LocaleController.getString("PermissionXiaomiLockscreen", R.string.PermissionXiaomiLockscreen))
DialogsActivity.java:                    .setPositiveButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
DialogsActivity.java:                    .setNegativeButton(LocaleController.getString("ContactsPermissionAlertNotNow", R.string.ContactsPermissionAlertNotNow), (dialog, which) -> MessagesController.getGlobalNotificationsSettings().edit().putBoolean("askedAboutMiuiLockscreen", true).commit())
DialogsActivity.java:                builder.setTitle(LocaleController.getString("ClearSearchSingleAlertTitle", R.string.ClearSearchSingleAlertTitle));
DialogsActivity.java:                    builder.setMessage(LocaleController.formatString("ClearSearchSingleChatAlertText", R.string.ClearSearchSingleChatAlertText, chat.title));
DialogsActivity.java:                        builder.setMessage(LocaleController.formatString("ClearSearchSingleChatAlertText", R.string.ClearSearchSingleChatAlertText, LocaleController.getString("SavedMessages", R.string.SavedMessages)));
DialogsActivity.java:                        builder.setMessage(LocaleController.formatString("ClearSearchSingleUserAlertText", R.string.ClearSearchSingleUserAlertText, ContactsController.formatName(user.first_name, user.last_name)));
DialogsActivity.java:                    builder.setMessage(LocaleController.formatString("ClearSearchSingleUserAlertText", R.string.ClearSearchSingleUserAlertText, ContactsController.formatName(user.first_name, user.last_name)));
DialogsActivity.java:                builder.setPositiveButton(LocaleController.getString("ClearSearchRemove", R.string.ClearSearchRemove).toUpperCase(), (dialogInterface, i) -> searchViewPager.dialogsSearchAdapter.removeRecentSearch(did));
DialogsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DialogsActivity.java:                        hasUnread ? LocaleController.getString("MarkAllAsRead", R.string.MarkAllAsRead) : null,
DialogsActivity.java:                        SharedConfig.archiveHidden ? LocaleController.getString("PinInTheList", R.string.PinInTheList) : LocaleController.getString("HideAboveTheList", R.string.HideAboveTheList)
DialogsActivity.java:            actionBar.setBackButtonContentDescription(LocaleController.getString("AccDescrOpenMenu", R.string.AccDescrOpenMenu));
DialogsActivity.java:                    AlertsCreator.showSimpleAlert(DialogsActivity.this, LocaleController.formatString("PinFolderLimitReached", R.string.PinFolderLimitReached, LocaleController.formatPluralString("Chats", maxPinnedCount)));
DialogsActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
DialogsActivity.java:                    builder.setMessage(LocaleController.formatString("PinToTopLimitReached2", R.string.PinToTopLimitReached2, LocaleController.formatPluralString("Chats", maxPinnedCount)));
DialogsActivity.java:                    builder.setNegativeButton(LocaleController.getString("FiltersSetupPinAlert", R.string.FiltersSetupPinAlert), (dialog, which) -> presentFragment(new FiltersSetupActivity()));
DialogsActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
DialogsActivity.java:                builder.setTitle(LocaleController.formatString("DeleteFewChatsTitle", R.string.DeleteFewChatsTitle, LocaleController.formatPluralString("ChatsSelected", count)));
DialogsActivity.java:                builder.setMessage(LocaleController.getString("AreYouSureDeleteFewChats", R.string.AreYouSureDeleteFewChats));
DialogsActivity.java:                builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialog1, which) -> {
DialogsActivity.java:                    builder.setTitle(LocaleController.formatString("ClearCacheFewChatsTitle", R.string.ClearCacheFewChatsTitle, LocaleController.formatPluralString("ChatsSelectedClearCache", count)));
DialogsActivity.java:                    builder.setMessage(LocaleController.getString("AreYouSureClearHistoryCacheFewChats", R.string.AreYouSureClearHistoryCacheFewChats));
DialogsActivity.java:                    builder.setPositiveButton(LocaleController.getString("ClearHistoryCache", R.string.ClearHistoryCache), (dialog1, which) -> perfromSelectedDialogsAction(selectedDialogs, action, false));
DialogsActivity.java:                    builder.setTitle(LocaleController.formatString("ClearFewChatsTitle", R.string.ClearFewChatsTitle, LocaleController.formatPluralString("ChatsSelectedClear", count)));
DialogsActivity.java:                    builder.setMessage(LocaleController.getString("AreYouSureClearHistoryFewChats", R.string.AreYouSureClearHistoryFewChats));
DialogsActivity.java:                    builder.setPositiveButton(LocaleController.getString("ClearHistory", R.string.ClearHistory), (dialog1, which) -> perfromSelectedDialogsAction(selectedDialogs, action, false));
DialogsActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DialogsActivity.java:                        builder.setTitle(LocaleController.getString("PsaHideChatAlertTitle", R.string.PsaHideChatAlertTitle));
DialogsActivity.java:                        builder.setMessage(LocaleController.getString("PsaHideChatAlertText", R.string.PsaHideChatAlertText));
DialogsActivity.java:                        builder.setPositiveButton(LocaleController.getString("PsaHide", R.string.PsaHide), (dialog1, which) -> {
DialogsActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DialogsActivity.java:                clearItem.setText(LocaleController.getString("ClearHistoryCache", R.string.ClearHistoryCache));
DialogsActivity.java:                clearItem.setText(LocaleController.getString("ClearHistory", R.string.ClearHistory));
DialogsActivity.java:            final String contentDescription = LocaleController.getString("Unarchive", R.string.Unarchive);
DialogsActivity.java:            final String contentDescription = LocaleController.getString("Archive", R.string.Archive);
DialogsActivity.java:            muteItem.setContentDescription(LocaleController.getString("ChatsUnmute", R.string.ChatsUnmute));
DialogsActivity.java:            muteItem.setContentDescription(LocaleController.getString("ChatsMute", R.string.ChatsMute));
DialogsActivity.java:            readItem.setTextAndIcon(LocaleController.getString("MarkAsRead", R.string.MarkAsRead), R.drawable.msg_markread);
DialogsActivity.java:            readItem.setTextAndIcon(LocaleController.getString("MarkAsUnread", R.string.MarkAsUnread), R.drawable.msg_markunread);
DialogsActivity.java:            pinItem.setContentDescription(LocaleController.getString("PinToTop", R.string.PinToTop));
DialogsActivity.java:            pin2Item.setText(LocaleController.getString("DialogPin", R.string.DialogPin));
DialogsActivity.java:            pinItem.setContentDescription(LocaleController.getString("UnpinFromTop", R.string.UnpinFromTop));
DialogsActivity.java:            pin2Item.setText(LocaleController.getString("DialogUnpin", R.string.DialogUnpin));
DialogsActivity.java:            AlertsCreator.showSimpleAlert(DialogsActivity.this, LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSendError", R.string.SlowmodeSendError));
DialogsActivity.java:                actionBar.setBackButtonContentDescription(LocaleController.getString("AccDescrGoBack", R.string.AccDescrGoBack));
DialogsActivity.java:                    actionBar.setTitle(LocaleController.getString("ForwardTo", R.string.ForwardTo));
DialogsActivity.java:                    actionBar.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
DialogsActivity.java:            builder.setTitle(LocaleController.getString("HideNewChatsAlertTitle", R.string.HideNewChatsAlertTitle));
DialogsActivity.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("HideNewChatsAlertText", R.string.HideNewChatsAlertText)));
DialogsActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
DialogsActivity.java:            builder.setPositiveButton(LocaleController.getString("GoToSettings", R.string.GoToSettings), (dialog, which) -> {
DialogsActivity.java:                passcodeItem.setContentDescription(LocaleController.getString("AccDescrPasscodeUnlock", R.string.AccDescrPasscodeUnlock));
DialogsActivity.java:                passcodeItem.setContentDescription(LocaleController.getString("AccDescrPasscodeLock", R.string.AccDescrPasscodeLock));
DialogsActivity.java:                    builder.setTitle(LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle));
DialogsActivity.java:                        builder.setMessage(LocaleController.getString("PublicPollCantForward", R.string.PublicPollCantForward));
DialogsActivity.java:                        builder.setMessage(LocaleController.getString("ChannelCantSendMessage", R.string.ChannelCantSendMessage));
DialogsActivity.java:                    builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
DialogsActivity.java:                builder.setTitle(LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle));
DialogsActivity.java:                builder.setMessage(LocaleController.getString("PollCantForwardSecretChat", R.string.PollCantForwardSecretChat));
DialogsActivity.java:                builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
DialogsActivity.java:                    title = LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle);
DialogsActivity.java:                    message = LocaleController.formatStringSimple(selectAlertStringGroup, LocaleController.getString("SavedMessages", R.string.SavedMessages));
DialogsActivity.java:                    buttonText = LocaleController.getString("Send", R.string.Send);
DialogsActivity.java:                    title = LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle);
DialogsActivity.java:                    buttonText = LocaleController.getString("Send", R.string.Send);
DialogsActivity.java:                        title = LocaleController.getString("AddToTheGroupAlertTitle", R.string.AddToTheGroupAlertTitle);
DialogsActivity.java:                        buttonText = LocaleController.getString("Add", R.string.Add);
DialogsActivity.java:                        title = LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle);
DialogsActivity.java:                        buttonText = LocaleController.getString("Send", R.string.Send);
DialogsActivity.java:                title = LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle);
DialogsActivity.java:                buttonText = LocaleController.getString("Send", R.string.Send);
DialogsActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
EditWidgetActivity.java:            chatActionCell.setCustomText(LocaleController.getString("WidgetPreview", R.string.WidgetPreview));
EditWidgetActivity.java:                                name = LocaleController.getString("SavedMessages", R.string.SavedMessages);
EditWidgetActivity.java:                                name = LocaleController.getString("RepliesTitle", R.string.RepliesTitle);
EditWidgetActivity.java:                                name = LocaleController.getString("HiddenName", R.string.HiddenName);
EditWidgetActivity.java:                                    messageNameString = LocaleController.getString("FromYou", R.string.FromYou);
EditWidgetActivity.java:                                    messageString = LocaleController.getString("AttachPhotoExpired", R.string.AttachPhotoExpired);
EditWidgetActivity.java:                                    messageString = LocaleController.getString("AttachVideoExpired", R.string.AttachVideoExpired);
EditWidgetActivity.java:                                name = LocaleController.getString("SavedMessages", R.string.SavedMessages);
EditWidgetActivity.java:                                name = LocaleController.getString("RepliesTitle", R.string.RepliesTitle);
EditWidgetActivity.java:                                name = LocaleController.getString("HiddenName", R.string.HiddenName);
EditWidgetActivity.java:            actionBar.setTitle(LocaleController.getString("WidgetChats", R.string.WidgetChats));
EditWidgetActivity.java:            actionBar.setTitle(LocaleController.getString("WidgetShortcuts", R.string.WidgetShortcuts));
EditWidgetActivity.java:        menu.addItem(done_item, LocaleController.getString("Done", R.string.Done).toUpperCase());
EditWidgetActivity.java:                    CharSequence[] items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
EditWidgetActivity.java:                            builder.append(LocaleController.getString("EditWidgetChatsInfo", R.string.EditWidgetChatsInfo));
EditWidgetActivity.java:                            builder.append(LocaleController.getString("EditWidgetContactsInfo", R.string.EditWidgetContactsInfo));
EditWidgetActivity.java:                            builder.append("\n\n").append(AndroidUtilities.replaceTags(LocaleController.getString("WidgetPasscode2", R.string.WidgetPasscode2)));
EditWidgetActivity.java:                    cell.setTextAndIcon(LocaleController.getString("SelectChats", R.string.SelectChats), combinedDrawable, chatsStartRow != -1);
ExternalActionActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ExternalActionActivity.java:                    builder.setMessage(LocaleController.getString("PleaseLoginPassport", R.string.PleaseLoginPassport));
ExternalActionActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ExternalActionActivity.java:                                AlertDialog dialog = AlertsCreator.showUpdateAppAlert(ExternalActionActivity.this, LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
FeaturedStickersActivity.java:        actionBar.setTitle(LocaleController.getString("FeaturedStickers", R.string.FeaturedStickers));
FilterCreateActivity.java:            actionBar.setTitle(LocaleController.getString("FilterNew", R.string.FilterNew));
FilterCreateActivity.java:        doneItem = menu.addItem(done_button, LocaleController.getString("Save", R.string.Save).toUpperCase());
FilterCreateActivity.java:                builder.setTitle(LocaleController.getString("FilterDelete", R.string.FilterDelete));
FilterCreateActivity.java:                builder.setMessage(LocaleController.getString("FilterDeleteAlert", R.string.FilterDeleteAlert));
FilterCreateActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
FilterCreateActivity.java:                builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialog, which) -> {
FilterCreateActivity.java:                newName = LocaleController.getString("FilterNameUnread", R.string.FilterNameUnread);
FilterCreateActivity.java:                newName = LocaleController.getString("FilterNameNonMuted", R.string.FilterNameNonMuted);
FilterCreateActivity.java:                newName = LocaleController.getString("FilterContacts", R.string.FilterContacts);
FilterCreateActivity.java:                newName = LocaleController.getString("FilterNonContacts", R.string.FilterNonContacts);
FilterCreateActivity.java:                newName = LocaleController.getString("FilterGroups", R.string.FilterGroups);
FilterCreateActivity.java:                newName = LocaleController.getString("FilterBots", R.string.FilterBots);
FilterCreateActivity.java:                newName = LocaleController.getString("FilterChannels", R.string.FilterChannels);
FilterCreateActivity.java:                builder.setTitle(LocaleController.getString("FilterDiscardNewTitle", R.string.FilterDiscardNewTitle));
FilterCreateActivity.java:                builder.setMessage(LocaleController.getString("FilterDiscardNewAlert", R.string.FilterDiscardNewAlert));
FilterCreateActivity.java:                builder.setPositiveButton(LocaleController.getString("FilterDiscardNewSave", R.string.FilterDiscardNewSave), (dialogInterface, i) -> processDone());
FilterCreateActivity.java:                builder.setTitle(LocaleController.getString("FilterDiscardTitle", R.string.FilterDiscardTitle));
FilterCreateActivity.java:                builder.setMessage(LocaleController.getString("FilterDiscardAlert", R.string.FilterDiscardAlert));
FilterCreateActivity.java:                builder.setPositiveButton(LocaleController.getString("ApplyTheme", R.string.ApplyTheme), (dialogInterface, i) -> processDone());
FilterCreateActivity.java:            builder.setNegativeButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialog, which) -> finishFragment());
FilterCreateActivity.java:            builder.setTitle(LocaleController.getString("FilterRemoveInclusionTitle", R.string.FilterRemoveInclusionTitle));
FilterCreateActivity.java:                builder.setMessage(LocaleController.formatString("FilterRemoveInclusionText", R.string.FilterRemoveInclusionText, name));
FilterCreateActivity.java:                builder.setMessage(LocaleController.formatString("FilterRemoveInclusionUserText", R.string.FilterRemoveInclusionUserText, name));
FilterCreateActivity.java:                builder.setMessage(LocaleController.formatString("FilterRemoveInclusionChatText", R.string.FilterRemoveInclusionChatText, name));
FilterCreateActivity.java:            builder.setTitle(LocaleController.getString("FilterRemoveExclusionTitle", R.string.FilterRemoveExclusionTitle));
FilterCreateActivity.java:                builder.setMessage(LocaleController.formatString("FilterRemoveExclusionText", R.string.FilterRemoveExclusionText, name));
FilterCreateActivity.java:                builder.setMessage(LocaleController.formatString("FilterRemoveExclusionUserText", R.string.FilterRemoveExclusionUserText, name));
FilterCreateActivity.java:                builder.setMessage(LocaleController.formatString("FilterRemoveExclusionChatText", R.string.FilterRemoveExclusionChatText, name));
FilterCreateActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
FilterCreateActivity.java:        builder.setPositiveButton(LocaleController.getString("StickersRemove", R.string.StickersRemove), (dialogInterface, i) -> {
FilterCreateActivity.java:                textCell.setTextAndHint(newFilterName != null ? newFilterName : "", LocaleController.getString("FilterNameHint", R.string.FilterNameHint), false);
FilterCreateActivity.java:                        headerCell.setText(LocaleController.getString("FilterInclude", R.string.FilterInclude));
FilterCreateActivity.java:                        headerCell.setText(LocaleController.getString("FilterExclude", R.string.FilterExclude));
FilterCreateActivity.java:                            name = LocaleController.getString("FilterContacts", R.string.FilterContacts);
FilterCreateActivity.java:                            name = LocaleController.getString("FilterNonContacts", R.string.FilterNonContacts);
FilterCreateActivity.java:                            name = LocaleController.getString("FilterGroups", R.string.FilterGroups);
FilterCreateActivity.java:                            name = LocaleController.getString("FilterChannels", R.string.FilterChannels);
FilterCreateActivity.java:                            name = LocaleController.getString("FilterBots", R.string.FilterBots);
FilterCreateActivity.java:                            name = LocaleController.getString("FilterMuted", R.string.FilterMuted);
FilterCreateActivity.java:                            name = LocaleController.getString("FilterRead", R.string.FilterRead);
FilterCreateActivity.java:                            name = LocaleController.getString("FilterArchived", R.string.FilterArchived);
FilterCreateActivity.java:                                status = LocaleController.getString("Bot", R.string.Bot);
FilterCreateActivity.java:                                status = LocaleController.getString("FilterContact", R.string.FilterContact);
FilterCreateActivity.java:                                status = LocaleController.getString("FilterNonContact", R.string.FilterNonContact);
FilterCreateActivity.java:                                    status = LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate);
FilterCreateActivity.java:                                    status = LocaleController.getString("MegaPrivate", R.string.MegaPrivate);
FilterCreateActivity.java:                                    status = LocaleController.getString("ChannelPublic", R.string.ChannelPublic);
FilterCreateActivity.java:                                    status = LocaleController.getString("MegaPublic", R.string.MegaPublic);
FilterCreateActivity.java:                        textCell.setText(LocaleController.getString("FilterDelete", R.string.FilterDelete), false);
FilterCreateActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("FilterAddChats", R.string.FilterAddChats), R.drawable.actions_addchat, position + 1 != includeSectionRow);
FilterCreateActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("FilterRemoveChats", R.string.FilterRemoveChats), R.drawable.actions_addchat, position + 1 != excludeSectionRow);
FilterCreateActivity.java:                        cell.setText(LocaleController.getString("FilterIncludeInfo", R.string.FilterIncludeInfo));
FilterCreateActivity.java:                        cell.setText(LocaleController.getString("FilterExcludeInfo", R.string.FilterExcludeInfo));
FilteredSearchView.java:                        emptyView.title.setText(LocaleController.getString("SearchEmptyViewTitle2", R.string.SearchEmptyViewTitle2));
FilteredSearchView.java:                        emptyView.subtitle.setText(LocaleController.getString("SearchEmptyViewFilteredSubtitle2", R.string.SearchEmptyViewFilteredSubtitle2));
FilteredSearchView.java:                                emptyView.title.setText(LocaleController.getString("SearchEmptyViewTitle", R.string.SearchEmptyViewTitle));
FilteredSearchView.java:                                        str = LocaleController.getString("SearchEmptyViewFilteredSubtitleFiles", R.string.SearchEmptyViewFilteredSubtitleFiles);
FilteredSearchView.java:                                        str = LocaleController.getString("SearchEmptyViewFilteredSubtitleMedia", R.string.SearchEmptyViewFilteredSubtitleMedia);
FilteredSearchView.java:                                        str = LocaleController.getString("SearchEmptyViewFilteredSubtitleLinks", R.string.SearchEmptyViewFilteredSubtitleLinks);
FilteredSearchView.java:                                        str = LocaleController.getString("SearchEmptyViewFilteredSubtitleMusic", R.string.SearchEmptyViewFilteredSubtitleMusic);
FilteredSearchView.java:                                        str = LocaleController.getString("SearchEmptyViewFilteredSubtitleVoice", R.string.SearchEmptyViewFilteredSubtitleVoice);
FilteredSearchView.java:                                emptyView.title.setText(LocaleController.getString("SearchEmptyViewTitle2", R.string.SearchEmptyViewTitle2));
FilteredSearchView.java:                                emptyView.subtitle.setText(LocaleController.getString("SearchEmptyViewFilteredSubtitle2", R.string.SearchEmptyViewFilteredSubtitle2));
FilteredSearchView.java:                            emptyView.title.setText(LocaleController.getString("SearchEmptyViewTitle2", R.string.SearchEmptyViewTitle2));
FilteredSearchView.java:                        if (query.length() >= 3 && (LocaleController.getString("SavedMessages", R.string.SavedMessages).toLowerCase().startsWith(query) ||
FilteredSearchView.java:                    builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
FilteredSearchView.java:                    cell.setText(LocaleController.getString("SearchMessages", R.string.SearchMessages));
FiltersSetupActivity.java:            addButton.setText(LocaleController.getString("Add", R.string.Add));
FiltersSetupActivity.java:            messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("CreateNewFilterInfo", R.string.CreateNewFilterInfo)));
FiltersSetupActivity.java:            moveImageView.setContentDescription(LocaleController.getString("FilterReorder", R.string.FilterReorder));
FiltersSetupActivity.java:            optionsImageView.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
FiltersSetupActivity.java:                info.append(LocaleController.getString("FilterAllChats", R.string.FilterAllChats));
FiltersSetupActivity.java:                    info.append(LocaleController.getString("FilterContacts", R.string.FilterContacts));
FiltersSetupActivity.java:                    info.append(LocaleController.getString("FilterNonContacts", R.string.FilterNonContacts));
FiltersSetupActivity.java:                    info.append(LocaleController.getString("FilterGroups", R.string.FilterGroups));
FiltersSetupActivity.java:                    info.append(LocaleController.getString("FilterChannels", R.string.FilterChannels));
FiltersSetupActivity.java:                    info.append(LocaleController.getString("FilterBots", R.string.FilterBots));
FiltersSetupActivity.java:                info.append(LocaleController.getString("FilterNoChats", R.string.FilterNoChats));
FiltersSetupActivity.java:        actionBar.setTitle(LocaleController.getString("Filters", R.string.Filters));
FiltersSetupActivity.java:                                LocaleController.getString("FilterEditItem", R.string.FilterEditItem),
FiltersSetupActivity.java:                                LocaleController.getString("FilterDeleteItem", R.string.FilterDeleteItem),
FiltersSetupActivity.java:                                builder.setTitle(LocaleController.getString("FilterDelete", R.string.FilterDelete));
FiltersSetupActivity.java:                                builder.setMessage(LocaleController.getString("FilterDeleteAlert", R.string.FilterDeleteAlert));
FiltersSetupActivity.java:                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
FiltersSetupActivity.java:                                builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialog2, which2) -> {
FiltersSetupActivity.java:                        headerCell.setText(LocaleController.getString("Filters", R.string.Filters));
FiltersSetupActivity.java:                        headerCell.setText(LocaleController.getString("FilterRecommended", R.string.FilterRecommended));
FiltersSetupActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("CreateNewFilter", R.string.CreateNewFilter), combinedDrawable, false);
FilterUsersActivity.java:            actionBar.setTitle(LocaleController.getString("FilterAlwaysShow", R.string.FilterAlwaysShow));
FilterUsersActivity.java:            actionBar.setTitle(LocaleController.getString("FilterNeverShow", R.string.FilterNeverShow));
FilterUsersActivity.java:        editText.setHintText(LocaleController.getString("SearchForPeopleAndGroups", R.string.SearchForPeopleAndGroups));
FilterUsersActivity.java:                        emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
FilterUsersActivity.java:        emptyView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
FilterUsersActivity.java:        floatingButton.setContentDescription(LocaleController.getString("Next", R.string.Next));
FilterUsersActivity.java:        emptyView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
FilterUsersActivity.java:            actionBar.setSubtitle(LocaleController.formatString("MembersCountZero", R.string.MembersCountZero, LocaleController.formatPluralString("Chats", 100)));
FilterUsersActivity.java:                                    name = LocaleController.getString("FilterContacts", R.string.FilterContacts);
FilterUsersActivity.java:                                    name = LocaleController.getString("FilterNonContacts", R.string.FilterNonContacts);
FilterUsersActivity.java:                                    name = LocaleController.getString("FilterGroups", R.string.FilterGroups);
FilterUsersActivity.java:                                    name = LocaleController.getString("FilterChannels", R.string.FilterChannels);
FilterUsersActivity.java:                                    name = LocaleController.getString("FilterBots", R.string.FilterBots);
FilterUsersActivity.java:                                    name = LocaleController.getString("FilterMuted", R.string.FilterMuted);
FilterUsersActivity.java:                                    name = LocaleController.getString("FilterRead", R.string.FilterRead);
FilterUsersActivity.java:                                    name = LocaleController.getString("FilterArchived", R.string.FilterArchived);
FilterUsersActivity.java:                        cell.setText(LocaleController.getString("FilterChatTypes", R.string.FilterChatTypes));
FilterUsersActivity.java:                        cell.setText(LocaleController.getString("FilterChats", R.string.FilterChats));
FilterUsersActivity.java:                                    names[2] = LocaleController.getString("RepliesTitle", R.string.RepliesTitle).toLowerCase();
FilterUsersActivity.java:                                    names[2] = LocaleController.getString("SavedMessages", R.string.SavedMessages).toLowerCase();
GroupCallActivity.java:                    error = LocaleController.getString("VoipGroupTooMuch", R.string.VoipGroupTooMuch);
GroupCallActivity.java:                    error = LocaleController.getString("VoipGroupJoinAnonymousAdmin", R.string.VoipGroupJoinAnonymousAdmin);
GroupCallActivity.java:                    error = LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + text;
GroupCallActivity.java:                AlertDialog.Builder builder = AlertsCreator.createSimpleAlert(getContext(), LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat), error);
GroupCallActivity.java:                recordItem.setText(LocaleController.getString("VoipGroupStopRecordCall", R.string.VoipGroupStopRecordCall));
GroupCallActivity.java:                recordItem.setText(LocaleController.getString("VoipGroupRecordCall", R.string.VoipGroupRecordCall));
GroupCallActivity.java:        leaveButton.setData(R.drawable.calls_decline, 0xffffffff, Theme.getColor(Theme.key_voipgroup_leaveButton), 0.3f, false, LocaleController.getString("VoipGroupLeave", R.string.VoipGroupLeave), false, false);
GroupCallActivity.java:                    info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_CLICK, LocaleController.getString("VoipMute", R.string.VoipMute)));
GroupCallActivity.java:                    builder.setTitle(LocaleController.getString("VoipGroupEndAlertTitle", R.string.VoipGroupEndAlertTitle));
GroupCallActivity.java:                    builder.setMessage(LocaleController.getString("VoipGroupEndAlertText", R.string.VoipGroupEndAlertText));
GroupCallActivity.java:                    builder.setPositiveButton(LocaleController.getString("VoipGroupEnd", R.string.VoipGroupEnd), (dialogInterface, i) -> {
GroupCallActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
GroupCallActivity.java:                        builder.setTitle(LocaleController.getString("VoipGroupStopRecordingTitle", R.string.VoipGroupStopRecordingTitle));
GroupCallActivity.java:                        builder.setMessage(LocaleController.getString("VoipGroupStopRecordingText", R.string.VoipGroupStopRecordingText));
GroupCallActivity.java:                        builder.setTitle(LocaleController.getString("VoipGroupStartRecordingTitle", R.string.VoipGroupStartRecordingTitle));
GroupCallActivity.java:                        builder.setMessage(LocaleController.getString("VoipGroupStartRecordingText", R.string.VoipGroupStartRecordingText));
GroupCallActivity.java:                        editText.setHint(LocaleController.getString("VoipGroupSaveFileHint", R.string.VoipGroupSaveFileHint));
GroupCallActivity.java:                    builder.setPositiveButton(call.recording ? LocaleController.getString("Stop", R.string.Stop) : LocaleController.getString("Start", R.string.Start), (dialogInterface, i) -> {
GroupCallActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), (dialog, which) -> AndroidUtilities.hideKeyboard(editText));
GroupCallActivity.java:                    builder.setTitle(LocaleController.getString("VoipGroupTitle", R.string.VoipGroupTitle));
GroupCallActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), (dialog, which) -> AndroidUtilities.hideKeyboard(editText));
GroupCallActivity.java:                    builder.setPositiveButton(LocaleController.getString("Save", R.string.Save), (dialog, which) -> {
GroupCallActivity.java:        otherItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
GroupCallActivity.java:        pipItem.setContentDescription(LocaleController.getString("AccDescrPipMode", R.string.AccDescrPipMode));
GroupCallActivity.java:        everyoneItem = otherItem.addSubItem(eveyone_can_speak_item, 0, LocaleController.getString("VoipGroupAllCanSpeak", R.string.VoipGroupAllCanSpeak), true);
GroupCallActivity.java:        adminItem = otherItem.addSubItem(admin_can_speak_item, 0, LocaleController.getString("VoipGroupOnlyAdminsCanSpeak", R.string.VoipGroupOnlyAdminsCanSpeak), true);
GroupCallActivity.java:        editTitleItem = otherItem.addSubItem(edit_item, R.drawable.msg_edit, recordCallDrawable, LocaleController.getString("VoipGroupEditTitle", R.string.VoipGroupEditTitle), true, false);
GroupCallActivity.java:        permissionItem = otherItem.addSubItem(permission_item, R.drawable.msg_permissions, recordCallDrawable, LocaleController.getString("VoipGroupEditPermissions", R.string.VoipGroupEditPermissions), false, false);
GroupCallActivity.java:        inviteItem = otherItem.addSubItem(share_invite_link_item, R.drawable.msg_link, LocaleController.getString("VoipGroupShareInviteLink", R.string.VoipGroupShareInviteLink));
GroupCallActivity.java:        recordItem = otherItem.addSubItem(start_record_item, 0, recordCallDrawable, LocaleController.getString("VoipGroupRecordCall", R.string.VoipGroupRecordCall), true, false);
GroupCallActivity.java:        leaveItem = otherItem.addSubItem(leave_item, R.drawable.msg_endcall, LocaleController.getString("VoipGroupEndChat", R.string.VoipGroupEndChat));
GroupCallActivity.java:                titleTextView.setText(LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat), animated);
GroupCallActivity.java:                message = LocaleController.formatString("VoipGroupInviteText", R.string.VoipGroupInviteText, urlUnmuted);
GroupCallActivity.java:            soundButton.setData(R.drawable.calls_bluetooth, Color.WHITE, 0, 0.1f, true, LocaleController.getString("VoipAudioRoutingBluetooth", R.string.VoipAudioRoutingBluetooth), false, animated);
GroupCallActivity.java:            soundButton.setData(R.drawable.calls_speaker, Color.WHITE, 0, 0.3f, true, LocaleController.getString("VoipSpeaker", R.string.VoipSpeaker), false, animated);
GroupCallActivity.java:                soundButton.setData(R.drawable.calls_headphones, Color.WHITE, 0, 0.1f, true, LocaleController.getString("VoipAudioRoutingHeadset", R.string.VoipAudioRoutingHeadset), false, animated);
GroupCallActivity.java:                soundButton.setData(R.drawable.calls_speaker, Color.WHITE, 0, 0.1f, true, LocaleController.getString("VoipSpeaker", R.string.VoipSpeaker), false, animated);
GroupCallActivity.java:            newText = LocaleController.getString("VoipGroupUnmute", R.string.VoipGroupUnmute);
GroupCallActivity.java:            newSubtext = LocaleController.getString("VoipHoldAndTalk", R.string.VoipHoldAndTalk);
GroupCallActivity.java:            newText = LocaleController.getString("VoipTapToMute", R.string.VoipTapToMute);
GroupCallActivity.java:            newText = LocaleController.getString("VoipMutedTapedForSpeak", R.string.VoipMutedTapedForSpeak);
GroupCallActivity.java:            newSubtext = LocaleController.getString("VoipMutedTapedForSpeakInfo", R.string.VoipMutedTapedForSpeakInfo);
GroupCallActivity.java:                newText = LocaleController.getString("Connecting", R.string.Connecting);
GroupCallActivity.java:                newText = LocaleController.getString("VoipMutedByAdmin", R.string.VoipMutedByAdmin);
GroupCallActivity.java:                newSubtext = LocaleController.getString("VoipMutedTapForSpeak", R.string.VoipMutedTapForSpeak);
GroupCallActivity.java:            recordHintView.setText(LocaleController.getString("VoipGroupRecording", R.string.VoipGroupRecording));
GroupCallActivity.java:        builder.setTitle(LocaleController.getString("VoipGroupLeaveAlertTitle", R.string.VoipGroupLeaveAlertTitle));
GroupCallActivity.java:        builder.setMessage(LocaleController.getString("VoipGroupLeaveAlertText", R.string.VoipGroupLeaveAlertText));
GroupCallActivity.java:        cells[0].setText(LocaleController.getString("VoipGroupLeaveAlertEndChat", R.string.VoipGroupLeaveAlertEndChat), "", false, false);
GroupCallActivity.java:        builder.setPositiveButton(LocaleController.getString("VoipGroupLeave", R.string.VoipGroupLeave), (dialogInterface, position) -> processOnLeave(call, cells[0].isChecked(), selfId, onLeave));
GroupCallActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
GroupCallActivity.java:                textView.setText(LocaleController.getString("VoipGroupRemoveMemberAlertTitle", R.string.VoipGroupRemoveMemberAlertTitle));
GroupCallActivity.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupRemoveMemberAlertText2", R.string.VoipGroupRemoveMemberAlertText2, name, currentChat.title)));
GroupCallActivity.java:                textView.setText(LocaleController.getString("VoipGroupAddMemberTitle", R.string.VoipGroupAddMemberTitle));
GroupCallActivity.java:                messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("VoipGroupAddMemberText", R.string.VoipGroupAddMemberText, name, currentChat.title)));
GroupCallActivity.java:                builder.setPositiveButton(LocaleController.getString("VoipGroupUserRemove", R.string.VoipGroupUserRemove), (dialogInterface, i) -> {
GroupCallActivity.java:                builder.setPositiveButton(LocaleController.getString("VoipGroupAdd", R.string.VoipGroupAdd), (dialogInterface, i) -> {
GroupCallActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
GroupCallActivity.java:            items.add(LocaleController.getString("VoipGroupCancelRaiseHand", R.string.VoipGroupCancelRaiseHand));
GroupCallActivity.java:                    items.add(LocaleController.getString("VoipGroupMute", R.string.VoipGroupMute));
GroupCallActivity.java:                    items.add(LocaleController.getString("VoipGroupAllowToSpeak", R.string.VoipGroupAllowToSpeak));
GroupCallActivity.java:                items.add(LocaleController.getString("VoipGroupOpenChannel", R.string.VoipGroupOpenChannel));
GroupCallActivity.java:                items.add(LocaleController.getString("VoipGroupOpenProfile", R.string.VoipGroupOpenProfile));
GroupCallActivity.java:                items.add(LocaleController.getString("VoipGroupUserRemove", R.string.VoipGroupUserRemove));
GroupCallActivity.java:                items.add(LocaleController.getString("VoipGroupUnmuteForMe", R.string.VoipGroupUnmuteForMe));
GroupCallActivity.java:                items.add(LocaleController.getString("VoipGroupMuteForMe", R.string.VoipGroupMuteForMe));
GroupCallActivity.java:                items.add(LocaleController.getString("VoipGroupOpenChannel", R.string.VoipGroupOpenChannel));
GroupCallActivity.java:                items.add(LocaleController.getString("VoipGroupOpenProfile", R.string.VoipGroupOpenProfile));
GroupCallActivity.java:                    textCell.setTextAndIcon(LocaleController.getString("VoipGroupInviteMember", R.string.VoipGroupInviteMember), R.drawable.actions_addmember2, true);
GroupCreateActivity.java:            actionBar.setTitle(LocaleController.getString("ChannelAddSubscribers", R.string.ChannelAddSubscribers));
GroupCreateActivity.java:                    actionBar.setTitle(LocaleController.getString("ChannelAddSubscribers", R.string.ChannelAddSubscribers));
GroupCreateActivity.java:                    actionBar.setTitle(LocaleController.getString("GroupAddMembers", R.string.GroupAddMembers));
GroupCreateActivity.java:                    actionBar.setTitle(LocaleController.getString("FilterAlwaysShow", R.string.FilterAlwaysShow));
GroupCreateActivity.java:                    actionBar.setTitle(LocaleController.getString("AlwaysAllow", R.string.AlwaysAllow));
GroupCreateActivity.java:                    actionBar.setTitle(LocaleController.getString("AlwaysShareWithTitle", R.string.AlwaysShareWithTitle));
GroupCreateActivity.java:                    actionBar.setTitle(LocaleController.getString("FilterNeverShow", R.string.FilterNeverShow));
GroupCreateActivity.java:                    actionBar.setTitle(LocaleController.getString("NeverAllow", R.string.NeverAllow));
GroupCreateActivity.java:                    actionBar.setTitle(LocaleController.getString("NeverShareWithTitle", R.string.NeverShareWithTitle));
GroupCreateActivity.java:                actionBar.setTitle(chatType == ChatObject.CHAT_TYPE_CHAT ? LocaleController.getString("NewGroup", R.string.NewGroup) : LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
GroupCreateActivity.java:        emptyView.title.setText(LocaleController.getString("NoResult", R.string.NoResult));
GroupCreateActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
GroupCreateActivity.java:                        builder.setMessage(LocaleController.getString("SoftUserLimitAlert", R.string.SoftUserLimitAlert));
GroupCreateActivity.java:                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
GroupCreateActivity.java:                                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("BotCantJoinGroups", R.string.BotCantJoinGroups)).show();
GroupCreateActivity.java:                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
GroupCreateActivity.java:                                    builder.setMessage(LocaleController.getString("AddBotAsAdmin", R.string.AddBotAsAdmin));
GroupCreateActivity.java:                                    builder.setPositiveButton(LocaleController.getString("MakeAdmin", R.string.MakeAdmin), (dialogInterface, i) -> {
GroupCreateActivity.java:                                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
GroupCreateActivity.java:                                    builder.setMessage(LocaleController.getString("CantAddBotAsAdmin", R.string.CantAddBotAsAdmin));
GroupCreateActivity.java:                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
GroupCreateActivity.java:        floatingButton.setContentDescription(LocaleController.getString("Next", R.string.Next));
GroupCreateActivity.java:            editText.setHintText(LocaleController.getString("AddMutual", R.string.AddMutual));
GroupCreateActivity.java:                editText.setHintText(LocaleController.getString("SearchForPeople", R.string.SearchForPeople));
GroupCreateActivity.java:                editText.setHintText(LocaleController.getString("SearchForPeopleAndGroups", R.string.SearchForPeopleAndGroups));
GroupCreateActivity.java:                editText.setHintText(LocaleController.getString("SendMessageTo", R.string.SendMessageTo));
GroupCreateActivity.java:                builder.setTitle(LocaleController.getString("AddOneMemberAlertTitle", R.string.AddOneMemberAlertTitle));
GroupCreateActivity.java:                builder.setTitle(LocaleController.formatString("AddMembersAlertTitle", R.string.AddMembersAlertTitle, LocaleController.formatPluralString("Members", selectedContacts.size())));
GroupCreateActivity.java:                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(AndroidUtilities.replaceTags(LocaleController.formatString("AddMembersAlertNamesText", R.string.AddMembersAlertNamesText, LocaleController.formatPluralString("Members", selectedContacts.size()), chat.title)));
GroupCreateActivity.java:                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AddMembersAlertNamesText", R.string.AddMembersAlertNamesText, stringBuilder, chat.title)));
GroupCreateActivity.java:                    cells[0].setText(AndroidUtilities.replaceTags(LocaleController.formatString("AddOneMemberForwardMessages", R.string.AddOneMemberForwardMessages, UserObject.getFirstName(user))), "", true, false);
GroupCreateActivity.java:                    cells[0].setText(LocaleController.getString("AddMembersForwardMessages", R.string.AddMembersForwardMessages), "", true, false);
GroupCreateActivity.java:            builder.setPositiveButton(LocaleController.getString("Add", R.string.Add), (dialogInterface, i) -> onAddToGroupDone(cells[0] != null && cells[0].isChecked() ? 100 : 0));
GroupCreateActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
GroupCreateActivity.java:                    actionBar.setSubtitle(LocaleController.formatString("MembersCountZero", R.string.MembersCountZero, LocaleController.formatPluralString("Members", maxCount)));
GroupCreateActivity.java:                    stickerEmptyView.title.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
GroupCreateActivity.java:                        cell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
GroupCreateActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("ChannelInviteViaLink", R.string.ChannelInviteViaLink), R.drawable.profile_link, false);
GroupCreateActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("InviteToGroupByLink", R.string.InviteToGroupByLink), R.drawable.profile_link, false);
GroupCreateFinalActivity.java:        actionBar.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
GroupCreateFinalActivity.java:        avatarImage.setContentDescription(LocaleController.getString("ChoosePhoto", R.string.ChoosePhoto));
GroupCreateFinalActivity.java:        editText.setHint(chatType == ChatObject.CHAT_TYPE_CHAT || chatType == ChatObject.CHAT_TYPE_MEGAGROUP ? LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder) : LocaleController.getString("EnterListName", R.string.EnterListName));
GroupCreateFinalActivity.java:        floatingButtonContainer.setContentDescription(LocaleController.getString("Done", R.string.Done));
GroupCreateFinalActivity.java:                        cell.setText(LocaleController.getString("AttachLocation", R.string.AttachLocation));
GroupInviteActivity.java:        actionBar.setTitle(LocaleController.getString("InviteLink", R.string.InviteLink));
GroupInviteActivity.java:                    getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("InviteToGroupByLink", R.string.InviteToGroupByLink)), 500);
GroupInviteActivity.java:                builder.setMessage(LocaleController.getString("RevokeAlert", R.string.RevokeAlert));
GroupInviteActivity.java:                builder.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
GroupInviteActivity.java:                builder.setPositiveButton(LocaleController.getString("RevokeButton", R.string.RevokeButton), (dialogInterface, i) -> generateLink(true));
GroupInviteActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
GroupInviteActivity.java:                    builder.setMessage(LocaleController.getString("RevokeAlertNewLink", R.string.RevokeAlertNewLink));
GroupInviteActivity.java:                    builder.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
GroupInviteActivity.java:                    builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
GroupInviteActivity.java:                        textCell.setText(LocaleController.getString("CopyLink", R.string.CopyLink), true);
GroupInviteActivity.java:                        textCell.setText(LocaleController.getString("ShareLink", R.string.ShareLink), false);
GroupInviteActivity.java:                        textCell.setText(LocaleController.getString("RevokeLink", R.string.RevokeLink), true);
GroupInviteActivity.java:                            privacyCell.setText(LocaleController.getString("ChannelLinkInfo", R.string.ChannelLinkInfo));
GroupInviteActivity.java:                            privacyCell.setText(LocaleController.getString("LinkInfo", R.string.LinkInfo));
GroupStickersActivity.java:        actionBar.setTitle(LocaleController.getString("GroupStickers", R.string.GroupStickers));
GroupStickersActivity.java:        doneItem = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
GroupStickersActivity.java:        usernameTextView.setHint(LocaleController.getString("ChooseStickerSetPlaceholder", R.string.ChooseStickerSetPlaceholder));
GroupStickersActivity.java:                            Toast.makeText(getParentActivity(), LocaleController.getString("AddStickersNotFound", R.string.AddStickersNotFound), Toast.LENGTH_SHORT).show();
GroupStickersActivity.java:                Toast.makeText(getParentActivity(), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text, Toast.LENGTH_SHORT).show();
GroupStickersActivity.java:                        String text = LocaleController.getString("ChooseStickerSetMy", R.string.ChooseStickerSetMy);
GroupStickersActivity.java:                    ((HeaderCell) holder.itemView).setText(LocaleController.getString("ChooseFromYourStickers", R.string.ChooseFromYourStickers));
GroupStickersActivity.java:                            cell.setText(LocaleController.getString("Loading", R.string.Loading), null, 0, false);
GroupStickersActivity.java:                            cell.setText(LocaleController.getString("ChooseStickerSetNotFound", R.string.ChooseStickerSetNotFound), LocaleController.getString("ChooseStickerSetNotFoundInfo", R.string.ChooseStickerSetNotFoundInfo), R.drawable.ic_smiles2_sad, false);
IdenticonActivity.java:        actionBar.setTitle(LocaleController.getString("EncryptionKey", R.string.EncryptionKey));
IdenticonActivity.java:            hash.append(AndroidUtilities.replaceTags(LocaleController.formatString("EncryptionKeyDescription", R.string.EncryptionKeyDescription, user.first_name, user.first_name)));
IdenticonActivity.java:                hash.setSpan(new URLSpanReplacement(LocaleController.getString("EncryptionKeyLink", R.string.EncryptionKeyLink)), index, index + url.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
IntroActivity.java:                LocaleController.getString("Page1Title", R.string.Page1Title),
IntroActivity.java:                LocaleController.getString("Page2Title", R.string.Page2Title),
IntroActivity.java:                LocaleController.getString("Page3Title", R.string.Page3Title),
IntroActivity.java:                LocaleController.getString("Page5Title", R.string.Page5Title),
IntroActivity.java:                LocaleController.getString("Page4Title", R.string.Page4Title),
IntroActivity.java:                LocaleController.getString("Page6Title", R.string.Page6Title)
IntroActivity.java:                LocaleController.getString("Page1Message", R.string.Page1Message),
IntroActivity.java:                LocaleController.getString("Page2Message", R.string.Page2Message),
IntroActivity.java:                LocaleController.getString("Page3Message", R.string.Page3Message),
IntroActivity.java:                LocaleController.getString("Page5Message", R.string.Page5Message),
IntroActivity.java:                LocaleController.getString("Page4Message", R.string.Page4Message),
IntroActivity.java:                LocaleController.getString("Page6Message", R.string.Page6Message)
IntroActivity.java:        startMessagingButton.setText(LocaleController.getString("StartMessaging", R.string.StartMessaging));
IntroActivity.java:                        String toSpeak = LocaleController.getString("SentAppCode", R.string.SentAppCode);;
InviteContactsActivity.java:        actionBar.setTitle(LocaleController.getString("InviteFriends", R.string.InviteFriends));
InviteContactsActivity.java:        editText.setHintText(LocaleController.getString("SearchFriends", R.string.SearchFriends));
InviteContactsActivity.java:                    emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
InviteContactsActivity.java:        emptyView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
InviteContactsActivity.java:        infoTextView.setText(LocaleController.getString("InviteFriendsHelp", R.string.InviteFriendsHelp));
InviteContactsActivity.java:        textView.setText(LocaleController.getString("InviteToTelegram", R.string.InviteToTelegram).toUpperCase());
InviteContactsActivity.java:        emptyView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
InviteContactsActivity.java:                    ((InviteTextCell) view).setTextAndIcon(LocaleController.getString("ShareTelegram", R.string.ShareTelegram), R.drawable.share);
LanguageSelectActivity.java:        actionBar.setTitle(LocaleController.getString("Language", R.string.Language));
LanguageSelectActivity.java:        item.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
LanguageSelectActivity.java:        emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
LanguageSelectActivity.java:            builder.setTitle(LocaleController.getString("DeleteLocalizationTitle", R.string.DeleteLocalizationTitle));
LanguageSelectActivity.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("DeleteLocalizationText", R.string.DeleteLocalizationText, localeInfo.name)));
LanguageSelectActivity.java:            builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
LanguageSelectActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
LanguageSelectActivity.java:                        textSettingsCell.setLanguage(localeInfo, String.format("%1$s (%2$s)", localeInfo.name, LocaleController.getString("LanguageCustom", R.string.LanguageCustom)), !last);
LaunchActivity.java:                    Browser.openUrl(LaunchActivity.this, LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl));
LaunchActivity.java:                            AndroidUtilities.runOnUIThread(() -> AlertsCreator.showSimpleAlert(fragment, LocaleController.getString("AuthAnotherClient", R.string.AuthAnotherClient), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text));
LaunchActivity.java:                            .setTitle(LocaleController.getString("NewContactAlertTitle", R.string.NewContactAlertTitle))
LaunchActivity.java:                            .setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("NewContactAlertMessage", R.string.NewContactAlertMessage, PhoneFormat.getInstance().format(finalNewContactPhone))))
LaunchActivity.java:                            .setPositiveButton(LocaleController.getString("NewContactAlertButton", R.string.NewContactAlertButton), (d, i) -> {
LaunchActivity.java:                            .setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null)
LaunchActivity.java:                args.putString("selectAlertString", LocaleController.getString("SendContactToText", R.string.SendMessagesToText));
LaunchActivity.java:                args.putString("selectAlertStringGroup", LocaleController.getString("SendContactToGroupText", R.string.SendContactToGroupText));
LaunchActivity.java:            args.putString("selectAlertString", LocaleController.getString("SendMessagesToText", R.string.SendMessagesToText));
LaunchActivity.java:            args.putString("selectAlertStringGroup", LocaleController.getString("SendMessagesToGroupText", R.string.SendMessagesToGroupText));
LaunchActivity.java:                        BulletinFactory.of(mainFragmentsStack.get(mainFragmentsStack.size() - 1)).createErrorBulletin(LocaleController.getString("ChannelPostDeleted", R.string.ChannelPostDeleted)).show();
LaunchActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LaunchActivity.java:                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("OtherLoginCode", R.string.OtherLoginCode, code)));
LaunchActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:            builder.setTitle(LocaleController.getString("AuthAnotherClient", R.string.AuthAnotherClient));
LaunchActivity.java:            builder.setMessage(LocaleController.getString("AuthAnotherClientUrl", R.string.AuthAnotherClientUrl));
LaunchActivity.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:                            args.putString("selectAlertString", LocaleController.getString("SendGameToText", R.string.SendGameToText));
LaunchActivity.java:                            args.putString("selectAlertStringGroup", LocaleController.getString("SendGameToGroupText", R.string.SendGameToGroupText));
LaunchActivity.java:                                        BulletinFactory.of(mainFragmentsStack.get(mainFragmentsStack.size() - 1)).createErrorBulletin(LocaleController.getString("BotCantJoinGroups", R.string.BotCantJoinGroups)).show();
LaunchActivity.java:                            args.putString("addToGroupAlertString", LocaleController.formatString("AddToTheGroupAlertText", R.string.AddToTheGroupAlertText, UserObject.getUserName(user), "%1$s"));
LaunchActivity.java:                                                AlertsCreator.showSimpleAlert(fragment, LocaleController.getString("JoinToGroupErrorNotExist", R.string.JoinToGroupErrorNotExist));
LaunchActivity.java:                                    BulletinFactory.of(fragment).createErrorBulletin(LocaleController.getString("FloodWait", R.string.FloodWait)).show();
LaunchActivity.java:                                    BulletinFactory.of(fragment).createErrorBulletin(LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound)).show();
LaunchActivity.java:                                                AlertsCreator.showSimpleAlert(fragment, LocaleController.getString("JoinToGroupErrorNotExist", R.string.JoinToGroupErrorNotExist));
LaunchActivity.java:                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LaunchActivity.java:                                builder.setMessage(LocaleController.getString("FloodWait", R.string.FloodWait));
LaunchActivity.java:                                builder.setTitle(LocaleController.getString("ExpiredLink", R.string.ExpiredLink));
LaunchActivity.java:                                builder.setMessage(LocaleController.getString("InviteExpired", R.string.InviteExpired));
LaunchActivity.java:                                builder.setMessage(LocaleController.getString("JoinToGroupErrorNotExist", R.string.JoinToGroupErrorNotExist));
LaunchActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LaunchActivity.java:                                    builder.setMessage(LocaleController.getString("FloodWait", R.string.FloodWait));
LaunchActivity.java:                                    builder.setMessage(LocaleController.getString("JoinToGroupErrorFull", R.string.JoinToGroupErrorFull));
LaunchActivity.java:                                    builder.setMessage(LocaleController.getString("JoinToGroupErrorNotExist", R.string.JoinToGroupErrorNotExist));
LaunchActivity.java:                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:                                AlertsCreator.showUpdateAppAlert(LaunchActivity.this, LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
LaunchActivity.java:                                showAlertDialog(AlertsCreator.createSimpleAlert(LaunchActivity.this, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text));
LaunchActivity.java:                        showAlertDialog(AlertsCreator.createSimpleAlert(LaunchActivity.this, LocaleController.getString("LanguageUnsupportedError", R.string.LanguageUnsupportedError)));
LaunchActivity.java:                        showAlertDialog(AlertsCreator.createSimpleAlert(LaunchActivity.this, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text));
LaunchActivity.java:                        showAlertDialog(AlertsCreator.createSimpleAlert(LaunchActivity.this, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text));
LaunchActivity.java:                        showAlertDialog(AlertsCreator.createSimpleAlert(LaunchActivity.this, LocaleController.getString("Theme", R.string.Theme), LocaleController.getString("ThemeNotSupported", R.string.ThemeNotSupported)));
LaunchActivity.java:                        showAlertDialog(AlertsCreator.createSimpleAlert(LaunchActivity.this, LocaleController.getString("Theme", R.string.Theme), LocaleController.getString("ThemeNotFound", R.string.ThemeNotFound)));
LaunchActivity.java:                            showAlertDialog(AlertsCreator.createSimpleAlert(LaunchActivity.this, LocaleController.getString("LinkNotFound", R.string.LinkNotFound)));
LaunchActivity.java:                                    showAlertDialog(AlertsCreator.createSimpleAlert(LaunchActivity.this, LocaleController.getString("LinkNotFound", R.string.LinkNotFound)));
LaunchActivity.java:                                names[2] = LocaleController.getString("RepliesTitle", R.string.RepliesTitle).toLowerCase();
LaunchActivity.java:                                names[2] = LocaleController.getString("SavedMessages", R.string.SavedMessages).toLowerCase();
LaunchActivity.java:                            Toast.makeText(LaunchActivity.this, getStringForLanguageAlert(shorname.equals("en") ? englishLocaleStrings : systemLocaleStrings, "ChangeLanguageLater", R.string.ChangeLanguageLater), Toast.LENGTH_LONG).show();
LaunchActivity.java:                showPermissionErrorAlert(LocaleController.getString("PermissionStorage", R.string.PermissionStorage));
LaunchActivity.java:                showPermissionErrorAlert(LocaleController.getString("PermissionContacts", R.string.PermissionContacts));
LaunchActivity.java:                showPermissionErrorAlert(LocaleController.getString("PermissionNoAudio", R.string.PermissionNoAudio));
LaunchActivity.java:                showPermissionErrorAlert(LocaleController.getString("PermissionNoCamera", R.string.PermissionNoCamera));
LaunchActivity.java:                showPermissionErrorAlert(LocaleController.getString("PermissionNoCamera", R.string.PermissionNoCamera));
LaunchActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LaunchActivity.java:        builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
LaunchActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LaunchActivity.java:                builder.setNegativeButton(LocaleController.getString("MoreInfo", R.string.MoreInfo), (dialogInterface, i) -> {
LaunchActivity.java:                builder.setMessage(LocaleController.getString("NobodyLikesSpam3", R.string.NobodyLikesSpam3));
LaunchActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:                builder.setMessage(LocaleController.getString("NobodyLikesSpam1", R.string.NobodyLikesSpam1));
LaunchActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:                builder.setMessage(LocaleController.getString("NobodyLikesSpam2", R.string.NobodyLikesSpam2));
LaunchActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:                    builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
LaunchActivity.java:                    builder.setNegativeButton(LocaleController.getString("LogOut", R.string.LogOut), (dialog, which) -> MessagesController.getInstance(currentAccount).performLogout(2));
LaunchActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:                builder.setTitle(LocaleController.getString("Proxy", R.string.Proxy));
LaunchActivity.java:                builder.setMessage(LocaleController.getString("UseProxyTelegramError", R.string.UseProxyTelegramError));
LaunchActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LaunchActivity.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LaunchActivity.java:            builder.setNegativeButton(LocaleController.getString("ShareYouLocationUnableManually", R.string.ShareYouLocationUnableManually), (dialogInterface, i) -> {
LaunchActivity.java:            builder.setMessage(LocaleController.getString("ShareYouLocationUnable", R.string.ShareYouLocationUnable));
LaunchActivity.java:            builder.setTitle(LocaleController.getString("UpdateContactsTitle", R.string.UpdateContactsTitle));
LaunchActivity.java:            builder.setMessage(LocaleController.getString("UpdateContactsMessage", R.string.UpdateContactsMessage));
LaunchActivity.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> ContactsController.getInstance(account).syncPhoneBookByAlert(contactHashMap, first, schedule, false));
LaunchActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), (dialog, which) -> ContactsController.getInstance(account).syncPhoneBookByAlert(contactHashMap, first, schedule, true));
LaunchActivity.java:            builder.setTitle(getStringForLanguageAlert(systemLocaleStrings, "ChooseYourLanguage", R.string.ChooseYourLanguage));
LaunchActivity.java:            builder.setSubtitle(getStringForLanguageAlert(englishLocaleStrings, "ChooseYourLanguage", R.string.ChooseYourLanguage));
LaunchActivity.java:            final String englishName = getStringForLanguageAlert(systemLocaleStrings, "English", R.string.English);
LaunchActivity.java:            cell.setValue(getStringForLanguageAlert(systemLocaleStrings, "ChooseYourLanguageOther", R.string.ChooseYourLanguageOther), getStringForLanguageAlert(englishLocaleStrings, "ChooseYourLanguageOther", R.string.ChooseYourLanguageOther));
LaunchActivity.java:            builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
LaunchActivity.java:            titleId = R.string.WaitingForNetwork;
LaunchActivity.java:            titleId = R.string.Updating;
LaunchActivity.java:            titleId = R.string.ConnectingToProxy;
LaunchActivity.java:            titleId = R.string.Connecting;
LinkEditActivity.java:            actionBar.setTitle(LocaleController.getString("NewLink", R.string.NewLink));
LinkEditActivity.java:            actionBar.setTitle(LocaleController.getString("EditLink", R.string.EditLink));
LinkEditActivity.java:            buttonTextView.setText(LocaleController.getString("CreateLink", R.string.CreateLink));
LinkEditActivity.java:            buttonTextView.setText(LocaleController.getString("SaveLink", R.string.SaveLink));
LinkEditActivity.java:        timeHeaderCell.setText(LocaleController.getString("LimitByPeriod", R.string.LimitByPeriod));
LinkEditActivity.java:        timeEditText.setHint(LocaleController.getString("TimeLimitHint", R.string.TimeLimitHint));
LinkEditActivity.java:        divider.setText(LocaleController.getString("TimeLimitHelp", R.string.TimeLimitHelp));
LinkEditActivity.java:        usesHeaderCell.setText(LocaleController.getString("LimitNumberOfUses", R.string.LimitNumberOfUses));
LinkEditActivity.java:        usesEditText.setHint(LocaleController.getString("UsesLimitHint", R.string.UsesLimitHint));
LinkEditActivity.java:        dividerUses.setText(LocaleController.getString("UsesLimitHelp", R.string.UsesLimitHelp));
LinkEditActivity.java:            revokeLink.setText(LocaleController.getString("RevokeLink", R.string.RevokeLink), false);
LinkEditActivity.java:                builder2.setMessage(LocaleController.getString("RevokeAlert", R.string.RevokeAlert));
LinkEditActivity.java:                builder2.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
LinkEditActivity.java:                builder2.setPositiveButton(LocaleController.getString("RevokeButton", R.string.RevokeButton), (dialogInterface2, i2) -> {
LinkEditActivity.java:                builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
LinkEditActivity.java:                options[i] = LocaleController.getString("NoLimit", R.string.NoLimit);
LinkEditActivity.java:                options[i] = LocaleController.getString("NoLimit", R.string.NoLimit);
LinkEditActivity.java:                        options[i] = LocaleController.getString("MessageScheduleToday", R.string.MessageScheduleToday);
LinkEditActivity.java:        timeChooseView.setOptions(4, LocaleController.formatPluralString("Hours", 1), LocaleController.formatPluralString("Days", 1), LocaleController.formatPluralString("Weeks", 1), LocaleController.getString("NoLimit", R.string.NoLimit));
LinkEditActivity.java:        usesChooseView.setOptions(4, "1", "10", "100", LocaleController.getString("NoLimit", R.string.NoLimit));
LocationActivity.java:            addressTextView.setText(LocaleController.getString("TapToSendLocation", R.string.TapToSendLocation));
LocationActivity.java:            actionBar.setTitle(LocaleController.getString("ChatLocation", R.string.ChatLocation));
LocationActivity.java:                actionBar.setTitle(LocaleController.getString("AttachLiveLocation", R.string.AttachLiveLocation));
LocationActivity.java:                    actionBar.setTitle(LocaleController.getString("SharedPlace", R.string.SharedPlace));
LocationActivity.java:                    actionBar.setTitle(LocaleController.getString("ChatLocation", R.string.ChatLocation));
LocationActivity.java:                otherItem.addSubItem(open_in, R.drawable.msg_openin, LocaleController.getString("OpenInExternalApp", R.string.OpenInExternalApp));
LocationActivity.java:                    otherItem.addSubItem(share_live_location, R.drawable.menu_location, LocaleController.getString("SendLiveLocationMenu", R.string.SendLiveLocationMenu));
LocationActivity.java:                otherItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
LocationActivity.java:            actionBar.setTitle(LocaleController.getString("ShareLocation", R.string.ShareLocation));
LocationActivity.java:                searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
LocationActivity.java:                searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));
LocationActivity.java:            searchAreaButton.setText(LocaleController.getString("PlacesInThisArea", R.string.PlacesInThisArea));
LocationActivity.java:        mapTypeButton.addSubItem(map_list_menu_map, R.drawable.msg_map, LocaleController.getString("Map", R.string.Map));
LocationActivity.java:        mapTypeButton.addSubItem(map_list_menu_satellite, R.drawable.msg_satellite, LocaleController.getString("Satellite", R.string.Satellite));
LocationActivity.java:        mapTypeButton.addSubItem(map_list_menu_hybrid, R.drawable.msg_hybrid, LocaleController.getString("Hybrid", R.string.Hybrid));
LocationActivity.java:        mapTypeButton.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
LocationActivity.java:        locationButton.setContentDescription(LocaleController.getString("AccDescrMyLocation", R.string.AccDescrMyLocation));
LocationActivity.java:        proximityButton.setContentDescription(LocaleController.getString("AccDescrLocationNotify", R.string.AccDescrLocationNotify));
LocationActivity.java:        emptyTitleTextView.setText(LocaleController.getString("NoPlacesFound", R.string.NoPlacesFound));
LocationActivity.java:                        emptySubtitleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("NoPlacesFoundInfo", R.string.NoPlacesFoundInfo, searchAdapter.getLastSearchString())));
LocationActivity.java:                builder.setTitle(LocaleController.getString("ShareLocationAlertTitle", R.string.ShareLocationAlertTitle));
LocationActivity.java:                builder.setMessage(LocaleController.getString("ShareLocationAlertText", R.string.ShareLocationAlertText));
LocationActivity.java:                builder.setPositiveButton(LocaleController.getString("ShareLocationAlertButton", R.string.ShareLocationAlertButton), (dialog, id) -> shareLiveLocation(user, 900, radius));
LocationActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
LocationActivity.java:                builder.setTitle(LocaleController.getString("GpsDisabledAlertTitle", R.string.GpsDisabledAlertTitle));
LocationActivity.java:                builder.setMessage(LocaleController.getString("GpsDisabledAlertText", R.string.GpsDisabledAlertText));
LocationActivity.java:                builder.setPositiveButton(LocaleController.getString("ConnectingToProxyEnable", R.string.ConnectingToProxyEnable), (dialog, id) -> {
LocationActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
LocationActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LocationActivity.java:            builder.setMessage(LocaleController.getString("PermissionNoLocationPosition", R.string.PermissionNoLocationPosition));
LocationActivity.java:            builder.setMessage(LocaleController.getString("PermissionNoLocation", R.string.PermissionNoLocation));
LocationActivity.java:        builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
LocationActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LocationActivity.java:                hintView.setOverrideText(LocaleController.formatString("ProximityTooltioUser", R.string.ProximityTooltioUser, UserObject.getFirstName(user)));
LocationActivity.java:                hintView.setOverrideText(LocaleController.getString("ProximityTooltioGroup", R.string.ProximityTooltioGroup));
LoginActivity.java:        actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:                    String toSpeak = LocaleController.getString("SentAppCode", R.string.SentAppCode);
LoginActivity.java:        doneItem.setContentDescription(LocaleController.getString("Done", R.string.Done));
LoginActivity.java:        floatingButtonContainer.setContentDescription(LocaleController.getString("Done", R.string.Done));
LoginActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LoginActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:            builder.setMessage(LocaleController.getString("BannedPhoneNumber", R.string.BannedPhoneNumber));
LoginActivity.java:            builder.setMessage(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
LoginActivity.java:        builder.setNeutralButton(LocaleController.getString("BotHelp", R.string.BotHelp), (dialog, which) -> {
LoginActivity.java:                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
LoginActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LoginActivity.java:            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:            builder.setMessage(LocaleController.getString("StopLoading", R.string.StopLoading));
LoginActivity.java:            builder.setPositiveButton(LocaleController.getString("WaitMore", R.string.WaitMore), null);
LoginActivity.java:            builder.setNegativeButton(LocaleController.getString("Stop", R.string.Stop), (dialogInterface, i) -> {
LoginActivity.java:                        countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
LoginActivity.java:                                countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
LoginActivity.java:                            countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
LoginActivity.java:            textView2.setText(LocaleController.getString("StartText", R.string.StartText));
LoginActivity.java:                checkBoxCell.setText(LocaleController.getString("SyncContacts", R.string.SyncContacts), "", syncContacts, false);
LoginActivity.java:                            visibleToast = Toast.makeText(getParentActivity(), LocaleController.getString("SyncContactsOn", R.string.SyncContactsOn), Toast.LENGTH_SHORT);
LoginActivity.java:                            visibleToast = Toast.makeText(getParentActivity(), LocaleController.getString("SyncContactsOff", R.string.SyncContactsOff), Toast.LENGTH_SHORT);
LoginActivity.java:                countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
LoginActivity.java:                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LoginActivity.java:                                builder.setMessage(LocaleController.getString("AllowReadCallAndLog", R.string.AllowReadCallAndLog));
LoginActivity.java:                                builder.setMessage(LocaleController.getString("AllowReadCallLog", R.string.AllowReadCallLog));
LoginActivity.java:                                builder.setMessage(LocaleController.getString("AllowReadCall", R.string.AllowReadCall));
LoginActivity.java:                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
LoginActivity.java:                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("WrongCountry", R.string.WrongCountry));
LoginActivity.java:                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
LoginActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:                        builder.setMessage(LocaleController.getString("AccountAlreadyLoggedIn", R.string.AccountAlreadyLoggedIn));
LoginActivity.java:                        builder.setPositiveButton(LocaleController.getString("AccountSwitch", R.string.AccountSwitch), (dialog, which) -> {
LoginActivity.java:                        builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("PhoneNumberFlood", R.string.PhoneNumberFlood));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
LoginActivity.java:                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LoginActivity.java:                                    builder.setMessage(LocaleController.getString("AllowFillNumber", R.string.AllowFillNumber));
LoginActivity.java:            return LocaleController.getString("YourPhone", R.string.YourPhone);
LoginActivity.java:                    titleTextView.setText(LocaleController.getString("SentAppCodeTitle", R.string.SentAppCodeTitle));
LoginActivity.java:                    titleTextView.setText(LocaleController.getString("SentSmsCodeTitle", R.string.SentSmsCodeTitle));
LoginActivity.java:                problemText.setText(LocaleController.getString("DidNotGetTheCodeSms", R.string.DidNotGetTheCodeSms));
LoginActivity.java:                problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
LoginActivity.java:                return LocaleController.getString("YourCode", R.string.YourCode);
LoginActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.getString("SentAppCode", R.string.SentAppCode));
LoginActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentSmsCode", R.string.SentSmsCode, LocaleController.addNbsp(number)));
LoginActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallCode", R.string.SentCallCode, LocaleController.addNbsp(number)));
LoginActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallOnly", R.string.SentCallOnly, LocaleController.addNbsp(number)));
LoginActivity.java:                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
LoginActivity.java:                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 1, 0));
LoginActivity.java:                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 2, 0));
LoginActivity.java:                timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 2, 0));
LoginActivity.java:                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
LoginActivity.java:                                timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, minutes, seconds));
LoginActivity.java:                                        timeText.setText(LocaleController.getString("Calling", R.string.Calling));
LoginActivity.java:                                        timeText.setText(LocaleController.getString("SendingSms", R.string.SendingSms));
LoginActivity.java:                                    AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), error1.text);
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
LoginActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:                builder.setMessage(LocaleController.getString("StopVerification", R.string.StopVerification));
LoginActivity.java:                builder.setPositiveButton(LocaleController.getString("Continue", R.string.Continue), null);
LoginActivity.java:                builder.setNegativeButton(LocaleController.getString("Stop", R.string.Stop), (dialogInterface, i) -> {
LoginActivity.java:            confirmTextView.setText(LocaleController.getString("LoginPasswordText", R.string.LoginPasswordText));
LoginActivity.java:            codeField.setHint(LocaleController.getString("LoginPassword", R.string.LoginPassword));
LoginActivity.java:            cancelButton.setText(LocaleController.getString("ForgotPassword", R.string.ForgotPassword));
LoginActivity.java:                            builder.setMessage(LocaleController.formatString("RestoreEmailSent", R.string.RestoreEmailSent, res.email_pattern));
LoginActivity.java:                            builder.setTitle(LocaleController.getString("RestoreEmailSentTitle", R.string.RestoreEmailSentTitle));
LoginActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
LoginActivity.java:                    needShowAlert(LocaleController.getString("RestorePasswordNoEitle", R.string.RestorePasswordNoEmailTitle), LocaleController.getString("RestorePasswordNoEmailText", R.string.RestorePasswordNoEmailText));
LoginActivity.java:            resetAccountButton.setText(LocaleController.getString("ResetMyAccount", R.string.ResetMyAccount));
LoginActivity.java:                builder.setMessage(LocaleController.getString("ResetMyAccountWarningText", R.string.ResetMyAccountWarningText));
LoginActivity.java:                builder.setTitle(LocaleController.getString("ResetMyAccountWarning", R.string.ResetMyAccountWarning));
LoginActivity.java:                builder.setPositiveButton(LocaleController.getString("ResetMyAccountWarningReset", R.string.ResetMyAccountWarningReset), (dialogInterface, i) -> {
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ResetAccountCancelledAlert", R.string.ResetAccountCancelledAlert));
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
LoginActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
LoginActivity.java:            resetAccountText.setText(LocaleController.getString("ResetMyAccountText", R.string.ResetMyAccountText));
LoginActivity.java:            return LocaleController.getString("LoginPassword", R.string.LoginPassword);
LoginActivity.java:                codeField.setHint(LocaleController.getString("LoginPassword", R.string.LoginPassword));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
LoginActivity.java:                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
LoginActivity.java:            resetAccountText.setText(LocaleController.getString("ResetAccountStatus", R.string.ResetAccountStatus));
LoginActivity.java:            resetAccountButton.setText(LocaleController.getString("ResetAccountButton", R.string.ResetAccountButton));
LoginActivity.java:                builder.setMessage(LocaleController.getString("ResetMyAccountWarningText", R.string.ResetMyAccountWarningText));
LoginActivity.java:                builder.setTitle(LocaleController.getString("ResetMyAccountWarning", R.string.ResetMyAccountWarning));
LoginActivity.java:                builder.setPositiveButton(LocaleController.getString("ResetMyAccountWarningReset", R.string.ResetMyAccountWarningReset), (dialogInterface, i) -> {
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ResetAccountCancelledAlert", R.string.ResetAccountCancelledAlert));
LoginActivity.java:                                needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
LoginActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
LoginActivity.java:            return LocaleController.getString("ResetAccount", R.string.ResetAccount);
LoginActivity.java:            confirmTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("ResetAccountInfo", R.string.ResetAccountInfo, LocaleController.addNbsp(PhoneFormat.getInstance().format("+" + requestPhone)))));
LoginActivity.java:            confirmTextView.setText(LocaleController.getString("RestoreEmailSentInfo", R.string.RestoreEmailSentInfo));
LoginActivity.java:            codeField.setHint(LocaleController.getString("PasswordCode", R.string.PasswordCode));
LoginActivity.java:                builder.setMessage(LocaleController.getString("RestoreEmailTroubleText", R.string.RestoreEmailTroubleText));
LoginActivity.java:                builder.setTitle(LocaleController.getString("RestorePasswordNoEmailTitle", R.string.RestorePasswordNoEmailTitle));
LoginActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> setPage(6, true, new Bundle(), true));
LoginActivity.java:            return LocaleController.getString("LoginPassword", R.string.LoginPassword);
LoginActivity.java:            cancelButton.setText(LocaleController.formatString("RestoreEmailTrouble", R.string.RestoreEmailTrouble, email_unconfirmed_pattern));
LoginActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> onAuthSuccess((TLRPC.TL_auth_authorization) response));
LoginActivity.java:                    builder.setMessage(LocaleController.getString("PasswordReset", R.string.PasswordReset));
LoginActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
LoginActivity.java:            builder.setTitle(LocaleController.getString("TermsOfService", R.string.TermsOfService));
LoginActivity.java:                builder.setPositiveButton(LocaleController.getString("Accept", R.string.Accept), (dialog, which) -> {
LoginActivity.java:                builder.setNegativeButton(LocaleController.getString("Decline", R.string.Decline), (dialog, which) -> {
LoginActivity.java:                    builder1.setTitle(LocaleController.getString("TermsOfService", R.string.TermsOfService));
LoginActivity.java:                    builder1.setMessage(LocaleController.getString("TosDecline", R.string.TosDecline));
LoginActivity.java:                    builder1.setPositiveButton(LocaleController.getString("SignUp", R.string.SignUp), (dialog1, which1) -> {
LoginActivity.java:                    builder1.setNegativeButton(LocaleController.getString("Decline", R.string.Decline), (dialog12, which12) -> {
LoginActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
LoginActivity.java:            textView.setText(LocaleController.getString("RegisterText2", R.string.RegisterText2));
LoginActivity.java:            firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
LoginActivity.java:            lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
LoginActivity.java:            wrongNumber.setText(LocaleController.getString("CancelRegistration", R.string.CancelRegistration));
LoginActivity.java:            String str = LocaleController.getString("TermsOfServiceLogin", R.string.TermsOfServiceLogin);
LoginActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
LoginActivity.java:                builder.setMessage(LocaleController.getString("AreYouSureRegistration", R.string.AreYouSureRegistration));
LoginActivity.java:                builder.setNegativeButton(LocaleController.getString("Stop", R.string.Stop), (dialogInterface, i) -> {
LoginActivity.java:                builder.setPositiveButton(LocaleController.getString("Continue", R.string.Continue), null);
LoginActivity.java:            return LocaleController.getString("YourName", R.string.YourName);
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
LoginActivity.java:                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
LogoutActivity.java:        actionBar.setTitle(LocaleController.getString("LogOutTitle", R.string.LogOutTitle));
LogoutActivity.java:                builder.setMessage(LocaleController.getString("AreYouSureLogout", R.string.AreYouSureLogout));
LogoutActivity.java:                builder.setTitle(LocaleController.getString("LogOut", R.string.LogOut));
LogoutActivity.java:                builder.setPositiveButton(LocaleController.getString("LogOut", R.string.LogOut), (dialogInterface, i) -> MessagesController.getInstance(currentAccount).performLogout(1));
LogoutActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
LogoutActivity.java:                        view.setText(LocaleController.getString("AlternativeOptions", R.string.AlternativeOptions));
LogoutActivity.java:                        view.setTextAndValueAndIcon(LocaleController.getString("AddAnotherAccount", R.string.AddAnotherAccount), LocaleController.getString("AddAnotherAccountInfo", R.string.AddAnotherAccountInfo), R.drawable.actions_addmember2, true);
LogoutActivity.java:                        view.setTextAndValueAndIcon(LocaleController.getString("SetPasscode", R.string.SetPasscode), LocaleController.getString("SetPasscodeInfo", R.string.SetPasscodeInfo), R.drawable.menu_passcode, true);
LogoutActivity.java:                        view.setTextAndValueAndIcon(LocaleController.getString("ClearCache", R.string.ClearCache), LocaleController.getString("ClearCacheInfo", R.string.ClearCacheInfo), R.drawable.menu_clearcache, true);
LogoutActivity.java:                        view.setTextAndValueAndIcon(LocaleController.getString("ChangePhoneNumber", R.string.ChangePhoneNumber), LocaleController.getString("ChangePhoneNumberInfo", R.string.ChangePhoneNumberInfo), R.drawable.menu_newphone, true);
LogoutActivity.java:                        view.setTextAndValueAndIcon(LocaleController.getString("ContactSupport", R.string.ContactSupport), LocaleController.getString("ContactSupportInfo", R.string.ContactSupportInfo), R.drawable.menu_support, false);
LogoutActivity.java:                        view.setText(LocaleController.getString("LogOutTitle", R.string.LogOutTitle), false);
LogoutActivity.java:                        view.setText(LocaleController.getString("LogOutInfo", R.string.LogOutInfo));
ManageLinksActivity.java:        actionBar.setTitle(LocaleController.getString("InviteLinks", R.string.InviteLinks));
ManageLinksActivity.java:                builder.setTitle(LocaleController.getString("DeleteAllRevokedLinks", R.string.DeleteAllRevokedLinks));
ManageLinksActivity.java:                builder.setMessage(LocaleController.getString("DeleteAllRevokedLinkHelp", R.string.DeleteAllRevokedLinkHelp));
ManageLinksActivity.java:                builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface2, i2) -> {
ManageLinksActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ManageLinksActivity.java:            messageTextView.setText(isChannel ? LocaleController.getString("PrimaryLinkHelpChannel", R.string.PrimaryLinkHelpChannel) : LocaleController.getString("PrimaryLinkHelp", R.string.PrimaryLinkHelp));
ManageLinksActivity.java:                    revokeAll.setText(LocaleController.getString("DeleteAllRevokedLinks", R.string.DeleteAllRevokedLinks), false);
ManageLinksActivity.java:                    cell.setText(LocaleController.getString("CreateNewLinkHelp", R.string.CreateNewLinkHelp));
ManageLinksActivity.java:                            headerCell.setText(LocaleController.getString("PublicLink", R.string.PublicLink));
ManageLinksActivity.java:                            headerCell.setText(LocaleController.getString("ChannelInviteLinkTitle", R.string.ChannelInviteLinkTitle));
ManageLinksActivity.java:                            headerCell.setText(LocaleController.getString("PermanentLinkForThisAdmin", R.string.PermanentLinkForThisAdmin));
ManageLinksActivity.java:                        headerCell.setText(LocaleController.getString("RevokedLinks", R.string.RevokedLinks));
ManageLinksActivity.java:                        headerCell.setText(LocaleController.getString("LinksCreatedByThisAdmin", R.string.LinksCreatedByThisAdmin));
ManageLinksActivity.java:                        headerCell.setText(LocaleController.getString("LinksCreatedByOtherAdmins", R.string.LinksCreatedByOtherAdmins));
ManageLinksActivity.java:                    textCell.setTextAndIcon(LocaleController.getString("CreateNewLink", R.string.CreateNewLink), combinedDrawable, !invites.isEmpty());
ManageLinksActivity.java:                    BulletinFactory.of(this).createSimpleBulletin(R.raw.linkbroken, LocaleController.getString("InviteRevokedHint", R.string.InviteRevokedHint)).show();
ManageLinksActivity.java:                    items.add(LocaleController.getString("Delete", R.string.Delete));
ManageLinksActivity.java:                    items.add(LocaleController.getString("CopyLink", R.string.CopyLink));
ManageLinksActivity.java:                    items.add(LocaleController.getString("ShareLink", R.string.ShareLink));
ManageLinksActivity.java:                        items.add(LocaleController.getString("EditLink", R.string.EditLink));
ManageLinksActivity.java:                        items.add(LocaleController.getString("RevokeLink", R.string.RevokeLink));
ManageLinksActivity.java:                                startActivityForResult(Intent.createChooser(intent, LocaleController.getString("InviteToGroupByLink", R.string.InviteToGroupByLink)), 500);
ManageLinksActivity.java:                            builder2.setMessage(LocaleController.getString("RevokeAlert", R.string.RevokeAlert));
ManageLinksActivity.java:                            builder2.setTitle(LocaleController.getString("RevokeLink", R.string.RevokeLink));
ManageLinksActivity.java:                            builder2.setPositiveButton(LocaleController.getString("RevokeButton", R.string.RevokeButton), (dialogInterface2, i2) -> {
ManageLinksActivity.java:                            builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ManageLinksActivity.java:                            builder2.setTitle(LocaleController.getString("DeleteLink", R.string.DeleteLink));
ManageLinksActivity.java:                            builder2.setMessage(LocaleController.getString("DeleteLinkHelp", R.string.DeleteLinkHelp));
ManageLinksActivity.java:                            builder2.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface2, i2) -> {
ManageLinksActivity.java:                            builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ManageLinksActivity.java:                builder.setTitle(LocaleController.getString("InviteLink", R.string.InviteLink));
ManageLinksActivity.java:                joinedString = LocaleController.getString("NoOneJoinedYet", R.string.NoOneJoinedYet);
ManageLinksActivity.java:                spannableStringBuilder.append(LocaleController.getString("Permanent", R.string.Permanent));
ManageLinksActivity.java:                    joinedString = LocaleController.getString("NoOneJoined", R.string.NoOneJoined);
ManageLinksActivity.java:                    spannableStringBuilder.append(LocaleController.getString("LinkLimitReached", R.string.LinkLimitReached));
ManageLinksActivity.java:                    spannableStringBuilder.append(invite.revoked ? LocaleController.getString("Revoked", R.string.Revoked) : LocaleController.getString("Expired", R.string.Expired));
ManageLinksActivity.java:                    BulletinFactory.of(this).createSimpleBulletin(R.raw.linkbroken, LocaleController.getString("InviteRevokedHint", R.string.InviteRevokedHint)).show();
MediaActivity.java:                        actionBar.setTitle(LocaleController.getString("SavedMessages", R.string.SavedMessages));
MediaActivity.java:            actionBar.setTitle(LocaleController.getString("SharedContentTitle", R.string.SharedContentTitle));
MediaActivity.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
MediaActivity.java:        searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));
MediaActivity.java:            actionModeViews.add(gotoItem = actionMode.addItemWithWidth(gotochat, R.drawable.msg_message, AndroidUtilities.dp(54), LocaleController.getString("AccDescrGoToMessage", R.string.AccDescrGoToMessage)));
MediaActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(forward, R.drawable.msg_forward, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward)));
MediaActivity.java:        actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete)));
MediaActivity.java:            mediaPages[a].emptyView.title.setText(LocaleController.getString("NoResult", R.string.NoResult));
MediaActivity.java:            mediaPages[a].emptyView.subtitle.setText(LocaleController.getString("SearchEmptyViewFilteredSubtitle2", R.string.SearchEmptyViewFilteredSubtitle2));
MediaActivity.java:                    scrollSlidingTextTabStrip.addTextTab(0, LocaleController.getString("SharedMediaTab2", R.string.SharedMediaTab2));
MediaActivity.java:                    scrollSlidingTextTabStrip.addTextTab(1, LocaleController.getString("SharedFilesTab2", R.string.SharedFilesTab2));
MediaActivity.java:                        scrollSlidingTextTabStrip.addTextTab(3, LocaleController.getString("SharedLinksTab2", R.string.SharedLinksTab2));
MediaActivity.java:                        scrollSlidingTextTabStrip.addTextTab(4, LocaleController.getString("SharedMusicTab2", R.string.SharedMusicTab2));
MediaActivity.java:                            scrollSlidingTextTabStrip.addTextTab(4, LocaleController.getString("SharedMusicTab2", R.string.SharedMusicTab2));
MediaActivity.java:                    scrollSlidingTextTabStrip.addTextTab(2, LocaleController.getString("SharedVoiceTab2", R.string.SharedVoiceTab2));
MediaActivity.java:                builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
MessageStatisticActivity.java:        emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
MessageStatisticActivity.java:        loadingTitle.setText(LocaleController.getString("LoadingStats", R.string.LoadingStats));
MessageStatisticActivity.java:        loadingSubtitle.setText(LocaleController.getString("LoadingStatsDescription", R.string.LoadingStatsDescription));
MessageStatisticActivity.java:            headerItem.addSubItem(1, R.drawable.msg_stats, LocaleController.getString("ViewChannelStats", R.string.ViewChannelStats));
MessageStatisticActivity.java:            interactionsViewData = StatisticActivity.createViewData(res.views_graph, LocaleController.getString("InteractionsChartTitle", R.string.InteractionsChartTitle), 1, false);
MessageStatisticActivity.java:                        headerCell.setText(LocaleController.formatString("StatisticOverview", R.string.StatisticOverview));
MessageStatisticActivity.java:            title[0].setText(LocaleController.getString("StatisticViews", R.string.StatisticViews));
MessageStatisticActivity.java:                title[1].setText(LocaleController.formatString("PublicShares", R.string.PublicShares));
MessageStatisticActivity.java:                title[2].setText(LocaleController.formatString("PrivateShares", R.string.PrivateShares));
NewContactActivity.java:                    String toSpeak = LocaleController.getString("SentAppCode", R.string.SentAppCode);
NewContactActivity.java:        actionBar.setTitle(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
NewContactActivity.java:                            String toSpeak = LocaleController.getString("SentAppCode", R.string.SentAppCode);
NewContactActivity.java:                            String toSpeak = LocaleController.getString("SentAppCode", R.string.SentAppCode);
NewContactActivity.java:                            String toSpeak = LocaleController.getString("SentAppCode", R.string.SentAppCode);
NewContactActivity.java:                                    builder.setTitle(LocaleController.getString("ContactNotRegisteredTitle", R.string.ContactNotRegisteredTitle));
NewContactActivity.java:                                    builder.setMessage(LocaleController.formatString("ContactNotRegistered", R.string.ContactNotRegistered, ContactsController.formatName(inputPhoneContact.first_name, inputPhoneContact.last_name)));
NewContactActivity.java:                                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
NewContactActivity.java:                                    builder.setPositiveButton(LocaleController.getString("Invite", R.string.Invite), (dialog, which) -> {
NewContactActivity.java:        editDoneItem.setContentDescription(LocaleController.getString("Done", R.string.Done));
NewContactActivity.java:        firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
NewContactActivity.java:        lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
NewContactActivity.java:                    countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
NewContactActivity.java:                            countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
NewContactActivity.java:                        countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
NewContactActivity.java:                countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
NotificationsCustomSettingsActivity.java:            actionBar.setTitle(LocaleController.getString("NotificationsExceptions", R.string.NotificationsExceptions));
NotificationsCustomSettingsActivity.java:            actionBar.setTitle(LocaleController.getString("Notifications", R.string.Notifications));
NotificationsCustomSettingsActivity.java:                    emptyView.setText(LocaleController.getString("NoExceptions", R.string.NoExceptions));
NotificationsCustomSettingsActivity.java:                            emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
NotificationsCustomSettingsActivity.java:            searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
NotificationsCustomSettingsActivity.java:        emptyView.setText(LocaleController.getString("NoExceptions", R.string.NoExceptions));
NotificationsCustomSettingsActivity.java:                builder.setTitle(LocaleController.getString("NotificationsDeleteAllExceptionTitle", R.string.NotificationsDeleteAllExceptionTitle));
NotificationsCustomSettingsActivity.java:                builder.setMessage(LocaleController.getString("NotificationsDeleteAllExceptionAlert", R.string.NotificationsDeleteAllExceptionAlert));
NotificationsCustomSettingsActivity.java:                builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
NotificationsCustomSettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
NotificationsCustomSettingsActivity.java:                        name = LocaleController.getString("SoundDefault", R.string.SoundDefault);
NotificationsCustomSettingsActivity.java:                        cell.setData(object, null, LocaleController.getString("NotificationsOn", R.string.NotificationsOn), 0, position != globalSearch.size() - 1);
NotificationsCustomSettingsActivity.java:                    cell.setText(LocaleController.getString("AddToExceptions", R.string.AddToExceptions));
NotificationsCustomSettingsActivity.java:                        headerCell.setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
NotificationsCustomSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("MessagePreview", R.string.MessagePreview), enabled, true);
NotificationsCustomSettingsActivity.java:                    textColorCell.setTextAndColor(LocaleController.getString("LedColor", R.string.LedColor), color, true);
NotificationsCustomSettingsActivity.java:                            value = preferences.getString("GlobalSound", LocaleController.getString("SoundDefault", R.string.SoundDefault));
NotificationsCustomSettingsActivity.java:                            value = preferences.getString("GroupSound", LocaleController.getString("SoundDefault", R.string.SoundDefault));
NotificationsCustomSettingsActivity.java:                            value = preferences.getString("ChannelSound", LocaleController.getString("SoundDefault", R.string.SoundDefault));
NotificationsCustomSettingsActivity.java:                            value = LocaleController.getString("NoSound", R.string.NoSound);
NotificationsCustomSettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("Sound", R.string.Sound), value, true);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDefault", R.string.VibrationDefault), true);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), true);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled), true);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Long", R.string.Long), true);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("OnlyIfSilent", R.string.OnlyIfSilent), true);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh), false);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPriorityUrgent", R.string.NotificationsPriorityUrgent), false);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPriorityLow", R.string.NotificationsPriorityLow), false);
NotificationsCustomSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPriorityMedium", R.string.NotificationsPriorityMedium), false);
NotificationsCustomSettingsActivity.java:                            value = LocaleController.getString("NoPopup", R.string.NoPopup);
NotificationsCustomSettingsActivity.java:                            value = LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn);
NotificationsCustomSettingsActivity.java:                            value = LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff);
NotificationsCustomSettingsActivity.java:                            value = LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup);
NotificationsCustomSettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("PopupNotification", R.string.PopupNotification), value, true);
NotificationsCustomSettingsActivity.java:                        text = LocaleController.getString("NotificationsForPrivateChats", R.string.NotificationsForPrivateChats);
NotificationsCustomSettingsActivity.java:                        text = LocaleController.getString("NotificationsForGroups", R.string.NotificationsForGroups);
NotificationsCustomSettingsActivity.java:                        text = LocaleController.getString("NotificationsForChannels", R.string.NotificationsForChannels);
NotificationsCustomSettingsActivity.java:                        builder.append(LocaleController.getString("NotificationsOn", R.string.NotificationsOn));
NotificationsCustomSettingsActivity.java:                        builder.append(LocaleController.getString("NotificationsOff", R.string.NotificationsOff));
NotificationsCustomSettingsActivity.java:                        builder.append(LocaleController.formatString("NotificationsOffUntil", R.string.NotificationsOffUntil, LocaleController.stringForMessageListDate(offUntil)));
NotificationsCustomSettingsActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("NotificationsAddAnException", R.string.NotificationsAddAnException), R.drawable.actions_addmember2, exceptionsStartRow != -1);
NotificationsCustomSettingsActivity.java:                        textCell.setText(LocaleController.getString("NotificationsDeleteAllException", R.string.NotificationsDeleteAllException), false);
NotificationsSettingsActivity.java:        actionBar.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
NotificationsSettingsActivity.java:                builder.setTitle(LocaleController.getString("ResetNotificationsAlertTitle", R.string.ResetNotificationsAlertTitle));
NotificationsSettingsActivity.java:                builder.setMessage(LocaleController.getString("ResetNotificationsAlert", R.string.ResetNotificationsAlert));
NotificationsSettingsActivity.java:                builder.setPositiveButton(LocaleController.getString("Reset", R.string.Reset), (dialogInterface, i) -> {
NotificationsSettingsActivity.java:                            Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("ResetNotificationsText", R.string.ResetNotificationsText), Toast.LENGTH_SHORT);
NotificationsSettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
NotificationsSettingsActivity.java:                builder.setTitle(LocaleController.getString("RepeatNotifications", R.string.RepeatNotifications));
NotificationsSettingsActivity.java:                        LocaleController.getString("RepeatDisabled", R.string.RepeatDisabled),
NotificationsSettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
NotificationsSettingsActivity.java:                            name = LocaleController.getString("DefaultRingtone", R.string.DefaultRingtone);
NotificationsSettingsActivity.java:                            name = LocaleController.getString("SoundDefault", R.string.SoundDefault);
NotificationsSettingsActivity.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("NotificationsExceptionsSingleAlert", R.string.NotificationsExceptionsSingleAlert, alertText)));
NotificationsSettingsActivity.java:            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("NotificationsExceptionsAlert", R.string.NotificationsExceptionsAlert, alertText)));
NotificationsSettingsActivity.java:        builder.setTitle(LocaleController.getString("NotificationsExceptions", R.string.NotificationsExceptions));
NotificationsSettingsActivity.java:        builder.setNeutralButton(LocaleController.getString("ViewExceptions", R.string.ViewExceptions), (dialogInterface, i) -> presentFragment(new NotificationsCustomSettingsActivity(-1, exceptions)));
NotificationsSettingsActivity.java:        builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
NotificationsSettingsActivity.java:                        headerCell.setText(LocaleController.getString("NotificationsForChats", R.string.NotificationsForChats));
NotificationsSettingsActivity.java:                        headerCell.setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
NotificationsSettingsActivity.java:                        headerCell.setText(LocaleController.getString("Events", R.string.Events));
NotificationsSettingsActivity.java:                        headerCell.setText(LocaleController.getString("NotificationsOther", R.string.NotificationsOther));
NotificationsSettingsActivity.java:                        headerCell.setText(LocaleController.getString("Reset", R.string.Reset));
NotificationsSettingsActivity.java:                        headerCell.setText(LocaleController.getString("VoipNotificationSettings", R.string.VoipNotificationSettings));
NotificationsSettingsActivity.java:                        headerCell.setText(LocaleController.getString("BadgeNumber", R.string.BadgeNumber));
NotificationsSettingsActivity.java:                        headerCell.setText(LocaleController.getString("ShowNotificationsFor", R.string.ShowNotificationsFor));
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("InAppSounds", R.string.InAppSounds), preferences.getBoolean("EnableInAppSounds", true), true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("InAppVibrate", R.string.InAppVibrate), preferences.getBoolean("EnableInAppVibrate", true), true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("InAppPreview", R.string.InAppPreview), preferences.getBoolean("EnableInAppPreview", true), true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), preferences.getBoolean("EnableInAppPriority", false), false);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("ContactJoined", R.string.ContactJoined), preferences.getBoolean("EnableContactJoined", true), true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("PinnedMessages", R.string.PinnedMessages), preferences.getBoolean("PinnedMessages", true), false);
NotificationsSettingsActivity.java:                        checkCell.setTextAndValueAndCheck(LocaleController.getString("NotificationsService", R.string.NotificationsService), LocaleController.getString("NotificationsServiceInfo", R.string.NotificationsServiceInfo), preferences.getBoolean("pushService", getMessagesController().keepAliveService), true, true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndValueAndCheck(LocaleController.getString("NotificationsServiceConnection", R.string.NotificationsServiceConnection), LocaleController.getString("NotificationsServiceConnectionInfo", R.string.NotificationsServiceConnectionInfo), preferences.getBoolean("pushConnection", getMessagesController().backgroundConnection), true, true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("BadgeNumberShow", R.string.BadgeNumberShow), getNotificationsController().showBadgeNumber, true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("BadgeNumberMutedChats", R.string.BadgeNumberMutedChats), getNotificationsController().showBadgeMuted, true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("BadgeNumberUnread", R.string.BadgeNumberUnread), getNotificationsController().showBadgeMessages, false);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("InChatSound", R.string.InChatSound), preferences.getBoolean("EnableInChatSound", true), true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("Vibrate", R.string.Vibrate), preferences.getBoolean("EnableCallVibrate", true), true);
NotificationsSettingsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("AllAccounts", R.string.AllAccounts), MessagesController.getGlobalNotificationsSettings().getBoolean("AllAccounts", true), false);
NotificationsSettingsActivity.java:                        settingsCell.setTextAndValue(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications), LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom), false);
NotificationsSettingsActivity.java:                        text = LocaleController.getString("NotificationsPrivateChats", R.string.NotificationsPrivateChats);
NotificationsSettingsActivity.java:                        text = LocaleController.getString("NotificationsGroups", R.string.NotificationsGroups);
NotificationsSettingsActivity.java:                        text = LocaleController.getString("NotificationsChannels", R.string.NotificationsChannels);
NotificationsSettingsActivity.java:                            builder.append(LocaleController.getString("NotificationsOn", R.string.NotificationsOn));
NotificationsSettingsActivity.java:                            builder.append(LocaleController.getString("NotificationsOff", R.string.NotificationsOff));
NotificationsSettingsActivity.java:                            builder.append(LocaleController.formatString("NotificationsOffUntil", R.string.NotificationsOffUntil, LocaleController.stringForMessageListDate(offUntil)));
NotificationsSettingsActivity.java:                        builder.append(LocaleController.getString("TapToChange", R.string.TapToChange));
NotificationsSettingsActivity.java:                        String value = preferences.getString("CallsRingtone", LocaleController.getString("DefaultRingtone", R.string.DefaultRingtone));
NotificationsSettingsActivity.java:                            value = LocaleController.getString("NoSound", R.string.NoSound);
NotificationsSettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("VoipSettingsRingtone", R.string.VoipSettingsRingtone), value, false);
NotificationsSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDefault", R.string.VibrationDefault), true);
NotificationsSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), true);
NotificationsSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled), true);
NotificationsSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Long", R.string.Long), true);
NotificationsSettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("OnlyIfSilent", R.string.OnlyIfSilent), true);
NotificationsSettingsActivity.java:                            value = LocaleController.getString("RepeatNotificationsNever", R.string.RepeatNotificationsNever);
NotificationsSettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("RepeatNotifications", R.string.RepeatNotifications), value, false);
NotificationsSettingsActivity.java:                        textCell.setText(LocaleController.getString("ShowNotificationsForInfo", R.string.ShowNotificationsForInfo));
PasscodeActivity.java:            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
PasscodeActivity.java:                    titleTextView.setText(LocaleController.getString("EnterNewPasscode", R.string.EnterNewPasscode));
PasscodeActivity.java:                    titleTextView.setText(LocaleController.getString("EnterNewFirstPasscode", R.string.EnterNewFirstPasscode));
PasscodeActivity.java:                titleTextView.setText(LocaleController.getString("EnterCurrentPasscode", R.string.EnterCurrentPasscode));
PasscodeActivity.java:                dropDownContainer.addSubItem(pin_item, LocaleController.getString("PasscodePIN", R.string.PasscodePIN));
PasscodeActivity.java:                dropDownContainer.addSubItem(password_item, LocaleController.getString("PasscodePassword", R.string.PasscodePassword));
PasscodeActivity.java:                actionBar.setTitle(LocaleController.getString("Passcode", R.string.Passcode));
PasscodeActivity.java:            actionBar.setTitle(LocaleController.getString("Passcode", R.string.Passcode));
PasscodeActivity.java:                    builder.setTitle(LocaleController.getString("AutoLock", R.string.AutoLock));
PasscodeActivity.java:                            return LocaleController.getString("AutoLockDisabled", R.string.AutoLockDisabled);
PasscodeActivity.java:                            return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Minutes", 1));
PasscodeActivity.java:                            return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Minutes", 5));
PasscodeActivity.java:                            return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Hours", 1));
PasscodeActivity.java:                            return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Hours", 5));
PasscodeActivity.java:                    builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), (dialog, which) -> {
PasscodeActivity.java:                        AlertsCreator.showSimpleAlert(PasscodeActivity.this, LocaleController.getString("ScreenCaptureAlert", R.string.ScreenCaptureAlert));
PasscodeActivity.java:                dropDown.setText(LocaleController.getString("PasscodePIN", R.string.PasscodePIN));
PasscodeActivity.java:                dropDown.setText(LocaleController.getString("PasscodePassword", R.string.PasscodePassword));
PasscodeActivity.java:            actionBar.setTitle(LocaleController.getString("PasscodePIN", R.string.PasscodePIN));
PasscodeActivity.java:            actionBar.setTitle(LocaleController.getString("PasscodePassword", R.string.PasscodePassword));
PasscodeActivity.java:        titleTextView.setText(LocaleController.getString("ReEnterYourPasscode", R.string.ReEnterYourPasscode));
PasscodeActivity.java:                    Toast.makeText(getParentActivity(), LocaleController.getString("PasscodeDoNotMatch", R.string.PasscodeDoNotMatch), Toast.LENGTH_SHORT).show();
PasscodeActivity.java:                Toast.makeText(getParentActivity(), LocaleController.formatString("TooManyTries", R.string.TooManyTries, LocaleController.formatPluralString("Seconds", value)), Toast.LENGTH_SHORT).show();
PasscodeActivity.java:                        textCell.setTextAndCheck(LocaleController.getString("Passcode", R.string.Passcode), SharedConfig.passcodeHash.length() > 0, true);
PasscodeActivity.java:                        textCell.setTextAndCheck(LocaleController.getString("UnlockFingerprint", R.string.UnlockFingerprint), SharedConfig.useFingerprint, true);
PasscodeActivity.java:                        textCell.setTextAndCheck(LocaleController.getString("ScreenCapture", R.string.ScreenCapture), SharedConfig.allowScreenCapture, false);
PasscodeActivity.java:                        textCell.setText(LocaleController.getString("ChangePasscode", R.string.ChangePasscode), false);
PasscodeActivity.java:                            val = LocaleController.formatString("AutoLockDisabled", R.string.AutoLockDisabled);
PasscodeActivity.java:                            val = LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Minutes", SharedConfig.autoLockIn / 60));
PasscodeActivity.java:                            val = LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Hours", (int) Math.ceil(SharedConfig.autoLockIn / 60.0f / 60)));
PasscodeActivity.java:                            val = LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Days", (int) Math.ceil(SharedConfig.autoLockIn / 60.0f / 60 / 24)));
PasscodeActivity.java:                        textCell.setTextAndValue(LocaleController.getString("AutoLock", R.string.AutoLock), val, true);
PasscodeActivity.java:                        SpannableStringBuilder stringBuilder = new SpannableStringBuilder(LocaleController.getString("ChangePasscodeInfo", R.string.ChangePasscodeInfo));
PasscodeActivity.java:                            stringBuilder.append("\n\n").append(AndroidUtilities.replaceTags(LocaleController.getString("WidgetPasscodeEnable2", R.string.WidgetPasscodeEnable2)));
PasscodeActivity.java:                        cell.setText(LocaleController.getString("AutoLockInfo", R.string.AutoLockInfo));
PasscodeActivity.java:                        cell.setText(LocaleController.getString("ScreenCaptureInfo", R.string.ScreenCaptureInfo));
PassportActivity.java:                return LocaleController.formatString("PassportDeleteSelfieAlert", R.string.PassportDeleteSelfieAlert);
PassportActivity.java:                return LocaleController.formatString("PassportDeleteScanAlert", R.string.PassportDeleteScanAlert);
PassportActivity.java:                            inputFields[a].setErrorText(LocaleController.getString("PassportUseLatinOnly", R.string.PassportUseLatinOnly));
PassportActivity.java:                                    builder.setMessage(LocaleController.formatString("PassportNameCheckAlert", R.string.PassportNameCheckAlert, firstName, middleName, lastName));
PassportActivity.java:                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PassportActivity.java:                                    builder.setPositiveButton(LocaleController.getString("Done", R.string.Done), (dialogInterface, i) -> {
PassportActivity.java:                                    builder.setNegativeButton(LocaleController.getString("Edit", R.string.Edit), (dialogInterface, i) -> onFieldError(inputFields[num]));
PassportActivity.java:                    String str2 = LocaleController.getString("PassportInfo2", R.string.PassportInfo2);
PassportActivity.java:                        spanned.setSpan(new URLSpanNoUnderline(LocaleController.getString("PassportInfoUrl", R.string.PassportInfoUrl)) {
PassportActivity.java:                    builder.setTitle(LocaleController.getString("PassportInfoTitle", R.string.PassportInfoTitle));
PassportActivity.java:                    builder.setNegativeButton(LocaleController.getString("Close", R.string.Close), null);
PassportActivity.java:            doneItem = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
PassportActivity.java:        actionBar.setTitle(LocaleController.getString("PassportPhone", R.string.PassportPhone));
PassportActivity.java:                    AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
PassportActivity.java:        actionBar.setTitle(LocaleController.getString("PassportEmail", R.string.PassportEmail));
PassportActivity.java:            inputFields[a].setHint(LocaleController.getString("PassportEmailCode", R.string.PassportEmailCode));
PassportActivity.java:        bottomCell.setText(LocaleController.formatString("PassportEmailVerifyInfo", R.string.PassportEmailVerifyInfo, currentValues.get("email")));
PassportActivity.java:        actionBar.setTitle(LocaleController.getString("TelegramPassport", R.string.TelegramPassport));
PassportActivity.java:            passwordRequestTextView.setText(LocaleController.getString("PassportSelfRequest", R.string.PassportSelfRequest));
PassportActivity.java:            passwordRequestTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("PassportRequest", R.string.PassportRequest, UserObject.getFirstName(botUser))));
PassportActivity.java:        noPasswordTextView.setText(LocaleController.getString("TelegramPassportCreatePasswordInfo", R.string.TelegramPassportCreatePasswordInfo));
PassportActivity.java:        noPasswordSetTextView.setText(LocaleController.getString("TelegramPassportCreatePassword", R.string.TelegramPassportCreatePassword));
PassportActivity.java:        passwordInfoRequestTextView.setText(LocaleController.formatString("PassportRequestPasswordInfo", R.string.PassportRequestPasswordInfo));
PassportActivity.java:        passwordForgotButton.setText(LocaleController.getString("ForgotPassword", R.string.ForgotPassword));
PassportActivity.java:                        builder.setMessage(LocaleController.formatString("RestoreEmailSent", R.string.RestoreEmailSent, res.email_pattern));
PassportActivity.java:                        builder.setTitle(LocaleController.getString("RestoreEmailSentTitle", R.string.RestoreEmailSentTitle));
PassportActivity.java:                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
PassportActivity.java:                            showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
PassportActivity.java:                            showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
PassportActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PassportActivity.java:                builder.setNegativeButton(LocaleController.getString("RestorePasswordResetAccount", R.string.RestorePasswordResetAccount), (dialog, which) -> Browser.openUrl(getParentActivity(), "https://telegram.org/deactivate?phone=" + UserConfig.getInstance(currentAccount).getClientPhone()));
PassportActivity.java:                builder.setTitle(LocaleController.getString("RestorePasswordNoEmailTitle", R.string.RestorePasswordNoEmailTitle));
PassportActivity.java:                builder.setMessage(LocaleController.getString("RestorePasswordNoEmailText", R.string.RestorePasswordNoEmailText));
PassportActivity.java:                                    AndroidUtilities.runOnUIThread(() -> AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true));
PassportActivity.java:                                                AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
PassportActivity.java:                                                showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error1.text);
PassportActivity.java:                                    showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
PassportActivity.java:                                    showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
PassportActivity.java:        actionBar.setTitle(LocaleController.getString("TelegramPassport", R.string.TelegramPassport));
PassportActivity.java:            bottomCell.setText(AndroidUtilities.replaceTags(LocaleController.formatString("PassportRequest", R.string.PassportRequest, UserObject.getFirstName(botUser))));
PassportActivity.java:        headerCell.setText(LocaleController.getString("PassportRequestedInformation", R.string.PassportRequestedInformation));
PassportActivity.java:                String str2 = LocaleController.formatString("PassportPolicy", R.string.PassportPolicy, UserObject.getFirstName(botUser), botUser.username);
PassportActivity.java:                bottomCell.setText(AndroidUtilities.replaceTags(LocaleController.formatString("PassportNoPolicy", R.string.PassportNoPolicy, UserObject.getFirstName(botUser), botUser.username)));
PassportActivity.java:                        AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
PassportActivity.java:                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
PassportActivity.java:        acceptTextView.setText(LocaleController.getString("PassportAuthorize", R.string.PassportAuthorize));
PassportActivity.java:        actionBar.setTitle(LocaleController.getString("TelegramPassport", R.string.TelegramPassport));
PassportActivity.java:        headerCell.setText(LocaleController.getString("PassportProvidedInformation", R.string.PassportProvidedInformation));
PassportActivity.java:        addDocumentCell.setText(LocaleController.getString("PassportNoDocumentsAdd", R.string.PassportNoDocumentsAdd), true);
PassportActivity.java:        deletePassportCell.setText(LocaleController.getString("TelegramPassportDelete", R.string.TelegramPassportDelete), false);
PassportActivity.java:            builder.setTitle(LocaleController.getString("TelegramPassportDeleteTitle", R.string.TelegramPassportDeleteTitle));
PassportActivity.java:            builder.setMessage(LocaleController.getString("TelegramPassportDeleteAlert", R.string.TelegramPassportDeleteAlert));
PassportActivity.java:            builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialog, which) -> {
PassportActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PassportActivity.java:        emptyTextView1.setText(LocaleController.getString("PassportNoDocuments", R.string.PassportNoDocuments));
PassportActivity.java:        emptyTextView2.setText(LocaleController.getString("PassportNoDocumentsInfo", R.string.PassportNoDocumentsInfo));
PassportActivity.java:        emptyTextView3.setText(LocaleController.getString("PassportNoDocumentsAdd", R.string.PassportNoDocumentsAdd).toUpperCase());
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentPhone", R.string.ActionBotDocumentPhone));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentEmail", R.string.ActionBotDocumentEmail));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentIdentity", R.string.ActionBotDocumentIdentity));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentPassport", R.string.ActionBotDocumentPassport));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentInternalPassport", R.string.ActionBotDocumentInternalPassport));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentPassportRegistration", R.string.ActionBotDocumentPassportRegistration));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentTemporaryRegistration", R.string.ActionBotDocumentTemporaryRegistration));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentIdentityCard", R.string.ActionBotDocumentIdentityCard));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentDriverLicence", R.string.ActionBotDocumentDriverLicence));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentAddress", R.string.ActionBotDocumentAddress));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentUtilityBill", R.string.ActionBotDocumentUtilityBill));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentBankStatement", R.string.ActionBotDocumentBankStatement));
PassportActivity.java:            values.add(LocaleController.getString("ActionBotDocumentRentalAgreement", R.string.ActionBotDocumentRentalAgreement));
PassportActivity.java:        builder.setTitle(LocaleController.getString("PassportNoDocumentsAdd", R.string.PassportNoDocumentsAdd));
PassportActivity.java:        actionBar.setTitle(LocaleController.getString("PassportEmail", R.string.PassportEmail));
PassportActivity.java:            settingsCell1.setText(LocaleController.formatString("PassportPhoneUseSame", R.string.PassportPhoneUseSame, currentEmail), false);
PassportActivity.java:            bottomCell.setText(LocaleController.getString("PassportPhoneUseSameEmailInfo", R.string.PassportPhoneUseSameEmailInfo));
PassportActivity.java:            inputFields[a].setHint(LocaleController.getString("PaymentShippingEmailPlaceholder", R.string.PaymentShippingEmailPlaceholder));
PassportActivity.java:        bottomCell.setText(LocaleController.getString("PassportEmailUploadInfo", R.string.PassportEmailUploadInfo));
PassportActivity.java:        actionBar.setTitle(LocaleController.getString("PassportPhone", R.string.PassportPhone));
PassportActivity.java:        settingsCell1.setText(LocaleController.formatString("PassportPhoneUseSame", R.string.PassportPhoneUseSame, PhoneFormat.getInstance().format("+" + currentPhone)), false);
PassportActivity.java:        bottomCell.setText(LocaleController.getString("PassportPhoneUseSameInfo", R.string.PassportPhoneUseSameInfo));
PassportActivity.java:        headerCell.setText(LocaleController.getString("PassportPhoneUseOther", R.string.PassportPhoneUseOther));
PassportActivity.java:                inputFields[a].setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
PassportActivity.java:                            phoneField.setHint(LocaleController.getString("PaymentShippingPhoneNumber", R.string.PaymentShippingPhoneNumber));
PassportActivity.java:                            inputFields[FIELD_PHONECOUNTRY].setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
PassportActivity.java:                                phoneField.setHint(LocaleController.getString("PaymentShippingPhoneNumber", R.string.PaymentShippingPhoneNumber));
PassportActivity.java:                                inputFields[FIELD_PHONECOUNTRY].setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
PassportActivity.java:                inputFields[a].setHint(LocaleController.getString("PaymentShippingPhoneNumber", R.string.PaymentShippingPhoneNumber));
PassportActivity.java:        bottomCell.setText(LocaleController.getString("PassportPhoneUploadInfo", R.string.PassportPhoneUploadInfo));
PassportActivity.java:                actionBar.setTitle(LocaleController.getString("ActionBotDocumentRentalAgreement", R.string.ActionBotDocumentRentalAgreement));
PassportActivity.java:                actionBar.setTitle(LocaleController.getString("ActionBotDocumentBankStatement", R.string.ActionBotDocumentBankStatement));
PassportActivity.java:                actionBar.setTitle(LocaleController.getString("ActionBotDocumentUtilityBill", R.string.ActionBotDocumentUtilityBill));
PassportActivity.java:                actionBar.setTitle(LocaleController.getString("ActionBotDocumentPassportRegistration", R.string.ActionBotDocumentPassportRegistration));
PassportActivity.java:                actionBar.setTitle(LocaleController.getString("ActionBotDocumentTemporaryRegistration", R.string.ActionBotDocumentTemporaryRegistration));
PassportActivity.java:            headerCell.setText(LocaleController.getString("PassportDocuments", R.string.PassportDocuments));
PassportActivity.java:                noAllDocumentsErrorText = LocaleController.getString("PassportAddAddressUploadInfo", R.string.PassportAddAddressUploadInfo);
PassportActivity.java:                    noAllDocumentsErrorText = LocaleController.getString("PassportAddAgreementInfo", R.string.PassportAddAgreementInfo);
PassportActivity.java:                    noAllDocumentsErrorText = LocaleController.getString("PassportAddBillInfo", R.string.PassportAddBillInfo);
PassportActivity.java:                    noAllDocumentsErrorText = LocaleController.getString("PassportAddPassportRegistrationInfo", R.string.PassportAddPassportRegistrationInfo);
PassportActivity.java:                    noAllDocumentsErrorText = LocaleController.getString("PassportAddTemporaryRegistrationInfo", R.string.PassportAddTemporaryRegistrationInfo);
PassportActivity.java:                    noAllDocumentsErrorText = LocaleController.getString("PassportAddBankInfo", R.string.PassportAddBankInfo);
PassportActivity.java:                headerCell.setText(LocaleController.getString("PassportTranslation", R.string.PassportTranslation));
PassportActivity.java:                    noAllTranslationErrorText = LocaleController.getString("PassportAddTranslationUploadInfo", R.string.PassportAddTranslationUploadInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddTranslationAgreementInfo", R.string.PassportAddTranslationAgreementInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddTranslationBillInfo", R.string.PassportAddTranslationBillInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddTranslationPassportRegistrationInfo", R.string.PassportAddTranslationPassportRegistrationInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddTranslationTemporaryRegistrationInfo", R.string.PassportAddTranslationTemporaryRegistrationInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddTranslationBankInfo", R.string.PassportAddTranslationBankInfo);
PassportActivity.java:            actionBar.setTitle(LocaleController.getString("PassportAddress", R.string.PassportAddress));
PassportActivity.java:        headerCell.setText(LocaleController.getString("PassportAddressHeader", R.string.PassportAddressHeader));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportStreet1", R.string.PassportStreet1));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportStreet2", R.string.PassportStreet2));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportCity", R.string.PassportCity));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportState", R.string.PassportState));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportCountry", R.string.PassportCountry));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportPostcode", R.string.PassportPostcode));
PassportActivity.java:                            field.setErrorText(LocaleController.getString("PassportUseLatinOnly", R.string.PassportUseLatinOnly));
PassportActivity.java:                settingsCell1.setText(LocaleController.getString("PassportDeleteInfo", R.string.PassportDeleteInfo), false);
PassportActivity.java:                settingsCell1.setText(LocaleController.getString("PassportDeleteDocument", R.string.PassportDeleteDocument), false);
PassportActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
PassportActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PassportActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PassportActivity.java:            builder.setMessage(LocaleController.getString("PassportDeleteAddressAlert", R.string.PassportDeleteAddressAlert));
PassportActivity.java:            builder.setMessage(LocaleController.getString("PassportDeletePersonalAlert", R.string.PassportDeletePersonalAlert));
PassportActivity.java:            builder.setMessage(LocaleController.getString("PassportDeleteDocumentAlert", R.string.PassportDeleteDocumentAlert));
PassportActivity.java:                cell.setText(LocaleController.getString("PassportDeleteDocumentAddress", R.string.PassportDeleteDocumentAddress), "", true, false);
PassportActivity.java:                cell.setText(LocaleController.getString("PassportDeleteDocumentPersonal", R.string.PassportDeleteDocumentPersonal), "", true, false);
PassportActivity.java:                headerCell.setText(LocaleController.getString("PassportDocuments", R.string.PassportDocuments));
PassportActivity.java:                headerCell.setText(LocaleController.getString("PassportRequiredDocuments", R.string.PassportRequiredDocuments));
PassportActivity.java:            uploadReverseCell.setTextAndValue(LocaleController.getString("PassportReverseSide", R.string.PassportReverseSide), LocaleController.getString("PassportReverseSideInfo", R.string.PassportReverseSideInfo), divider);
PassportActivity.java:                uploadSelfieCell.setTextAndValue(LocaleController.getString("PassportSelfie", R.string.PassportSelfie), LocaleController.getString("PassportSelfieInfo", R.string.PassportSelfieInfo), currentType.translation_required);
PassportActivity.java:            bottomCell.setText(LocaleController.getString("PassportPersonalUploadInfo", R.string.PassportPersonalUploadInfo));
PassportActivity.java:                headerCell.setText(LocaleController.getString("PassportTranslation", R.string.PassportTranslation));
PassportActivity.java:                    noAllTranslationErrorText = LocaleController.getString("PassportAddTranslationUploadInfo", R.string.PassportAddTranslationUploadInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddPassportInfo", R.string.PassportAddPassportInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddInternalPassportInfo", R.string.PassportAddInternalPassportInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddIdentityCardInfo", R.string.PassportAddIdentityCardInfo);
PassportActivity.java:                        noAllTranslationErrorText = LocaleController.getString("PassportAddDriverLicenceInfo", R.string.PassportAddDriverLicenceInfo);
PassportActivity.java:            scanDocumentCell.setText(LocaleController.getString("PassportScanPassport", R.string.PassportScanPassport), false);
PassportActivity.java:                                    inputFields[FIELD_GENDER].setText(LocaleController.getString("PassportMale", R.string.PassportMale));
PassportActivity.java:                                    inputFields[FIELD_GENDER].setText(LocaleController.getString("PassportFemale", R.string.PassportFemale));
PassportActivity.java:            bottomCell.setText(LocaleController.getString("PassportScanPassportInfo", R.string.PassportScanPassportInfo));
PassportActivity.java:            headerCell.setText(LocaleController.getString("PassportDocument", R.string.PassportDocument));
PassportActivity.java:            headerCell.setText(LocaleController.getString("PassportPersonal", R.string.PassportPersonal));
PassportActivity.java:                                title = LocaleController.getString("PassportSelectExpiredDate", R.string.PassportSelectExpiredDate);
PassportActivity.java:                                title = LocaleController.getString("PassportSelectBithdayDate", R.string.PassportSelectBithdayDate);
PassportActivity.java:                                builder.setNegativeButton(LocaleController.getString("PassportSelectNotExpire", R.string.PassportSelectNotExpire), (dialog, which) -> {
PassportActivity.java:                                    field1.setText(LocaleController.getString("PassportNoExpireDate", R.string.PassportNoExpireDate));
PassportActivity.java:                        builder.setTitle(LocaleController.getString("PassportSelectGender", R.string.PassportSelectGender));
PassportActivity.java:                                LocaleController.getString("PassportMale", R.string.PassportMale),
PassportActivity.java:                                LocaleController.getString("PassportFemale", R.string.PassportFemale)
PassportActivity.java:                                inputFields[FIELD_GENDER].setText(LocaleController.getString("PassportMale", R.string.PassportMale));
PassportActivity.java:                                inputFields[FIELD_GENDER].setText(LocaleController.getString("PassportFemale", R.string.PassportFemale));
PassportActivity.java:                        builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PassportActivity.java:                        inputFields[a].setHintText(LocaleController.getString("PassportNameLatin", R.string.PassportNameLatin));
PassportActivity.java:                        inputFields[a].setHintText(LocaleController.getString("PassportName", R.string.PassportName));
PassportActivity.java:                        inputFields[a].setHintText(LocaleController.getString("PassportMidnameLatin", R.string.PassportMidnameLatin));
PassportActivity.java:                        inputFields[a].setHintText(LocaleController.getString("PassportMidname", R.string.PassportMidname));
PassportActivity.java:                        inputFields[a].setHintText(LocaleController.getString("PassportSurnameLatin", R.string.PassportSurnameLatin));
PassportActivity.java:                        inputFields[a].setHintText(LocaleController.getString("PassportSurname", R.string.PassportSurname));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportBirthdate", R.string.PassportBirthdate));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportGender", R.string.PassportGender));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportCitizenship", R.string.PassportCitizenship));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportResidence", R.string.PassportResidence));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportDocumentNumber", R.string.PassportDocumentNumber));
PassportActivity.java:                    inputFields[a].setHintText(LocaleController.getString("PassportExpired", R.string.PassportExpired));
PassportActivity.java:                            field.setErrorText(LocaleController.getString("PassportUseLatinOnly", R.string.PassportUseLatinOnly));
PassportActivity.java:                settingsCell1.setText(LocaleController.getString("PassportDeleteInfo", R.string.PassportDeleteInfo), false);
PassportActivity.java:                settingsCell1.setText(LocaleController.getString("PassportDeleteDocument", R.string.PassportDeleteDocument), false);
PassportActivity.java:            actionBar.setTitle(LocaleController.getString("PassportPersonal", R.string.PassportPersonal));
PassportActivity.java:                uploadDocumentCell.setText(LocaleController.getString("PassportUploadAdditinalDocument", R.string.PassportUploadAdditinalDocument), false);
PassportActivity.java:                uploadDocumentCell.setText(LocaleController.getString("PassportUploadDocument", R.string.PassportUploadDocument), false);
PassportActivity.java:                uploadTranslationCell.setText(LocaleController.getString("PassportUploadAdditinalDocument", R.string.PassportUploadAdditinalDocument), false);
PassportActivity.java:                uploadTranslationCell.setText(LocaleController.getString("PassportUploadDocument", R.string.PassportUploadDocument), false);
PassportActivity.java:                uploadFrontCell.setTextAndValue(LocaleController.getString("PassportMainPage", R.string.PassportMainPage), LocaleController.getString("PassportMainPageInfo", R.string.PassportMainPageInfo), divider);
PassportActivity.java:                uploadFrontCell.setTextAndValue(LocaleController.getString("PassportFrontSide", R.string.PassportFrontSide), LocaleController.getString("PassportFrontSideInfo", R.string.PassportFrontSideInfo), divider);
PassportActivity.java:                        editText.setText(LocaleController.getString("PassportMale", R.string.PassportMale));
PassportActivity.java:                        editText.setText(LocaleController.getString("PassportFemale", R.string.PassportFemale));
PassportActivity.java:                        editText.setText(LocaleController.getString("PassportNoExpireDate", R.string.PassportNoExpireDate));
PassportActivity.java:            text = LocaleController.getString("PassportSelfie", R.string.PassportSelfie);
PassportActivity.java:            text = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
PassportActivity.java:                text = LocaleController.getString("PassportMainPage", R.string.PassportMainPage);
PassportActivity.java:                text = LocaleController.getString("PassportFrontSide", R.string.PassportFrontSide);
PassportActivity.java:            text = LocaleController.getString("PassportReverseSide", R.string.PassportReverseSide);
PassportActivity.java:            text = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
PassportActivity.java:                builder.setMessage(LocaleController.getString("PassportDeleteSelfie", R.string.PassportDeleteSelfie));
PassportActivity.java:                builder.setMessage(LocaleController.getString("PassportDeleteScan", R.string.PassportDeleteScan));
PassportActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PassportActivity.java:            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PassportActivity.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentPassport", R.string.ActionBotDocumentPassport);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentDriverLicence", R.string.ActionBotDocumentDriverLicence);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentIdentityCard", R.string.ActionBotDocumentIdentityCard);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentUtilityBill", R.string.ActionBotDocumentUtilityBill);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentBankStatement", R.string.ActionBotDocumentBankStatement);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentRentalAgreement", R.string.ActionBotDocumentRentalAgreement);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentInternalPassport", R.string.ActionBotDocumentInternalPassport);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentPassportRegistration", R.string.ActionBotDocumentPassportRegistration);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentTemporaryRegistration", R.string.ActionBotDocumentTemporaryRegistration);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentPhone", R.string.ActionBotDocumentPhone);
PassportActivity.java:            return LocaleController.getString("ActionBotDocumentEmail", R.string.ActionBotDocumentEmail);
PassportActivity.java:                    stringBuilder.append(LocaleController.getString("PassportDocuments", R.string.PassportDocuments));
PassportActivity.java:                                                        stringBuilder.append(LocaleController.getString("PassportMale", R.string.PassportMale));
PassportActivity.java:                                                        stringBuilder.append(LocaleController.getString("PassportFemale", R.string.PassportFemale));
PassportActivity.java:                        value = LocaleController.getString("PassportPersonalDetailsInfo", R.string.PassportPersonalDetailsInfo);
PassportActivity.java:                            value = LocaleController.getString("PassportDocuments", R.string.PassportDocuments);
PassportActivity.java:                                    value = LocaleController.getString("PassportIdentityPassport", R.string.PassportIdentityPassport);
PassportActivity.java:                                    value = LocaleController.getString("PassportIdentityInternalPassport", R.string.PassportIdentityInternalPassport);
PassportActivity.java:                                    value = LocaleController.getString("PassportIdentityDriverLicence", R.string.PassportIdentityDriverLicence);
PassportActivity.java:                                    value = LocaleController.getString("PassportIdentityID", R.string.PassportIdentityID);
PassportActivity.java:                                value = LocaleController.getString("PassportIdentityDocumentInfo", R.string.PassportIdentityDocumentInfo);
PassportActivity.java:                        value = LocaleController.getString("PassportAddressNoUploadInfo", R.string.PassportAddressNoUploadInfo);
PassportActivity.java:                            value = LocaleController.getString("PassportDocuments", R.string.PassportDocuments);
PassportActivity.java:                                    value = LocaleController.getString("PassportAddAgreementInfo", R.string.PassportAddAgreementInfo);
PassportActivity.java:                                    value = LocaleController.getString("PassportAddBillInfo", R.string.PassportAddBillInfo);
PassportActivity.java:                                    value = LocaleController.getString("PassportAddPassportRegistrationInfo", R.string.PassportAddPassportRegistrationInfo);
PassportActivity.java:                                    value = LocaleController.getString("PassportAddTemporaryRegistrationInfo", R.string.PassportAddTemporaryRegistrationInfo);
PassportActivity.java:                                    value = LocaleController.getString("PassportAddBankInfo", R.string.PassportAddBankInfo);
PassportActivity.java:                                value = LocaleController.getString("PassportAddressInfo", R.string.PassportAddressInfo);
PassportActivity.java:                    value = LocaleController.getString("PassportPhoneInfo", R.string.PassportPhoneInfo);
PassportActivity.java:                    value = LocaleController.getString("PassportEmailInfo", R.string.PassportEmailInfo);
PassportActivity.java:            nativeInfoCell.setText(LocaleController.formatString("PassportNativeInfo", R.string.PassportNativeInfo, country));
PassportActivity.java:                headerCell.setText(LocaleController.formatString("PassportNativeHeaderLang", R.string.PassportNativeHeaderLang, header));
PassportActivity.java:                headerCell.setText(LocaleController.getString("PassportNativeHeader", R.string.PassportNativeHeader));
PassportActivity.java:                            inputExtraFields[a].setHintText(LocaleController.getString("PassportName", R.string.PassportName));
PassportActivity.java:                            inputExtraFields[a].setHintText(LocaleController.formatString("PassportNameCountry", R.string.PassportNameCountry, country));
PassportActivity.java:                            inputExtraFields[a].setHintText(LocaleController.getString("PassportMidname", R.string.PassportMidname));
PassportActivity.java:                            inputExtraFields[a].setHintText(LocaleController.formatString("PassportMidnameCountry", R.string.PassportMidnameCountry, country));
PassportActivity.java:                            inputExtraFields[a].setHintText(LocaleController.getString("PassportSurname", R.string.PassportSurname));
PassportActivity.java:                            inputExtraFields[a].setHintText(LocaleController.formatString("PassportSurnameCountry", R.string.PassportSurnameCountry, country));
PassportActivity.java:                                            showAlertWithText(LocaleController.getString("PassportEmail", R.string.PassportEmail), error1.text);
PassportActivity.java:                showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
PassportActivity.java:                text = LocaleController.getString("PassportPersonalDetails", R.string.PassportPersonalDetails);
PassportActivity.java:                text = LocaleController.formatString("PassportTwoDocuments", R.string.PassportTwoDocuments, getTextForType(documentRequiredTypes.get(0).type), getTextForType(documentRequiredTypes.get(1).type));
PassportActivity.java:                text = LocaleController.getString("PassportIdentityDocument", R.string.PassportIdentityDocument);
PassportActivity.java:                text = LocaleController.getString("PassportAddress", R.string.PassportAddress);
PassportActivity.java:                text = LocaleController.formatString("PassportTwoDocuments", R.string.PassportTwoDocuments, getTextForType(documentRequiredTypes.get(0).type), getTextForType(documentRequiredTypes.get(1).type));
PassportActivity.java:                text = LocaleController.getString("PassportResidentialAddress", R.string.PassportResidentialAddress);
PassportActivity.java:            view.setTextAndValue(LocaleController.getString("PassportPhone", R.string.PassportPhone), "", !last);
PassportActivity.java:            view.setTextAndValue(LocaleController.getString("PassportEmail", R.string.PassportEmail), "", !last);
PassportActivity.java:                    builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PassportActivity.java:                        builder.setTitle(LocaleController.getString("PassportIdentityDocument", R.string.PassportIdentityDocument));
PassportActivity.java:                        builder.setTitle(LocaleController.getString("PassportAddress", R.string.PassportAddress));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddLicence", R.string.PassportAddLicence));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddPassport", R.string.PassportAddPassport));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddInternalPassport", R.string.PassportAddInternalPassport));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddCard", R.string.PassportAddCard));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddBill", R.string.PassportAddBill));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddBank", R.string.PassportAddBank));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddAgreement", R.string.PassportAddAgreement));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddTemporaryRegistration", R.string.PassportAddTemporaryRegistration));
PassportActivity.java:                            strings.add(LocaleController.getString("PassportAddPassportRegistration", R.string.PassportAddPassportRegistration));
PassportActivity.java:                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
PassportActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PassportActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PassportActivity.java:                        builder.setMessage(phoneField ? LocaleController.getString("PassportDeletePhoneAlert", R.string.PassportDeletePhoneAlert) : LocaleController.getString("PassportDeleteEmailAlert", R.string.PassportDeleteEmailAlert));
PassportActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PassportActivity.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PassportActivity.java:                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PassportActivity.java:                        builder.setMessage(LocaleController.getString("AllowReadCall", R.string.AllowReadCall));
PassportActivity.java:                    inputFields[FIELD_PASSWORD].setHint(LocaleController.getString("LoginPassword", R.string.LoginPassword));
PassportActivity.java:        Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), Toast.LENGTH_SHORT);
PassportActivity.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PassportActivity.java:                    builder.setMessage(LocaleController.getString("PermissionNoAudioVideo", R.string.PermissionNoAudioVideo));
PassportActivity.java:                    builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
PassportActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PassportActivity.java:            showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("PassportUploadMaxReached", R.string.PassportUploadMaxReached, LocaleController.formatPluralString("Files", 20)));
PassportActivity.java:        builder.setPositiveButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialog, which) -> finishFragment());
PassportActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PassportActivity.java:        builder.setTitle(LocaleController.getString("DiscardChanges", R.string.DiscardChanges));
PassportActivity.java:        builder.setMessage(LocaleController.getString("PassportDiscardChanges", R.string.PassportDiscardChanges));
PassportActivity.java:                                            inputFields[FIELD_GENDER].setText(LocaleController.getString("PassportMale", R.string.PassportMale));
PassportActivity.java:                                            inputFields[FIELD_GENDER].setText(LocaleController.getString("PassportFemale", R.string.PassportFemale));
PassportActivity.java:                                    inputFields[FIELD_EXPIRE].setText(LocaleController.getString("PassportNoExpireDate", R.string.PassportNoExpireDate));
PassportActivity.java:                    titleTextView.setText(LocaleController.getString("SentAppCodeTitle", R.string.SentAppCodeTitle));
PassportActivity.java:                    titleTextView.setText(LocaleController.getString("SentSmsCodeTitle", R.string.SentSmsCodeTitle));
PassportActivity.java:                problemText.setText(LocaleController.getString("DidNotGetTheCodeSms", R.string.DidNotGetTheCodeSms));
PassportActivity.java:                problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
PassportActivity.java:                        AlertsCreator.showSimpleAlert(PassportActivity.this, LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
PassportActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentSmsCode", R.string.SentSmsCode, LocaleController.addNbsp(number)));
PassportActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallCode", R.string.SentCallCode, LocaleController.addNbsp(number)));
PassportActivity.java:                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallOnly", R.string.SentCallOnly, LocaleController.addNbsp(number)));
PassportActivity.java:                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
PassportActivity.java:                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 1, 0));
PassportActivity.java:                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 2, 0));
PassportActivity.java:                timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 2, 0));
PassportActivity.java:                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
PassportActivity.java:                                timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, minutes, seconds));
PassportActivity.java:                                        timeText.setText(LocaleController.getString("Calling", R.string.Calling));
PassportActivity.java:                                        timeText.setText(LocaleController.getString("SendingSms", R.string.SendingSms));
PassportActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PassportActivity.java:                builder.setMessage(LocaleController.getString("StopVerification", R.string.StopVerification));
PassportActivity.java:                builder.setPositiveButton(LocaleController.getString("Continue", R.string.Continue), null);
PassportActivity.java:                builder.setNegativeButton(LocaleController.getString("Stop", R.string.Stop), (dialogInterface, i) -> {
PaymentFormActivity.java:            actionBar.setTitle(LocaleController.getString("PaymentShippingInfo", R.string.PaymentShippingInfo));
PaymentFormActivity.java:            actionBar.setTitle(LocaleController.getString("PaymentShippingMethod", R.string.PaymentShippingMethod));
PaymentFormActivity.java:            actionBar.setTitle(LocaleController.getString("PaymentCardInfo", R.string.PaymentCardInfo));
PaymentFormActivity.java:            actionBar.setTitle(LocaleController.getString("PaymentCardInfo", R.string.PaymentCardInfo));
PaymentFormActivity.java:                actionBar.setTitle("Test " + LocaleController.getString("PaymentCheckout", R.string.PaymentCheckout));
PaymentFormActivity.java:                actionBar.setTitle(LocaleController.getString("PaymentCheckout", R.string.PaymentCheckout));
PaymentFormActivity.java:                actionBar.setTitle("Test " + LocaleController.getString("PaymentReceipt", R.string.PaymentReceipt));
PaymentFormActivity.java:                actionBar.setTitle(LocaleController.getString("PaymentReceipt", R.string.PaymentReceipt));
PaymentFormActivity.java:            actionBar.setTitle(LocaleController.getString("PaymentPassword", R.string.PaymentPassword));
PaymentFormActivity.java:            doneItem = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
PaymentFormActivity.java:                    headerCell[0].setText(LocaleController.getString("PaymentShippingAddress", R.string.PaymentShippingAddress));
PaymentFormActivity.java:                    headerCell[1].setText(LocaleController.getString("PaymentShippingReceiver", R.string.PaymentShippingReceiver));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentShippingName", R.string.PaymentShippingName));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentShippingEmailPlaceholder", R.string.PaymentShippingEmailPlaceholder));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentShippingAddress1Placeholder", R.string.PaymentShippingAddress1Placeholder));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentShippingAddress2Placeholder", R.string.PaymentShippingAddress2Placeholder));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentShippingCityPlaceholder", R.string.PaymentShippingCityPlaceholder));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentShippingStatePlaceholder", R.string.PaymentShippingStatePlaceholder));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentShippingCountry", R.string.PaymentShippingCountry));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentShippingZipPlaceholder", R.string.PaymentShippingZipPlaceholder));
PaymentFormActivity.java:                                phoneField.setHint(LocaleController.getString("PaymentShippingPhoneNumber", R.string.PaymentShippingPhoneNumber));
PaymentFormActivity.java:                                    phoneField.setHint(LocaleController.getString("PaymentShippingPhoneNumber", R.string.PaymentShippingPhoneNumber));
PaymentFormActivity.java:                            bottomCell[1].setText(LocaleController.formatString("PaymentPhoneEmailToProvider", R.string.PaymentPhoneEmailToProvider, providerName));
PaymentFormActivity.java:                            bottomCell[1].setText(LocaleController.formatString("PaymentEmailToProvider", R.string.PaymentEmailToProvider, providerName));
PaymentFormActivity.java:                            bottomCell[1].setText(LocaleController.formatString("PaymentPhoneToProvider", R.string.PaymentPhoneToProvider, providerName));
PaymentFormActivity.java:                    checkCell1.setTextAndCheck(LocaleController.getString("PaymentShippingSave", R.string.PaymentShippingSave), saveShippingInfo, false);
PaymentFormActivity.java:                    bottomCell[0].setText(LocaleController.getString("PaymentShippingSaveInfo", R.string.PaymentShippingSaveInfo));
PaymentFormActivity.java:                checkCell1.setTextAndCheck(LocaleController.getString("PaymentCardSavePaymentInformation", R.string.PaymentCardSavePaymentInformation), saveCardInfo, false);
PaymentFormActivity.java:                        headerCell[0].setText(LocaleController.getString("PaymentCardTitle", R.string.PaymentCardTitle));
PaymentFormActivity.java:                        headerCell[1].setText(LocaleController.getString("PaymentBillingAddress", R.string.PaymentBillingAddress));
PaymentFormActivity.java:                            inputFields[a].setHint(LocaleController.getString("PaymentCardNumber", R.string.PaymentCardNumber));
PaymentFormActivity.java:                            inputFields[a].setHint(LocaleController.getString("PaymentCardCvv", R.string.PaymentCardCvv));
PaymentFormActivity.java:                            inputFields[a].setHint(LocaleController.getString("PaymentCardExpireDate", R.string.PaymentCardExpireDate));
PaymentFormActivity.java:                            inputFields[a].setHint(LocaleController.getString("PaymentCardName", R.string.PaymentCardName));
PaymentFormActivity.java:                            inputFields[a].setHint(LocaleController.getString("PaymentShippingZipPlaceholder", R.string.PaymentShippingZipPlaceholder));
PaymentFormActivity.java:                            inputFields[a].setHint(LocaleController.getString("PaymentShippingCountry", R.string.PaymentShippingCountry));
PaymentFormActivity.java:                        checkCell1.setTextAndCheck(LocaleController.getString("PaymentCardSavePaymentInformation", R.string.PaymentCardSavePaymentInformation), saveCardInfo, false);
PaymentFormActivity.java:                    headerCell[0].setText(LocaleController.getString("PaymentCardTitle", R.string.PaymentCardTitle));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("LoginPassword", R.string.LoginPassword));
PaymentFormActivity.java:                    bottomCell[0].setText(LocaleController.formatString("PaymentConfirmationMessage", R.string.PaymentConfirmationMessage, paymentForm.saved_credentials.title));
PaymentFormActivity.java:                    settingsCell[0].setText(LocaleController.getString("PaymentConfirmationNewCard", R.string.PaymentConfirmationNewCard), false);
PaymentFormActivity.java:            priceCell.setTextAndValue(LocaleController.getString("PaymentTransactionTotal", R.string.PaymentTransactionTotal), totalPrice, true);
PaymentFormActivity.java:            detailSettingsCell[0].setTextAndValue(cardName, LocaleController.getString("PaymentCheckoutMethod", R.string.PaymentCheckoutMethod), true);
PaymentFormActivity.java:                            detailSettingsCell[0].setTextAndValue(cardName, LocaleController.getString("PaymentCheckoutMethod", R.string.PaymentCheckoutMethod), true);
PaymentFormActivity.java:                detailSettingsCell[1].setTextAndValue(providerName = ContactsController.formatName(providerUser.first_name, providerUser.last_name), LocaleController.getString("PaymentCheckoutProvider", R.string.PaymentCheckoutProvider), true);
PaymentFormActivity.java:                    detailSettingsCell[2].setTextAndValue(address, LocaleController.getString("PaymentShippingAddress", R.string.PaymentShippingAddress), true);
PaymentFormActivity.java:                    detailSettingsCell[3].setTextAndValue(validateRequest.info.name, LocaleController.getString("PaymentCheckoutName", R.string.PaymentCheckoutName), true);
PaymentFormActivity.java:                    detailSettingsCell[4].setTextAndValue(PhoneFormat.getInstance().format(validateRequest.info.phone), LocaleController.getString("PaymentCheckoutPhoneNumber", R.string.PaymentCheckoutPhoneNumber), true);
PaymentFormActivity.java:                    detailSettingsCell[5].setTextAndValue(validateRequest.info.email, LocaleController.getString("PaymentCheckoutEmail", R.string.PaymentCheckoutEmail), true);
PaymentFormActivity.java:                    detailSettingsCell[6].setTextAndValue(shippingOption.title, LocaleController.getString("PaymentCheckoutShippingMethod", R.string.PaymentCheckoutShippingMethod), false);
PaymentFormActivity.java:                            builder.setTitle(LocaleController.getString("PaymentWarning", R.string.PaymentWarning));
PaymentFormActivity.java:                            builder.setMessage(LocaleController.formatString("PaymentWarningText", R.string.PaymentWarningText, currentBotName, providerName));
PaymentFormActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> showPayAlert(totalPrice));
PaymentFormActivity.java:                payTextView.setText(LocaleController.formatString("PaymentCheckoutPay", R.string.PaymentCheckoutPay, totalPrice));
PaymentFormActivity.java:            codeFieldCell.setTextAndHint("", LocaleController.getString("PasswordCode", R.string.PasswordCode), false);
PaymentFormActivity.java:            settingsCell[1].setText(LocaleController.getString("ResendCode", R.string.ResendCode), true);
PaymentFormActivity.java:                builder.setMessage(LocaleController.getString("ResendCodeInfo", R.string.ResendCodeInfo));
PaymentFormActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PaymentFormActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PaymentFormActivity.java:            settingsCell[0].setText(LocaleController.getString("AbortPassword", R.string.AbortPassword), false);
PaymentFormActivity.java:                String text = LocaleController.getString("TurnPasswordOffQuestion", R.string.TurnPasswordOffQuestion);
PaymentFormActivity.java:                    text += "\n\n" + LocaleController.getString("TurnPasswordOffPassport", R.string.TurnPasswordOffPassport);
PaymentFormActivity.java:                builder.setTitle(LocaleController.getString("TurnPasswordOffQuestionTitle", R.string.TurnPasswordOffQuestionTitle));
PaymentFormActivity.java:                builder.setPositiveButton(LocaleController.getString("Disable", R.string.Disable), (dialogInterface, i) -> sendSavePassword(true));
PaymentFormActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PaymentFormActivity.java:                    headerCell[0].setText(LocaleController.getString("PaymentPasswordTitle", R.string.PaymentPasswordTitle));
PaymentFormActivity.java:                    headerCell[1].setText(LocaleController.getString("PaymentPasswordEmailTitle", R.string.PaymentPasswordEmailTitle));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentPasswordEnter", R.string.PaymentPasswordEnter));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentPasswordReEnter", R.string.PaymentPasswordReEnter));
PaymentFormActivity.java:                        inputFields[a].setHint(LocaleController.getString("PaymentPasswordEmail", R.string.PaymentPasswordEmail));
PaymentFormActivity.java:                    bottomCell[0].setText(LocaleController.getString("PaymentPasswordInfo", R.string.PaymentPasswordInfo));
PaymentFormActivity.java:                    bottomCell[1].setText(LocaleController.getString("PaymentPasswordEmailInfo", R.string.PaymentPasswordEmailInfo));
PaymentFormActivity.java:                bottomCell[2].setText(LocaleController.formatString("EmailPasswordConfirmText2", R.string.EmailPasswordConfirmText2, currentPassword.email_unconfirmed_pattern != null ? currentPassword.email_unconfirmed_pattern : ""));
PaymentFormActivity.java:                bottomCell[1].setText(LocaleController.getString("PaymentPasswordEmailInfo", R.string.PaymentPasswordEmailInfo));
PaymentFormActivity.java:                    AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
PaymentFormActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PaymentFormActivity.java:        builder.setTitle(LocaleController.getString("PaymentTransactionReview", R.string.PaymentTransactionReview));
PaymentFormActivity.java:        builder.setMessage(LocaleController.formatString("PaymentTransactionMessage", R.string.PaymentTransactionMessage, totalPrice, currentBotName, currentItemName));
PaymentFormActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
PaymentFormActivity.java:        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PaymentFormActivity.java:            SpannableStringBuilder text = new SpannableStringBuilder(LocaleController.getString("PaymentCardSavePaymentInformationInfoLine1", R.string.PaymentCardSavePaymentInformationInfoLine1));
PaymentFormActivity.java:                String str2 = LocaleController.getString("PaymentCardSavePaymentInformationInfoLine2", R.string.PaymentCardSavePaymentInformationInfoLine2);
PaymentFormActivity.java:                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
PaymentFormActivity.java:                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
PaymentFormActivity.java:                        Toast.makeText(getParentActivity(), LocaleController.getString("PasswordDoNotMatch", R.string.PasswordDoNotMatch), Toast.LENGTH_SHORT).show();
PaymentFormActivity.java:                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
PaymentFormActivity.java:                                builder.setMessage(LocaleController.getString("YourEmailAlmostThereText", R.string.YourEmailAlmostThereText));
PaymentFormActivity.java:                                builder.setTitle(LocaleController.getString("YourEmailAlmostThere", R.string.YourEmailAlmostThere));
PaymentFormActivity.java:                                    showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("PasswordEmailInvalid", R.string.PasswordEmailInvalid));
PaymentFormActivity.java:                                    showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
PaymentFormActivity.java:                                    showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
PaymentFormActivity.java:                                AlertsCreator.showSimpleToast(PaymentFormActivity.this, LocaleController.getString("PaymentConnectionFailed", R.string.PaymentConnectionFailed));
PaymentFormActivity.java:                    AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
PeopleNearbyActivity.java:        actionBar.setTitle(LocaleController.getString("PeopleNearby", R.string.PeopleNearby));
PeopleNearbyActivity.java:                    builder.setTitle(LocaleController.getString("MakeMyselfVisibleTitle", R.string.MakeMyselfVisibleTitle));
PeopleNearbyActivity.java:                    builder.setMessage(LocaleController.getString("MakeMyselfVisibleInfo", R.string.MakeMyselfVisibleInfo));
PeopleNearbyActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
PeopleNearbyActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PeopleNearbyActivity.java:            AlertsCreator.showSimpleAlert(PeopleNearbyActivity.this, LocaleController.getString("YourLocatedChannelsTooMuch", R.string.YourLocatedChannelsTooMuch));
PeopleNearbyActivity.java:            titleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("PeopleNearby", R.string.PeopleNearby)));
PeopleNearbyActivity.java:            messageTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("PeopleNearbyInfo2", R.string.PeopleNearbyInfo2)));
PeopleNearbyActivity.java:                        actionCell.setText(LocaleController.getString("NearbyCreateGroup", R.string.NearbyCreateGroup), null, R.drawable.groups_create, chatsStartRow != -1);
PeopleNearbyActivity.java:                            actionCell.setText(LocaleController.getString("StopShowingMe", R.string.StopShowingMe), null, R.drawable.actions_nearby_off, usersStartRow != -1);
PeopleNearbyActivity.java:                            actionCell.setText(LocaleController.getString("MakeMyselfVisible", R.string.MakeMyselfVisible), null, R.drawable.actions_nearby_on, usersStartRow != -1);
PeopleNearbyActivity.java:                        headerCell.setText(LocaleController.getString("PeopleNearbyHeader", R.string.PeopleNearbyHeader));
PeopleNearbyActivity.java:                        headerCell.setText(LocaleController.getString("ChatsNearbyHeader", R.string.ChatsNearbyHeader));
PhotoAlbumPickerActivity.java:            menu.addItem(2, R.drawable.ic_ab_search).setContentDescription(LocaleController.getString("Search", R.string.Search));
PhotoAlbumPickerActivity.java:        menuItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
PhotoAlbumPickerActivity.java:        menuItem.addSubItem(1, R.drawable.msg_openin, LocaleController.getString("OpenInExternalApp", R.string.OpenInExternalApp));
PhotoAlbumPickerActivity.java:        actionBar.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
PhotoAlbumPickerActivity.java:        emptyView.setText(LocaleController.getString("NoPhotos", R.string.NoPhotos));
PhotoAlbumPickerActivity.java:        commentTextView.setHint(LocaleController.getString("AddCaption", R.string.AddCaption));
PhotoAlbumPickerActivity.java:                            itemCells[a].setTextAndIcon(LocaleController.getString("SetReminder", R.string.SetReminder), R.drawable.msg_schedule);
PhotoAlbumPickerActivity.java:                            itemCells[a].setTextAndIcon(LocaleController.getString("ScheduleMessage", R.string.ScheduleMessage), R.drawable.msg_schedule);
PhotoAlbumPickerActivity.java:                        itemCells[a].setTextAndIcon(LocaleController.getString("SendWithoutSound", R.string.SendWithoutSound), R.drawable.input_notify_off);
PhotoCropActivity.java:        actionBar.setTitle(LocaleController.getString("CropImage", R.string.CropImage));
PhotoCropActivity.java:        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
PhotoPickerActivity.java:            actionBar.setTitle(LocaleController.getString("SearchImagesTitle", R.string.SearchImagesTitle));
PhotoPickerActivity.java:            actionBar.setTitle(LocaleController.getString("SearchGifsTitle", R.string.SearchGifsTitle));
PhotoPickerActivity.java:                    showAsListItem.setText(listSort ? LocaleController.getString("ShowAsGrid", R.string.ShowAsGrid) : LocaleController.getString("ShowAsList", R.string.ShowAsList));
PhotoPickerActivity.java:            showAsListItem = menuItem.addSubItem(change_sort, R.drawable.msg_list, LocaleController.getString("ShowAsList", R.string.ShowAsList));
PhotoPickerActivity.java:            menuItem.addSubItem(open_in, R.drawable.msg_openin, LocaleController.getString("OpenInExternalApp", R.string.OpenInExternalApp));
PhotoPickerActivity.java:                        emptyView.setText(LocaleController.getString("NoRecentSearches", R.string.NoRecentSearches));
PhotoPickerActivity.java:                searchItem.setSearchFieldHint(LocaleController.getString("SearchImagesTitle", R.string.SearchImagesTitle));
PhotoPickerActivity.java:                searchItem.setSearchFieldHint(LocaleController.getString("SearchGifsTitle", R.string.SearchGifsTitle));
PhotoPickerActivity.java:                    builder.setTitle(LocaleController.getString("ClearSearchAlertTitle", R.string.ClearSearchAlertTitle));
PhotoPickerActivity.java:                    builder.setMessage(LocaleController.getString("ClearSearchAlert", R.string.ClearSearchAlert));
PhotoPickerActivity.java:                    builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), (dialogInterface, i) -> {
PhotoPickerActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PhotoPickerActivity.java:            emptyView.setText(LocaleController.getString("NoPhotos", R.string.NoPhotos));
PhotoPickerActivity.java:            emptyView.setText(LocaleController.getString("NoRecentSearches", R.string.NoRecentSearches));
PhotoPickerActivity.java:            commentTextView.setHint(LocaleController.getString("AddCaption", R.string.AddCaption));
PhotoPickerActivity.java:                                itemCells[a].setTextAndIcon(LocaleController.getString("SetReminder", R.string.SetReminder), R.drawable.msg_schedule);
PhotoPickerActivity.java:                                itemCells[a].setTextAndIcon(LocaleController.getString("ScheduleMessage", R.string.ScheduleMessage), R.drawable.msg_schedule);
PhotoPickerActivity.java:                            itemCells[a].setTextAndIcon(LocaleController.getString("SendWithoutSound", R.string.SendWithoutSound), R.drawable.input_notify_off);
PhotoPickerActivity.java:            emptyView.setText(LocaleController.getString("NoRecentSearches", R.string.NoRecentSearches));
PhotoPickerActivity.java:            emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
PhotoPickerActivity.java:                                        AlertsCreator.showSimpleAlert(PhotoPickerActivity.this, LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSelectSendError", R.string.SlowmodeSelectSendError));
PhotoPickerActivity.java:                        cell.setTextAndIcon(LocaleController.getString("ClearRecentHistory", R.string.ClearRecentHistory), R.drawable.menu_clear_recent, false);
PhotoPickerSearchActivity.java:        searchItem.setSearchFieldHint(LocaleController.getString("SearchImagesTitle", R.string.SearchImagesTitle));
PhotoPickerSearchActivity.java:                    searchItem.setSearchFieldHint(LocaleController.getString("SearchImagesTitle", R.string.SearchImagesTitle));
PhotoPickerSearchActivity.java:                    searchItem.setSearchFieldHint(LocaleController.getString("SearchGifsTitle", R.string.SearchGifsTitle));
PhotoPickerSearchActivity.java:        scrollSlidingTextTabStrip.addTextTab(0, LocaleController.getString("ImagesTab2", R.string.ImagesTab2));
PhotoPickerSearchActivity.java:        scrollSlidingTextTabStrip.addTextTab(1, LocaleController.getString("GifsTab2", R.string.GifsTab2));
PhotoViewer.java:            builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, (dialog, which) -> {
PhotoViewer.java:                        bulletinMessage = LocaleController.getString("PhoneCopied", R.string.PhoneCopied);
PhotoViewer.java:                        bulletinMessage = LocaleController.getString("HashtagCopied", R.string.HashtagCopied);
PhotoViewer.java:                        bulletinMessage = LocaleController.getString("UsernameCopied", R.string.UsernameCopied);
PhotoViewer.java:                        bulletinMessage = LocaleController.getString("LinkCopied", R.string.LinkCopied);
PhotoViewer.java:                        CharSequence title = muteVideo ? LocaleController.getString("GifCaption", R.string.GifCaption) : LocaleController.getString("VideoCaption", R.string.VideoCaption);
PhotoViewer.java:                        actionBar.setTitleAnimated(LocaleController.getString("PhotoCaption", R.string.PhotoCaption), true, 220);
PhotoViewer.java:                            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, totalImagesCount + totalImagesCountMerge));
PhotoViewer.java:                            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount + totalImagesCountMerge - imagesArr.size()) + currentIndex + 1, totalImagesCount + totalImagesCountMerge));
PhotoViewer.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PhotoViewer.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PhotoViewer.java:            builder.setMessage(LocaleController.getString("PleaseStreamDownload", R.string.PleaseStreamDownload));
PhotoViewer.java:            builder.setMessage(LocaleController.getString("PleaseDownload", R.string.PleaseDownload));
PhotoViewer.java:                parentActivity.startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
PhotoViewer.java:        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
PhotoViewer.java:                        builder.setTitle(LocaleController.getString("AreYouSureDeletePhotoTitle", R.string.AreYouSureDeletePhotoTitle));
PhotoViewer.java:                        builder.setTitle(LocaleController.getString("AreYouSureDeleteVideoTitle", R.string.AreYouSureDeleteVideoTitle));
PhotoViewer.java:                            builder.setMessage(LocaleController.formatString("AreYouSureDeleteVideoEveryone", R.string.AreYouSureDeleteVideoEveryone));
PhotoViewer.java:                            builder.setMessage(LocaleController.formatString("AreYouSureDeleteVideo", R.string.AreYouSureDeleteVideo));
PhotoViewer.java:                        builder.setTitle(LocaleController.getString("AreYouSureDeleteGIFTitle", R.string.AreYouSureDeleteGIFTitle));
PhotoViewer.java:                            builder.setMessage(LocaleController.formatString("AreYouSureDeleteGIFEveryone", R.string.AreYouSureDeleteGIFEveryone));
PhotoViewer.java:                            builder.setMessage(LocaleController.formatString("AreYouSureDeleteGIF", R.string.AreYouSureDeleteGIF));
PhotoViewer.java:                        builder.setTitle(LocaleController.getString("AreYouSureDeletePhotoTitle", R.string.AreYouSureDeletePhotoTitle));
PhotoViewer.java:                            builder.setMessage(LocaleController.formatString("AreYouSureDeletePhotoEveryone", R.string.AreYouSureDeletePhotoEveryone));
PhotoViewer.java:                            builder.setMessage(LocaleController.formatString("AreYouSureDeletePhoto", R.string.AreYouSureDeletePhoto));
PhotoViewer.java:                                            cell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), "", false, false);
PhotoViewer.java:                                            cell.setText(LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(currentUser)), "", false, false);
PhotoViewer.java:                    builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
PhotoViewer.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PhotoViewer.java:        masksItem.setContentDescription(LocaleController.getString("Masks", R.string.Masks));
PhotoViewer.java:        pipItem.setContentDescription(LocaleController.getString("AccDescrPipMode", R.string.AccDescrPipMode));
PhotoViewer.java:        sendItem.setContentDescription(LocaleController.getString("Forward", R.string.Forward));
PhotoViewer.java:        shareItem.setContentDescription(LocaleController.getString("ShareFile", R.string.ShareFile));
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_openin, R.drawable.msg_openin, LocaleController.getString("OpenInExternalApp", R.string.OpenInExternalApp)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        menuItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
PhotoViewer.java:        allMediaItem = menuItem.addSubItem(gallery_menu_showall, R.drawable.msg_media, LocaleController.getString("ShowAllMedia", R.string.ShowAllMedia));
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_savegif, R.drawable.msg_gif, LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_showinchat, R.drawable.msg_message, LocaleController.getString("ShowInChat", R.string.ShowInChat)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_masks2, R.drawable.msg_sticker, LocaleController.getString("ShowStickers", R.string.ShowStickers)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_share, R.drawable.msg_shareout, LocaleController.getString("ShareFile", R.string.ShareFile)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_save, R.drawable.msg_gallery, LocaleController.getString("SaveToGallery", R.string.SaveToGallery)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        //menuItem.addSubItem(gallery_menu_edit_avatar, R.drawable.photo_paint, LocaleController.getString("EditPhoto", R.string.EditPhoto)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_set_as_main, R.drawable.menu_private, LocaleController.getString("SetAsMain", R.string.SetAsMain)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_delete, R.drawable.msg_delete, LocaleController.getString("Delete", R.string.Delete)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:        menuItem.addSubItem(gallery_menu_cancel_loading, R.drawable.msg_cancel, LocaleController.getString("StopDownload", R.string.StopDownload)).setColors(0xfffafafa, 0xfffafafa);
PhotoViewer.java:            fullscreenButton[a].setContentDescription(LocaleController.getString("AccSwitchToFullscreen", R.string.AccSwitchToFullscreen));
PhotoViewer.java:        paintButton.setContentDescription(LocaleController.getString("AccDescrPhotoEditor", R.string.AccDescrPhotoEditor));
PhotoViewer.java:        shareButton.setContentDescription(LocaleController.getString("ShareFile", R.string.ShareFile));
PhotoViewer.java:                    staticCharsCount = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(new Date()), LocaleController.getInstance().formatterDay.format(new Date())).length();
PhotoViewer.java:        qualityPicker.doneButton.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
PhotoViewer.java:        videoAvatarTooltip.setText(LocaleController.getString("ChooseCover", R.string.ChooseCover));
PhotoViewer.java:        pickerViewSendButton.setContentDescription(LocaleController.getString("Send", R.string.Send));
PhotoViewer.java:                        cell.setTextAndIcon(LocaleController.getString("SetReminder", R.string.SetReminder), R.drawable.msg_schedule);
PhotoViewer.java:                        cell.setTextAndIcon(LocaleController.getString("ScheduleMessage", R.string.ScheduleMessage), R.drawable.msg_schedule);
PhotoViewer.java:                    cell.setTextAndIcon(LocaleController.getString("SendWithoutSound", R.string.SendWithoutSound), R.drawable.input_notify_off);
PhotoViewer.java:                    cell.setTextAndIcon(LocaleController.getString("ReplacePhoto", R.string.ReplacePhoto), R.drawable.msg_replace);
PhotoViewer.java:                    cell.setTextAndIcon(LocaleController.getString("SendAsNewPhoto", R.string.SendAsNewPhoto), R.drawable.msg_sendphoto);
PhotoViewer.java:        cropItem.setContentDescription(LocaleController.getString("CropImage", R.string.CropImage));
PhotoViewer.java:        rotateItem.setContentDescription(LocaleController.getString("AccDescrRotate", R.string.AccDescrRotate));
PhotoViewer.java:        mirrorItem.setContentDescription(LocaleController.getString("AccDescrMirror", R.string.AccDescrMirror));
PhotoViewer.java:        paintItem.setContentDescription(LocaleController.getString("AccDescrPhotoEditor", R.string.AccDescrPhotoEditor));
PhotoViewer.java:        cameraItem.setContentDescription(LocaleController.getString("AccDescrTakeMorePics", R.string.AccDescrTakeMorePics));
PhotoViewer.java:        tuneItem.setContentDescription(LocaleController.getString("AccDescrPhotoAdjust", R.string.AccDescrPhotoAdjust));
PhotoViewer.java:        compressItem.setContentDescription(LocaleController.getString("AccDescrVideoQuality", R.string.AccDescrVideoQuality));
PhotoViewer.java:                    tooltip.setText(LocaleController.getString("VideoQualityIsTooLow", R.string.VideoQualityIsTooLow));
PhotoViewer.java:        timeItem.setContentDescription(LocaleController.getString("SetTimer", R.string.SetTimer));
PhotoViewer.java:            titleView.setText(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
PhotoViewer.java:            titleView.setText(isCurrentVideo ? LocaleController.getString("MessageLifetimeVideo", R.string.MessageLifetimeVideo) : LocaleController.getString("MessageLifetimePhoto", R.string.MessageLifetimePhoto));
PhotoViewer.java:                    return LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
PhotoViewer.java:            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
PhotoViewer.java:            textView.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
PhotoViewer.java:        resetButton.setText(LocaleController.getString("Reset", R.string.CropReset).toUpperCase());
PhotoViewer.java:                        actionBar.setTitleAnimated(muteVideo ? LocaleController.getString("GifCaption", R.string.GifCaption) : LocaleController.getString("VideoCaption", R.string.VideoCaption),true, 220);
PhotoViewer.java:                        actionBar.setTitleAnimated(LocaleController.getString("PhotoCaption", R.string.PhotoCaption), true, 220);
PhotoViewer.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PhotoViewer.java:                builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
PhotoViewer.java:                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), (dialogInterface, i) -> mentionsAdapter.clearRecentHashtags());
PhotoViewer.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PhotoViewer.java:            playButtonAccessibilityOverlay.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
PhotoViewer.java:                return LocaleController.formatString("AccDescrPlayerDuration", R.string.AccDescrPlayerDuration, time, totalTime);
PhotoViewer.java:        exitFullscreenButton.setContentDescription(LocaleController.getString("AccExitFullscreen", R.string.AccExitFullscreen));
PhotoViewer.java:            actionBar.setSubtitle(muteVideo ? LocaleController.getString("SoundMuted", R.string.SoundMuted) : currentSubtitle);
PhotoViewer.java:                Toast toast = Toast.makeText(parentActivity, LocaleController.getString("VideoDoesNotSupportStreaming", R.string.VideoDoesNotSupportStreaming), Toast.LENGTH_LONG);
PhotoViewer.java:                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PhotoViewer.java:                    builder.setMessage(LocaleController.getString("CantPlayVideo", R.string.CantPlayVideo));
PhotoViewer.java:                    builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), (dialog, which) -> {
PhotoViewer.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PhotoViewer.java:                        AlertsCreator.createSimpleAlert(parentActivity, LocaleController.getString("Slowmode", R.string.Slowmode), LocaleController.getString("SlowmodeSelectSendError", R.string.SlowmodeSelectSendError)).show();
PhotoViewer.java:            editorDoneLayout.doneButton.setText(LocaleController.getString("Crop", R.string.Crop));
PhotoViewer.java:                        builder.setMessage(LocaleController.getString("DiscardChanges", R.string.DiscardChanges));
PhotoViewer.java:                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PhotoViewer.java:                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> switchToEditMode(0));
PhotoViewer.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PhotoViewer.java:        allMediaItem.setText(LocaleController.getString("ShowAllMedia", R.string.ShowAllMedia));
PhotoViewer.java:                allMediaItem.setText(LocaleController.getString("ShowAllFiles", R.string.ShowAllFiles));
PhotoViewer.java:                allMediaItem.setText(LocaleController.getString("ShowAllGIFs", R.string.ShowAllGIFs));
PhotoViewer.java:                    allMediaItem.setText(LocaleController.getString("ShowAllFiles", R.string.ShowAllFiles));
PhotoViewer.java:                    allMediaItem.setText(LocaleController.getString("ShowAllGIFs", R.string.ShowAllGIFs));
PhotoViewer.java:                    String dateString = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(new Date(date)), LocaleController.getInstance().formatterDay.format(new Date(date)));
PhotoViewer.java:                actionBar.setTitle(LocaleController.getString("AttachGif", R.string.AttachGif));
PhotoViewer.java:                            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, switchingToIndex + 1, totalImagesCount + totalImagesCountMerge));
PhotoViewer.java:                        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount + totalImagesCountMerge - imagesArr.size()) + switchingToIndex + 1, totalImagesCount + totalImagesCountMerge));
PhotoViewer.java:                        actionBar.setTitle(LocaleController.getString("AttachDocument", R.string.AttachDocument));
PhotoViewer.java:                        actionBar.setTitle(LocaleController.getString("AttachVideo", R.string.AttachVideo));
PhotoViewer.java:                        actionBar.setTitle(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
PhotoViewer.java:                    actionBar.setTitle(LocaleController.getString("AttachVideo", R.string.AttachVideo));
PhotoViewer.java:                    actionBar.setTitle(LocaleController.getString("AttachDocument", R.string.AttachDocument));
PhotoViewer.java:            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, switchingToIndex + 1, secureDocuments.size()));
PhotoViewer.java:                actionBar.setTitle(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
PhotoViewer.java:                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, switchingToIndex + 1, imagesArrLocations.size()));
PhotoViewer.java:                    actionBar.setTitle(LocaleController.getString("AttachVideo", R.string.AttachVideo));
PhotoViewer.java:                    actionBar.setTitle(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
PhotoViewer.java:                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, switchingToIndex + 1, imagesArrLocals.size()));
PhotoViewer.java:                            actionBar.setTitle(LocaleController.getString("SavedMessages", R.string.SavedMessages));
PhotoViewer.java:                actionBar.setTitle(LocaleController.getString("AttachGif", R.string.AttachGif));
PhotoViewer.java:                        actionBar.setTitle(LocaleController.getString("AttachVideo", R.string.AttachVideo));
PhotoViewer.java:                        actionBar.setTitle(LocaleController.getString("AttachPhoto", R.string.AttachPhoto));
PhotoViewer.java:                    actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, switchingToIndex + 1, size));
PhotoViewer.java:                captionTextViewSwitcher.setText(LocaleController.getString("AddCaption", R.string.AddCaption), animated);
PhotoViewer.java:            actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
PhotoViewer.java:        actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
PhotoViewer.java:            event.getText().add(LocaleController.getString("AccDescrPhotoViewer", R.string.AccDescrPhotoViewer));
PhotoViewer.java:            lowQualityDescription = LocaleController.getString("AccDescrVideoCompressLow", R.string.AccDescrVideoCompressLow);
PhotoViewer.java:            hightQualityDescription = LocaleController.getString("AccDescrVideoCompressHigh", R.string.AccDescrVideoCompressHigh);
PhotoViewer.java:                actionBar.setSubtitle(LocaleController.getString("SoundMuted", R.string.SoundMuted));
PhotoViewer.java:                muteItem.setContentDescription(LocaleController.getString("NoSound", R.string.NoSound));
PhotoViewer.java:                muteItem.setContentDescription(LocaleController.getString("Sound", R.string.Sound));
PhotoViewer.java:        actionBar.setSubtitle(muteVideo ? LocaleController.getString("SoundMuted", R.string.SoundMuted) : currentSubtitle);
PhotoViewer.java:                    playButtonAccessibilityOverlay.setContentDescription(LocaleController.getString("AccActionPlay", R.string.AccActionPlay));
PhotoViewer.java:                    playButtonAccessibilityOverlay.setContentDescription(LocaleController.getString("AccActionPause", R.string.AccActionPause));
PollCreateActivity.java:            actionBar.setTitle(LocaleController.getString("NewQuiz", R.string.NewQuiz));
PollCreateActivity.java:            actionBar.setTitle(LocaleController.getString("NewPoll", R.string.NewPoll));
PollCreateActivity.java:        doneItem = menu.addItem(done_button, LocaleController.getString("Create", R.string.Create).toUpperCase());
PollCreateActivity.java:        hintView.setText(LocaleController.getString("PollTapToSelect", R.string.PollTapToSelect));
PollCreateActivity.java:            builder.setTitle(LocaleController.getString("CancelPollAlertTitle", R.string.CancelPollAlertTitle));
PollCreateActivity.java:            builder.setMessage(LocaleController.getString("CancelPollAlertText", R.string.CancelPollAlertText));
PollCreateActivity.java:            builder.setPositiveButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialogInterface, i) -> finishFragment());
PollCreateActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PollCreateActivity.java:                        cell.setText(LocaleController.getString("PollQuestion", R.string.PollQuestion));
PollCreateActivity.java:                            cell.setText(LocaleController.getString("QuizAnswers", R.string.QuizAnswers));
PollCreateActivity.java:                            cell.setText(LocaleController.getString("AnswerOptions", R.string.AnswerOptions));
PollCreateActivity.java:                        cell.setText(LocaleController.getString("Settings", R.string.Settings));
PollCreateActivity.java:                        cell.setText(LocaleController.getString("AddAnExplanationInfo", R.string.AddAnExplanationInfo));
PollCreateActivity.java:                            cell.setText(LocaleController.getString("QuizInfo", R.string.QuizInfo));
PollCreateActivity.java:                        cell.setText(LocaleController.getString("AddAnOptionInfoMax", R.string.AddAnOptionInfoMax));
PollCreateActivity.java:                        cell.setText(LocaleController.formatString("AddAnOptionInfo", R.string.AddAnOptionInfo, LocaleController.formatPluralString("Option", 10 - answersCount)));
PollCreateActivity.java:                    textCell.setTextAndIcon(LocaleController.getString("AddAnOption", R.string.AddAnOption), combinedDrawable, false);
PollCreateActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("PollAnonymous", R.string.PollAnonymous), anonymousPoll, multipleRow != -1 || quizRow != -1);
PollCreateActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("PollMultiple", R.string.PollMultiple), multipleChoise, quizRow != -1);
PollCreateActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("PollQuiz", R.string.PollQuiz), quizPoll, false);
PollCreateActivity.java:                textCell.setTextAndHint(questionString != null ? questionString : "", LocaleController.getString("QuestionHint", R.string.QuestionHint), false);
PollCreateActivity.java:                textCell.setTextAndHint(answers[index], LocaleController.getString("OptionHint", R.string.OptionHint), true);
PollCreateActivity.java:                textCell.setTextAndHint(solutionString != null ? solutionString : "", LocaleController.getString("AddAnExplanation", R.string.AddAnExplanation), false);
PopupNotificationActivity.java:            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PopupNotificationActivity.java:            builder.setMessage(LocaleController.getString("PermissionNoAudio", R.string.PermissionNoAudio));
PopupNotificationActivity.java:            builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
PopupNotificationActivity.java:            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PopupNotificationActivity.java:            onlineTextView.setText(LocaleController.getString("ServiceNotifications", R.string.ServiceNotifications));
PrivacyControlActivity.java:            message.message = LocaleController.getString("PrivacyForwardsMessageLine", R.string.PrivacyForwardsMessageLine);
PrivacyControlActivity.java:            actionBar.setTitle(LocaleController.getString("PrivacyPhone", R.string.PrivacyPhone));
PrivacyControlActivity.java:            actionBar.setTitle(LocaleController.getString("PrivacyForwards", R.string.PrivacyForwards));
PrivacyControlActivity.java:            actionBar.setTitle(LocaleController.getString("PrivacyProfilePhoto", R.string.PrivacyProfilePhoto));
PrivacyControlActivity.java:            actionBar.setTitle(LocaleController.getString("PrivacyP2P", R.string.PrivacyP2P));
PrivacyControlActivity.java:            actionBar.setTitle(LocaleController.getString("Calls", R.string.Calls));
PrivacyControlActivity.java:            actionBar.setTitle(LocaleController.getString("GroupsAndChannels", R.string.GroupsAndChannels));
PrivacyControlActivity.java:            actionBar.setTitle(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen));
PrivacyControlActivity.java:        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
PrivacyControlActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PrivacyControlActivity.java:        builder.setMessage(LocaleController.getString("PrivacyFloodControlError", R.string.PrivacyFloodControlError));
PrivacyControlActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
PrivacyControlActivity.java:                messageCell.hintView.setOverrideText(LocaleController.getString("PrivacyForwardsEverybody", R.string.PrivacyForwardsEverybody));
PrivacyControlActivity.java:                messageCell.hintView.setOverrideText(LocaleController.getString("PrivacyForwardsNobody", R.string.PrivacyForwardsNobody));
PrivacyControlActivity.java:                messageCell.hintView.setOverrideText(LocaleController.getString("PrivacyForwardsContacts", R.string.PrivacyForwardsContacts));
PrivacyControlActivity.java:                    builder.setMessage(LocaleController.getString("WhoCanAddMeInfo", R.string.WhoCanAddMeInfo));
PrivacyControlActivity.java:                    builder.setMessage(LocaleController.getString("CustomHelp", R.string.CustomHelp));
PrivacyControlActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
PrivacyControlActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
PrivacyControlActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PrivacyControlActivity.java:            builder.setTitle(LocaleController.getString("UserRestrictionsApplyChanges", R.string.UserRestrictionsApplyChanges));
PrivacyControlActivity.java:            builder.setMessage(LocaleController.getString("PrivacySettingsChangedAlert", R.string.PrivacySettingsChangedAlert));
PrivacyControlActivity.java:            builder.setPositiveButton(LocaleController.getString("ApplyTheme", R.string.ApplyTheme), (dialogInterface, i) -> processDone());
PrivacyControlActivity.java:            builder.setNegativeButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialog, which) -> finishFragment());
PrivacyControlActivity.java:                            value = LocaleController.getString("EmpryUsersPlaceholder", R.string.EmpryUsersPlaceholder);
PrivacyControlActivity.java:                            textCell.setTextAndValue(LocaleController.getString("AlwaysAllow", R.string.AlwaysAllow), value, neverShareRow != -1);
PrivacyControlActivity.java:                            textCell.setTextAndValue(LocaleController.getString("AlwaysShareWith", R.string.AlwaysShareWith), value, neverShareRow != -1);
PrivacyControlActivity.java:                            value = LocaleController.getString("EmpryUsersPlaceholder", R.string.EmpryUsersPlaceholder);
PrivacyControlActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NeverAllow", R.string.NeverAllow), value, false);
PrivacyControlActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NeverShareWith", R.string.NeverShareWith), value, false);
PrivacyControlActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacyControlActivity.java:                        textCell.setTextAndValue(LocaleController.getString("PrivacyP2P2", R.string.PrivacyP2P2), value, false);
PrivacyControlActivity.java:                                privacyCell.setText(LocaleController.getString("PrivacyPhoneInfo3", R.string.PrivacyPhoneInfo3));
PrivacyControlActivity.java:                                privacyCell.setText(LocaleController.getString("PrivacyPhoneInfo", R.string.PrivacyPhoneInfo));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("PrivacyForwardsInfo", R.string.PrivacyForwardsInfo));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("PrivacyProfilePhotoInfo", R.string.PrivacyProfilePhotoInfo));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("PrivacyCallsP2PHelp", R.string.PrivacyCallsP2PHelp));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("WhoCanCallMeInfo", R.string.WhoCanCallMeInfo));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("WhoCanAddMeInfo", R.string.WhoCanAddMeInfo));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("CustomHelp", R.string.CustomHelp));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("PrivacyPhoneInfo2", R.string.PrivacyPhoneInfo2));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("PrivacyForwardsInfo2", R.string.PrivacyForwardsInfo2));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("PrivacyProfilePhotoInfo2", R.string.PrivacyProfilePhotoInfo2));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("CustomP2PInfo", R.string.CustomP2PInfo));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("CustomCallInfo", R.string.CustomCallInfo));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("CustomShareInfo", R.string.CustomShareInfo));
PrivacyControlActivity.java:                            privacyCell.setText(LocaleController.getString("CustomShareSettingsHelp", R.string.CustomShareSettingsHelp));
PrivacyControlActivity.java:                            headerCell.setText(LocaleController.getString("PrivacyPhoneTitle", R.string.PrivacyPhoneTitle));
PrivacyControlActivity.java:                            headerCell.setText(LocaleController.getString("PrivacyForwardsTitle", R.string.PrivacyForwardsTitle));
PrivacyControlActivity.java:                            headerCell.setText(LocaleController.getString("PrivacyProfilePhotoTitle", R.string.PrivacyProfilePhotoTitle));
PrivacyControlActivity.java:                            headerCell.setText(LocaleController.getString("P2PEnabledWith", R.string.P2PEnabledWith));
PrivacyControlActivity.java:                            headerCell.setText(LocaleController.getString("WhoCanCallMe", R.string.WhoCanCallMe));
PrivacyControlActivity.java:                            headerCell.setText(LocaleController.getString("WhoCanAddMe", R.string.WhoCanAddMe));
PrivacyControlActivity.java:                            headerCell.setText(LocaleController.getString("LastSeenTitle", R.string.LastSeenTitle));
PrivacyControlActivity.java:                        headerCell.setText(LocaleController.getString("AddExceptions", R.string.AddExceptions));
PrivacyControlActivity.java:                        headerCell.setText(LocaleController.getString("PrivacyP2PHeader", R.string.PrivacyP2PHeader));
PrivacyControlActivity.java:                        headerCell.setText(LocaleController.getString("PrivacyPhoneTitle2", R.string.PrivacyPhoneTitle2));
PrivacyControlActivity.java:                                radioCell.setText(LocaleController.getString("P2PEverybody", R.string.P2PEverybody), currentType == TYPE_EVERYBODY, true);
PrivacyControlActivity.java:                                radioCell.setText(LocaleController.getString("LastSeenEverybody", R.string.LastSeenEverybody), currentType == TYPE_EVERYBODY, true);
PrivacyControlActivity.java:                                radioCell.setText(LocaleController.getString("P2PContacts", R.string.P2PContacts), currentType == TYPE_CONTACTS, nobodyRow != -1);
PrivacyControlActivity.java:                                radioCell.setText(LocaleController.getString("LastSeenContacts", R.string.LastSeenContacts), currentType == TYPE_CONTACTS, nobodyRow != -1);
PrivacyControlActivity.java:                                radioCell.setText(LocaleController.getString("P2PNobody", R.string.P2PNobody), currentType == TYPE_NOBODY, false);
PrivacyControlActivity.java:                                radioCell.setText(LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody), currentType == TYPE_NOBODY, false);
PrivacyControlActivity.java:                            radioCell.setText(LocaleController.getString("LastSeenContacts", R.string.LastSeenContacts), currentSubType == 1, false);
PrivacyControlActivity.java:                            radioCell.setText(LocaleController.getString("LastSeenEverybody", R.string.LastSeenEverybody), currentSubType == 0, true);
PrivacySettingsActivity.java:                    Toast.makeText(getParentActivity(), LocaleController.getString("SyncContactsAdded", R.string.SyncContactsAdded), Toast.LENGTH_SHORT).show();
PrivacySettingsActivity.java:        actionBar.setTitle(LocaleController.getString("PrivacySettings", R.string.PrivacySettings));
PrivacySettingsActivity.java:                builder.setTitle(LocaleController.getString("DeleteAccountTitle", R.string.DeleteAccountTitle));
PrivacySettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PrivacySettingsActivity.java:                    AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
PrivacySettingsActivity.java:                builder.setTitle(LocaleController.getString("SyncContactsDeleteTitle", R.string.SyncContactsDeleteTitle));
PrivacySettingsActivity.java:                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("SyncContactsDeleteText", R.string.SyncContactsDeleteText)));
PrivacySettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PrivacySettingsActivity.java:                builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
PrivacySettingsActivity.java:                    builder.setTitle(LocaleController.getString("SuggestContactsTitle", R.string.SuggestContactsTitle));
PrivacySettingsActivity.java:                    builder.setMessage(LocaleController.getString("SuggestContactsAlert", R.string.SuggestContactsAlert));
PrivacySettingsActivity.java:                    builder.setPositiveButton(LocaleController.getString("MuteDisable", R.string.MuteDisable), (dialogInterface, i) -> {
PrivacySettingsActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PrivacySettingsActivity.java:                builder.setTitle(LocaleController.getString("PrivacyPaymentsClearAlertTitle", R.string.PrivacyPaymentsClearAlertTitle));
PrivacySettingsActivity.java:                builder.setMessage(LocaleController.getString("PrivacyPaymentsClearAlertText", R.string.PrivacyPaymentsClearAlertText));
PrivacySettingsActivity.java:                        name = LocaleController.getString("PrivacyClearShipping", R.string.PrivacyClearShipping);
PrivacySettingsActivity.java:                        name = LocaleController.getString("PrivacyClearPayment", R.string.PrivacyClearPayment);
PrivacySettingsActivity.java:                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton), (dialogInterface, i) -> {
PrivacySettingsActivity.java:                    builder1.setTitle(LocaleController.getString("PrivacyPaymentsClearAlertTitle", R.string.PrivacyPaymentsClearAlertTitle));
PrivacySettingsActivity.java:                    builder1.setMessage(LocaleController.getString("PrivacyPaymentsClearAlert", R.string.PrivacyPaymentsClearAlert));
PrivacySettingsActivity.java:                    builder1.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton), (dialogInterface2, i2) -> {
PrivacySettingsActivity.java:                    builder1.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PrivacySettingsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
PrivacySettingsActivity.java:                return LocaleController.getString("P2PNobody", R.string.P2PNobody);
PrivacySettingsActivity.java:                return LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody);
PrivacySettingsActivity.java:                    return LocaleController.getString("P2PEverybody", R.string.P2PEverybody);
PrivacySettingsActivity.java:                    return LocaleController.formatString("P2PEverybodyMinus", R.string.P2PEverybodyMinus, minus);
PrivacySettingsActivity.java:                    return LocaleController.getString("LastSeenEverybody", R.string.LastSeenEverybody);
PrivacySettingsActivity.java:                    return LocaleController.formatString("LastSeenEverybodyMinus", R.string.LastSeenEverybodyMinus, minus);
PrivacySettingsActivity.java:                    return LocaleController.getString("P2PContacts", R.string.P2PContacts);
PrivacySettingsActivity.java:                        return LocaleController.formatString("P2PContactsMinusPlus", R.string.P2PContactsMinusPlus, minus, plus);
PrivacySettingsActivity.java:                        return LocaleController.formatString("P2PContactsMinus", R.string.P2PContactsMinus, minus);
PrivacySettingsActivity.java:                        return LocaleController.formatString("P2PContactsPlus", R.string.P2PContactsPlus, plus);
PrivacySettingsActivity.java:                    return LocaleController.getString("LastSeenContacts", R.string.LastSeenContacts);
PrivacySettingsActivity.java:                        return LocaleController.formatString("LastSeenContactsMinusPlus", R.string.LastSeenContactsMinusPlus, minus, plus);
PrivacySettingsActivity.java:                        return LocaleController.formatString("LastSeenContactsMinus", R.string.LastSeenContactsMinus, minus);
PrivacySettingsActivity.java:                        return LocaleController.formatString("LastSeenContactsPlus", R.string.LastSeenContactsPlus, plus);
PrivacySettingsActivity.java:                    return LocaleController.getString("P2PNobody", R.string.P2PNobody);
PrivacySettingsActivity.java:                    return LocaleController.formatString("P2PNobodyPlus", R.string.P2PNobodyPlus, plus);
PrivacySettingsActivity.java:                    return LocaleController.getString("LastSeenNobody", R.string.LastSeenNobody);
PrivacySettingsActivity.java:                    return LocaleController.formatString("LastSeenNobodyPlus", R.string.LastSeenNobodyPlus, plus);
PrivacySettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("BlockedUsers", R.string.BlockedUsers), LocaleController.getString("BlockedEmpty", R.string.BlockedEmpty), true);
PrivacySettingsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("BlockedUsers", R.string.BlockedUsers), String.format("%d", totalCount), true);
PrivacySettingsActivity.java:                            textCell.setText(LocaleController.getString("BlockedUsers", R.string.BlockedUsers), true);
PrivacySettingsActivity.java:                        textCell.setText(LocaleController.getString("SessionsTitle", R.string.SessionsTitle), false);
PrivacySettingsActivity.java:                        textCell.setText(LocaleController.getString("WebSessionsTitle", R.string.WebSessionsTitle), false);
PrivacySettingsActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacySettingsActivity.java:                            value = LocaleController.getString("PasswordOn", R.string.PasswordOn);
PrivacySettingsActivity.java:                            value = LocaleController.getString("PasswordOff", R.string.PasswordOff);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("TwoStepVerification", R.string.TwoStepVerification), value, true);
PrivacySettingsActivity.java:                        textCell.setText(LocaleController.getString("Passcode", R.string.Passcode), true);
PrivacySettingsActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("PrivacyPhone", R.string.PrivacyPhone), value, true);
PrivacySettingsActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen), value, true);
PrivacySettingsActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("GroupsAndChannels", R.string.GroupsAndChannels), value, false);
PrivacySettingsActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("Calls", R.string.Calls), value, true);
PrivacySettingsActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("PrivacyProfilePhoto", R.string.PrivacyProfilePhoto), value, true);
PrivacySettingsActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("PrivacyForwards", R.string.PrivacyForwards), value, true);
PrivacySettingsActivity.java:                        textCell.setText(LocaleController.getString("TelegramPassport", R.string.TelegramPassport), true);
PrivacySettingsActivity.java:                            value = LocaleController.getString("Loading", R.string.Loading);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("DeleteAccountIfAwayFor3", R.string.DeleteAccountIfAwayFor3), value, false);
PrivacySettingsActivity.java:                        textCell.setText(LocaleController.getString("PrivacyPaymentsClear", R.string.PrivacyPaymentsClear), true);
PrivacySettingsActivity.java:                                value = LocaleController.getString("MapPreviewProviderTelegram", R.string.MapPreviewProviderTelegram);
PrivacySettingsActivity.java:                                value = LocaleController.getString("MapPreviewProviderGoogle", R.string.MapPreviewProviderGoogle);
PrivacySettingsActivity.java:                                value = LocaleController.getString("MapPreviewProviderNobody", R.string.MapPreviewProviderNobody);
PrivacySettingsActivity.java:                                value = LocaleController.getString("MapPreviewProviderYandex", R.string.MapPreviewProviderYandex);
PrivacySettingsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("MapPreviewProvider", R.string.MapPreviewProvider), value, true);
PrivacySettingsActivity.java:                        textCell.setText(LocaleController.getString("SyncContactsDelete", R.string.SyncContactsDelete), true);
PrivacySettingsActivity.java:                        privacyCell.setText(LocaleController.getString("DeleteAccountHelp", R.string.DeleteAccountHelp));
PrivacySettingsActivity.java:                        privacyCell.setText(LocaleController.getString("GroupsAndChannelsHelp", R.string.GroupsAndChannelsHelp));
PrivacySettingsActivity.java:                        privacyCell.setText(LocaleController.getString("SessionsInfo", R.string.SessionsInfo));
PrivacySettingsActivity.java:                        privacyCell.setText(LocaleController.getString("SecretWebPageInfo", R.string.SecretWebPageInfo));
PrivacySettingsActivity.java:                        privacyCell.setText(LocaleController.getString("PrivacyBotsInfo", R.string.PrivacyBotsInfo));
PrivacySettingsActivity.java:                            privacyCell.setText(LocaleController.getString("SyncContactsInfoOn", R.string.SyncContactsInfoOn));
PrivacySettingsActivity.java:                            privacyCell.setText(LocaleController.getString("SyncContactsInfoOff", R.string.SyncContactsInfoOff));
PrivacySettingsActivity.java:                        privacyCell.setText(LocaleController.getString("SuggestContactsInfo", R.string.SuggestContactsInfo));
PrivacySettingsActivity.java:                        privacyCell.setText(LocaleController.getString("ArchiveAndMuteInfo", R.string.ArchiveAndMuteInfo));
PrivacySettingsActivity.java:                        headerCell.setText(LocaleController.getString("PrivacyTitle", R.string.PrivacyTitle));
PrivacySettingsActivity.java:                        headerCell.setText(LocaleController.getString("SecurityTitle", R.string.SecurityTitle));
PrivacySettingsActivity.java:                        headerCell.setText(LocaleController.getString("DeleteMyAccount", R.string.DeleteMyAccount));
PrivacySettingsActivity.java:                        headerCell.setText(LocaleController.getString("SecretChat", R.string.SecretChat));
PrivacySettingsActivity.java:                        headerCell.setText(LocaleController.getString("PrivacyBots", R.string.PrivacyBots));
PrivacySettingsActivity.java:                        headerCell.setText(LocaleController.getString("Contacts", R.string.Contacts));
PrivacySettingsActivity.java:                        headerCell.setText(LocaleController.getString("NewChatsFromNonContacts", R.string.NewChatsFromNonContacts));
PrivacySettingsActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("SecretWebPage", R.string.SecretWebPage), getMessagesController().secretWebpagePreview == 1, false);
PrivacySettingsActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("SyncContacts", R.string.SyncContacts), newSync, true);
PrivacySettingsActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("SuggestContacts", R.string.SuggestContacts), newSuggest, false);
PrivacySettingsActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("ArchiveAndMute", R.string.ArchiveAndMute), archiveChats, false);
PrivacyUsersActivity.java:            actionBar.setTitle(LocaleController.getString("BlockedUsers", R.string.BlockedUsers));
PrivacyUsersActivity.java:                actionBar.setTitle(LocaleController.getString("FilterAlwaysShow", R.string.FilterAlwaysShow));
PrivacyUsersActivity.java:                actionBar.setTitle(LocaleController.getString("FilterNeverShow", R.string.FilterNeverShow));
PrivacyUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("AlwaysAllow", R.string.AlwaysAllow));
PrivacyUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("NeverAllow", R.string.NeverAllow));
PrivacyUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("AlwaysShareWithTitle", R.string.AlwaysShareWithTitle));
PrivacyUsersActivity.java:                    actionBar.setTitle(LocaleController.getString("NeverShareWithTitle", R.string.NeverShareWithTitle));
PrivacyUsersActivity.java:            emptyView.setText(LocaleController.getString("NoBlocked", R.string.NoBlocked));
PrivacyUsersActivity.java:            emptyView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
PrivacyUsersActivity.java:            items = new CharSequence[]{LocaleController.getString("Unblock", R.string.Unblock)};
PrivacyUsersActivity.java:            items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
PrivacyUsersActivity.java:                                number = LocaleController.getString("Bot", R.string.Bot).substring(0, 1).toUpperCase() + LocaleController.getString("Bot", R.string.Bot).substring(1);
PrivacyUsersActivity.java:                                number = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
PrivacyUsersActivity.java:                                subtitle = LocaleController.getString("MegaLocation", R.string.MegaLocation);
PrivacyUsersActivity.java:                                subtitle = LocaleController.getString("MegaPrivate", R.string.MegaPrivate);
PrivacyUsersActivity.java:                                subtitle = LocaleController.getString("MegaPublic", R.string.MegaPublic);
PrivacyUsersActivity.java:                            privacyCell.setText(LocaleController.getString("BlockedUsersInfo", R.string.BlockedUsersInfo));
PrivacyUsersActivity.java:                        actionCell.setText(LocaleController.getString("BlockUser", R.string.BlockUser), null, R.drawable.actions_addmember2, false);
PrivacyUsersActivity.java:                        actionCell.setText(LocaleController.getString("PrivacyAddAnException", R.string.PrivacyAddAnException), null, R.drawable.actions_addmember2, false);
PrivacyUsersActivity.java:                            headerCell.setText(LocaleController.getString("PrivacyExceptions", R.string.PrivacyExceptions));
ProfileActivity.java:                                builder.setTitle(LocaleController.getString("BlockUser", R.string.BlockUser));
ProfileActivity.java:                                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureBlockContact2", R.string.AreYouSureBlockContact2, ContactsController.formatName(user.first_name, user.last_name))));
ProfileActivity.java:                                builder.setPositiveButton(LocaleController.getString("BlockContact", R.string.BlockContact), (dialogInterface, i) -> {
ProfileActivity.java:                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileActivity.java:                    args.putString("selectAlertString", LocaleController.getString("SendContactToText", R.string.SendContactToText));
ProfileActivity.java:                    args.putString("selectAlertStringGroup", LocaleController.getString("SendContactToGroupText", R.string.SendContactToGroupText));
ProfileActivity.java:                    builder.setTitle(LocaleController.getString("DeleteContact", R.string.DeleteContact));
ProfileActivity.java:                    builder.setMessage(LocaleController.getString("AreYouSureDeleteContact", R.string.AreYouSureDeleteContact));
ProfileActivity.java:                    builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
ProfileActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileActivity.java:                    args.putString("addToGroupAlertString", LocaleController.formatString("AddToTheGroupAlertText", R.string.AddToTheGroupAlertText, UserObject.getUserName(user), "%1$s"));
ProfileActivity.java:                        startActivityForResult(Intent.createChooser(intent, LocaleController.getString("BotShare", R.string.BotShare)), 500);
ProfileActivity.java:                    builder.setTitle(LocaleController.getString("AreYouSureSecretChatTitle", R.string.AreYouSureSecretChatTitle));
ProfileActivity.java:                    builder.setMessage(LocaleController.getString("AreYouSureSecretChat", R.string.AreYouSureSecretChat));
ProfileActivity.java:                    builder.setPositiveButton(LocaleController.getString("Start", R.string.Start), (dialogInterface, i) -> {
ProfileActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileActivity.java:                        builder.setTitle(LocaleController.getString("AreYouSureDeleteVideoTitle", R.string.AreYouSureDeleteVideoTitle));
ProfileActivity.java:                        builder.setMessage(LocaleController.formatString("AreYouSureDeleteVideo", R.string.AreYouSureDeleteVideo));
ProfileActivity.java:                        builder.setTitle(LocaleController.getString("AreYouSureDeletePhotoTitle", R.string.AreYouSureDeletePhotoTitle));
ProfileActivity.java:                        builder.setMessage(LocaleController.formatString("AreYouSureDeletePhoto", R.string.AreYouSureDeletePhoto));
ProfileActivity.java:                    builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
ProfileActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileActivity.java:            searchItem.setContentDescription(LocaleController.getString("SearchInSettings", R.string.SearchInSettings));
ProfileActivity.java:            searchItem.setSearchFieldHint(LocaleController.getString("SearchInSettings", R.string.SearchInSettings));
ProfileActivity.java:        videoCallItem.setContentDescription(LocaleController.getString("VideoCall", R.string.VideoCall));
ProfileActivity.java:            callItem.setContentDescription(LocaleController.getString("VoipGroupVoiceChat", R.string.VoipGroupVoiceChat));
ProfileActivity.java:            callItem.setContentDescription(LocaleController.getString("Call", R.string.Call));
ProfileActivity.java:        editItem.setContentDescription(LocaleController.getString("Edit", R.string.Edit));
ProfileActivity.java:        otherItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
ProfileActivity.java:                        getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("BotShare", R.string.BotShare)), 500);
ProfileActivity.java:                Browser.openUrl(getParentActivity(), LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl));
ProfileActivity.java:                Browser.openUrl(getParentActivity(), LocaleController.getString("PrivacyPolicyUrl", R.string.PrivacyPolicyUrl));
ProfileActivity.java:                builder1.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
ProfileActivity.java:                builder1.setTitle(LocaleController.getString("AppName", R.string.AppName));
ProfileActivity.java:                builder1.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
ProfileActivity.java:                builder1.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileActivity.java:                        builder.setTitle(LocaleController.getString("DebugMenu", R.string.DebugMenu));
ProfileActivity.java:                                LocaleController.getString("DebugMenuImportContacts", R.string.DebugMenuImportContacts),
ProfileActivity.java:                                LocaleController.getString("DebugMenuReloadContacts", R.string.DebugMenuReloadContacts),
ProfileActivity.java:                                LocaleController.getString("DebugMenuResetContacts", R.string.DebugMenuResetContacts),
ProfileActivity.java:                                LocaleController.getString("DebugMenuResetDialogs", R.string.DebugMenuResetDialogs),
ProfileActivity.java:                                BuildVars.LOGS_ENABLED ? LocaleController.getString("DebugMenuDisableLogs", R.string.DebugMenuDisableLogs) : LocaleController.getString("DebugMenuEnableLogs", R.string.DebugMenuEnableLogs),
ProfileActivity.java:                                SharedConfig.inappCamera ? LocaleController.getString("DebugMenuDisableCamera", R.string.DebugMenuDisableCamera) : LocaleController.getString("DebugMenuEnableCamera", R.string.DebugMenuEnableCamera),
ProfileActivity.java:                                LocaleController.getString("DebugMenuClearMediaCache", R.string.DebugMenuClearMediaCache),
ProfileActivity.java:                                LocaleController.getString("DebugMenuCallSettings", R.string.DebugMenuCallSettings),
ProfileActivity.java:                                LocaleController.getString("DebugMenuReadAllDialogs", R.string.DebugMenuReadAllDialogs),
ProfileActivity.java:                                SharedConfig.pauseMusicOnRecord ? LocaleController.getString("DebugMenuDisablePauseMusic", R.string.DebugMenuDisablePauseMusic) : LocaleController.getString("DebugMenuEnablePauseMusic", R.string.DebugMenuEnablePauseMusic),
ProfileActivity.java:                                BuildVars.DEBUG_VERSION && !AndroidUtilities.isTablet() && Build.VERSION.SDK_INT >= 23 ? (SharedConfig.smoothKeyboard ? LocaleController.getString("DebugMenuDisableSmoothKeyboard", R.string.DebugMenuDisableSmoothKeyboard) : LocaleController.getString("DebugMenuEnableSmoothKeyboard", R.string.DebugMenuEnableSmoothKeyboard)) : null,
ProfileActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ProfileActivity.java:                builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
ProfileActivity.java:                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), (dialogInterface, i) -> searchAdapter.clearRecent());
ProfileActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileActivity.java:            textView.setText(LocaleController.getString("BanFromTheGroup", R.string.BanFromTheGroup));
ProfileActivity.java:                    info.setText(LocaleController.getString("AccDescrProfilePicture", R.string.AccDescrProfilePicture));
ProfileActivity.java:                        info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_CLICK, LocaleController.getString("Open", R.string.Open)));
ProfileActivity.java:                        info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_LONG_CLICK, LocaleController.getString("AccDescrOpenInPhotoViewer", R.string.AccDescrOpenInPhotoViewer)));
ProfileActivity.java:                writeButton.setContentDescription(LocaleController.getString("AccDescrChangeProfilePicture", R.string.AccDescrChangeProfilePicture));
ProfileActivity.java:                writeButton.setContentDescription(LocaleController.getString("AccDescrOpenChat", R.string.AccDescrOpenChat));
ProfileActivity.java:            writeButton.setContentDescription(LocaleController.getString("ViewDiscussion", R.string.ViewDiscussion));
ProfileActivity.java:                items.add(editingAdmin ? LocaleController.getString("EditAdminRights", R.string.EditAdminRights) : LocaleController.getString("SetAsAdmin", R.string.SetAsAdmin));
ProfileActivity.java:                items.add(LocaleController.getString("ChangePermissions", R.string.ChangePermissions));
ProfileActivity.java:                items.add(LocaleController.getString("KickFromGroup", R.string.KickFromGroup));
ProfileActivity.java:                        builder2.setTitle(LocaleController.getString("AppName", R.string.AppName));
ProfileActivity.java:                        builder2.setMessage(LocaleController.formatString("AdminWillBeRemoved", R.string.AdminWillBeRemoved, ContactsController.formatName(user.first_name, user.last_name)));
ProfileActivity.java:                        builder2.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
ProfileActivity.java:                        builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileActivity.java:            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, (dialogInterface, i) -> {
ProfileActivity.java:                        BulletinFactory.of(this).createCopyBulletin(LocaleController.getString("UsernameCopied", R.string.UsernameCopied)).show();
ProfileActivity.java:                    items.add(LocaleController.getString("CallViaTelegram", R.string.CallViaTelegram));
ProfileActivity.java:                        items.add(LocaleController.getString("VideoCallViaTelegram", R.string.VideoCallViaTelegram));
ProfileActivity.java:                items.add(LocaleController.getString("Call", R.string.Call));
ProfileActivity.java:            items.add(LocaleController.getString("Copy", R.string.Copy));
ProfileActivity.java:                        BulletinFactory.of(this).createCopyBulletin(LocaleController.getString("PhoneCopied", R.string.PhoneCopied)).show();
ProfileActivity.java:            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, (dialogInterface, i) -> {
ProfileActivity.java:                        BulletinFactory.of(this).createCopyBulletin(LocaleController.getString("BioCopied", R.string.BioCopied)).show();
ProfileActivity.java:                        BulletinFactory.of(this).createCopyBulletin(LocaleController.getString("TextCopied", R.string.TextCopied)).show();
ProfileActivity.java:            setParentActivityTitle(LocaleController.getString("Settings", R.string.Settings));
ProfileActivity.java:            onlineTextOverride = LocaleController.getString("WaitingForNetwork", R.string.WaitingForNetwork);
ProfileActivity.java:            onlineTextOverride = LocaleController.getString("Connecting", R.string.Connecting);
ProfileActivity.java:            onlineTextOverride = LocaleController.getString("Updating", R.string.Updating);
ProfileActivity.java:            onlineTextOverride = LocaleController.getString("ConnectingToProxy", R.string.ConnectingToProxy);
ProfileActivity.java:                newString2 = LocaleController.getString("Online", R.string.Online);
ProfileActivity.java:                newString2 = LocaleController.getString("ServiceNotifications", R.string.ServiceNotifications);
ProfileActivity.java:                newString2 = LocaleController.getString("SupportStatus", R.string.SupportStatus);
ProfileActivity.java:                newString2 = LocaleController.getString("Bot", R.string.Bot);
ProfileActivity.java:                        statusString = profileStatusString = LocaleController.getString("Loading", R.string.Loading).toLowerCase();
ProfileActivity.java:                            statusString = profileStatusString = LocaleController.getString("ChannelPublic", R.string.ChannelPublic).toLowerCase();
ProfileActivity.java:                            statusString = profileStatusString = LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate).toLowerCase();
ProfileActivity.java:                                    statusString = profileStatusString = LocaleController.getString("MegaLocation", R.string.MegaLocation).toLowerCase();
ProfileActivity.java:                                    statusString = profileStatusString = LocaleController.getString("MegaPublic", R.string.MegaPublic).toLowerCase();
ProfileActivity.java:                                    statusString = profileStatusString = LocaleController.getString("MegaPrivate", R.string.MegaPrivate).toLowerCase();
ProfileActivity.java:                    statusString = profileStatusString = LocaleController.getString("YouWereKicked", R.string.YouWereKicked);
ProfileActivity.java:                    statusString = profileStatusString = LocaleController.getString("YouLeft", R.string.YouLeft);
ProfileActivity.java:                                    onlineTextView[a].setText(LocaleController.getString("MegaLocation", R.string.MegaLocation).toLowerCase());
ProfileActivity.java:                                    onlineTextView[a].setText(LocaleController.getString("MegaPublic", R.string.MegaPublic).toLowerCase());
ProfileActivity.java:                                    onlineTextView[a].setText(LocaleController.getString("MegaPrivate", R.string.MegaPrivate).toLowerCase());
ProfileActivity.java:                otherItem.addSubItem(edit_name, R.drawable.msg_edit, LocaleController.getString("EditName", R.string.EditName));
ProfileActivity.java:                            otherItem.addSubItem(block_contact, R.drawable.msg_block, LocaleController.getString("Unblock", R.string.Unblock));
ProfileActivity.java:                                otherItem.addSubItem(invite_to_group, R.drawable.msg_addbot, LocaleController.getString("BotInvite", R.string.BotInvite));
ProfileActivity.java:                            otherItem.addSubItem(share, R.drawable.msg_share, LocaleController.getString("BotShare", R.string.BotShare));
ProfileActivity.java:                            otherItem.addSubItem(add_contact, R.drawable.msg_addcontact, LocaleController.getString("AddContact", R.string.AddContact));
ProfileActivity.java:                            otherItem.addSubItem(share_contact, R.drawable.msg_share, LocaleController.getString("ShareContact", R.string.ShareContact));
ProfileActivity.java:                            otherItem.addSubItem(block_contact, !userBlocked ? R.drawable.msg_block : R.drawable.msg_retry, !userBlocked ? LocaleController.getString("BotStop", R.string.BotStop) : LocaleController.getString("BotRestart", R.string.BotRestart));
ProfileActivity.java:                            otherItem.addSubItem(block_contact, !userBlocked ? R.drawable.msg_block : R.drawable.msg_block, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock));
ProfileActivity.java:                        otherItem.addSubItem(share_contact, R.drawable.msg_share, LocaleController.getString("ShareContact", R.string.ShareContact));
ProfileActivity.java:                    otherItem.addSubItem(block_contact, !userBlocked ? R.drawable.msg_block : R.drawable.msg_block, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock));
ProfileActivity.java:                    otherItem.addSubItem(edit_contact, R.drawable.msg_edit, LocaleController.getString("EditContact", R.string.EditContact));
ProfileActivity.java:                    otherItem.addSubItem(delete_contact, R.drawable.msg_delete, LocaleController.getString("DeleteContact", R.string.DeleteContact));
ProfileActivity.java:                    otherItem.addSubItem(start_secret_chat, R.drawable.msg_start_secret, LocaleController.getString("StartEncryptedChat", R.string.StartEncryptedChat));
ProfileActivity.java:                otherItem.addSubItem(add_shortcut, R.drawable.msg_home, LocaleController.getString("AddShortcut", R.string.AddShortcut));
ProfileActivity.java:                        otherItem.addSubItem(call_item, R.drawable.msg_voicechat, LocaleController.getString("StartVoipChat", R.string.StartVoipChat));
ProfileActivity.java:                        otherItem.addSubItem(statistics, R.drawable.msg_stats, LocaleController.getString("Statistics", R.string.Statistics));
ProfileActivity.java:                    otherItem.addSubItem(search_members, R.drawable.msg_search, LocaleController.getString("SearchMembers", R.string.SearchMembers));
ProfileActivity.java:                        otherItem.addSubItem(leave_group, R.drawable.msg_leave, LocaleController.getString("LeaveMegaMenu", R.string.LeaveMegaMenu));
ProfileActivity.java:                        otherItem.addSubItem(share, R.drawable.msg_share, LocaleController.getString("BotShare", R.string.BotShare));
ProfileActivity.java:                        otherItem.addSubItem(view_discussion, R.drawable.msg_discussion, LocaleController.getString("ViewDiscussion", R.string.ViewDiscussion));
ProfileActivity.java:                        otherItem.addSubItem(leave_group, R.drawable.msg_leave, LocaleController.getString("LeaveChannelMenu", R.string.LeaveChannelMenu));
ProfileActivity.java:                        otherItem.addSubItem(call_item, R.drawable.msg_voicechat, LocaleController.getString("StartVoipChat", R.string.StartVoipChat));
ProfileActivity.java:                    otherItem.addSubItem(search_members, R.drawable.msg_search, LocaleController.getString("SearchMembers", R.string.SearchMembers));
ProfileActivity.java:                otherItem.addSubItem(leave_group, R.drawable.msg_leave, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit));
ProfileActivity.java:            otherItem.addSubItem(add_shortcut, R.drawable.msg_home, LocaleController.getString("AddShortcut", R.string.AddShortcut));
ProfileActivity.java:            otherItem.addSubItem(add_photo, R.drawable.msg_addphoto, LocaleController.getString("AddPhoto", R.string.AddPhoto));
ProfileActivity.java:            otherItem.addSubItem(set_as_main, R.drawable.menu_private, LocaleController.getString("SetAsMain", R.string.SetAsMain));
ProfileActivity.java:            otherItem.addSubItem(gallery_menu_save, R.drawable.msg_gallery, LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ProfileActivity.java:            //otherItem.addSubItem(edit_avatar, R.drawable.photo_paint, LocaleController.getString("EditPhoto", R.string.EditPhoto));
ProfileActivity.java:            otherItem.addSubItem(delete_avatar, R.drawable.msg_delete, LocaleController.getString("Delete", R.string.Delete));
ProfileActivity.java:            otherItem.addSubItem(gallery_menu_save, R.drawable.msg_gallery, LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
ProfileActivity.java:            otherItem.addSubItem(logout, R.drawable.msg_leave, LocaleController.getString("LogOut", R.string.LogOut));
ProfileActivity.java:                            Toast.makeText(getParentActivity(), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred), Toast.LENGTH_SHORT).show();
ProfileActivity.java:                        cell.setText(LocaleController.formatString("TelegramVersion", R.string.TelegramVersion, String.format(Locale.US, "v%s (%d) %s", pInfo.versionName, code, abi)));
ProfileActivity.java:                            headerCell.setText(LocaleController.getString("ReportChatDescription", R.string.ReportChatDescription));
ProfileActivity.java:                            headerCell.setText(LocaleController.getString("Info", R.string.Info));
ProfileActivity.java:                        headerCell.setText(LocaleController.getString("ChannelMembers", R.string.ChannelMembers));
ProfileActivity.java:                        headerCell.setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
ProfileActivity.java:                        headerCell.setText(LocaleController.getString("Account", R.string.Account));
ProfileActivity.java:                        headerCell.setText(LocaleController.getString("SettingsHelp", R.string.SettingsHelp));
ProfileActivity.java:                        headerCell.setText(LocaleController.getString("SettingsDebug", R.string.SettingsDebug));
ProfileActivity.java:                            text = LocaleController.getString("PhoneHidden", R.string.PhoneHidden);
ProfileActivity.java:                        detailCell.setTextAndValue(text, LocaleController.getString("PhoneMobile", R.string.PhoneMobile), false);
ProfileActivity.java:                            detailCell.setTextAndValue(text, LocaleController.getString("Username", R.string.Username), false);
ProfileActivity.java:                            detailCell.setTextAndValue(getMessagesController().linkPrefix + "/" + chat.username, LocaleController.getString("InviteLink", R.string.InviteLink), false);
ProfileActivity.java:                            detailCell.setTextAndValue(location.address, LocaleController.getString("AttachLocation", R.string.AttachLocation), false);
ProfileActivity.java:                            value = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
ProfileActivity.java:                        detailCell.setTextAndValue(value, LocaleController.getString("TapToChangePhone", R.string.TapToChangePhone), true);
ProfileActivity.java:                            value = LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty);
ProfileActivity.java:                        detailCell.setTextAndValue(value, LocaleController.getString("Username", R.string.Username), true);
ProfileActivity.java:                            value = userInfo == null ? LocaleController.getString("Loading", R.string.Loading) : userInfo.about;
ProfileActivity.java:                            detailCell.setTextWithEmojiAndValue(value, LocaleController.getString("UserBio", R.string.UserBio), false);
ProfileActivity.java:                            detailCell.setTextAndValue(LocaleController.getString("UserBio", R.string.UserBio), LocaleController.getString("UserBioDetail", R.string.UserBioDetail), false);
ProfileActivity.java:                        aboutLinkCell.setTextAndValue(userInfo.about, LocaleController.getString("UserBio", R.string.UserBio), isBot);
ProfileActivity.java:                            value = LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever);
ProfileActivity.java:                        textCell.setTextAndValue(LocaleController.getString("MessageLifetime", R.string.MessageLifetime), value, false);
ProfileActivity.java:                        textCell.setText(LocaleController.getString("Unblock", R.string.Unblock), false);
ProfileActivity.java:                        textCell.setTextAndValueDrawable(LocaleController.getString("EncryptionKey", R.string.EncryptionKey), identiconDrawable, false);
ProfileActivity.java:                            textCell.setText(LocaleController.getString("ProfileJoinGroup", R.string.ProfileJoinGroup), false);
ProfileActivity.java:                            textCell.setText(LocaleController.getString("ProfileJoinChannel", R.string.ProfileJoinChannel), false);
ProfileActivity.java:                                textCell.setTextAndValueAndIcon(LocaleController.getString("ChannelSubscribers", R.string.ChannelSubscribers), String.format("%d", chatInfo.participants_count), R.drawable.actions_viewmembers, position != membersSectionRow - 1);
ProfileActivity.java:                                textCell.setTextAndValueAndIcon(LocaleController.getString("ChannelMembers", R.string.ChannelMembers), String.format("%d", chatInfo.participants_count), R.drawable.actions_viewmembers, position != membersSectionRow - 1);
ProfileActivity.java:                                textCell.setTextAndIcon(LocaleController.getString("ChannelSubscribers", R.string.ChannelSubscribers), R.drawable.actions_viewmembers, position != membersSectionRow - 1);
ProfileActivity.java:                                textCell.setTextAndIcon(LocaleController.getString("ChannelMembers", R.string.ChannelMembers), R.drawable.actions_viewmembers, position != membersSectionRow - 1);
ProfileActivity.java:                            textCell.setTextAndValueAndIcon(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), String.format("%d", chatInfo.admins_count), R.drawable.actions_addadmin, position != membersSectionRow - 1);
ProfileActivity.java:                            textCell.setTextAndIcon(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), R.drawable.actions_addadmin, position != membersSectionRow - 1);
ProfileActivity.java:                            textCell.setTextAndValueAndIcon(LocaleController.getString("ChannelBlacklist", R.string.ChannelBlacklist), String.format("%d", Math.max(chatInfo.banned_count, chatInfo.kicked_count)), R.drawable.actions_removed, position != membersSectionRow - 1);
ProfileActivity.java:                            textCell.setTextAndIcon(LocaleController.getString("ChannelBlacklist", R.string.ChannelBlacklist), R.drawable.actions_removed, position != membersSectionRow - 1);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("AddMember", R.string.AddMember), R.drawable.actions_addmember2, membersSectionRow == -1);
ProfileActivity.java:                        textCell.setText(LocaleController.getString("SendMessageLocation", R.string.SendMessageLocation), true);
ProfileActivity.java:                        textCell.setText(LocaleController.getString("ReportUserLocation", R.string.ReportUserLocation), false);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("Language", R.string.Language), R.drawable.menu_language, false);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, true);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, true);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, true);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, true);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("Filters", R.string.Filters), R.drawable.menu_folders, true);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("AskAQuestion", R.string.AskAQuestion), R.drawable.menu_support2, true);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("TelegramFAQ", R.string.TelegramFAQ), R.drawable.menu_help, true);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("PrivacyPolicy", R.string.PrivacyPolicy), R.drawable.menu_policy, false);
ProfileActivity.java:                        textCell.setText(LocaleController.getString("DebugSendLogs", R.string.DebugSendLogs), true);
ProfileActivity.java:                        textCell.setText(LocaleController.getString("DebugClearLogs", R.string.DebugClearLogs), switchBackendRow != -1);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("Devices", R.string.Devices), R.drawable.menu_devices, true);
ProfileActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("SetProfilePhoto", R.string.SetProfilePhoto), R.drawable.msg_addphoto, false);
ProfileActivity.java:                                    val = LocaleController.getString("NotificationsCustom", R.string.NotificationsCustom);
ProfileActivity.java:                                    val = LocaleController.getString("NotificationsOn", R.string.NotificationsOn);
ProfileActivity.java:                                val = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Minutes", delta / 60));
ProfileActivity.java:                                val = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Hours", (int) Math.ceil(delta / 60.0f / 60)));
ProfileActivity.java:                                val = LocaleController.formatString("WillUnmuteIn", R.string.WillUnmuteIn, LocaleController.formatPluralString("Days", (int) Math.ceil(delta / 60.0f / 60 / 24)));
ProfileActivity.java:                                val = LocaleController.getString("NotificationsCustom", R.string.NotificationsCustom);
ProfileActivity.java:                                val = enabled ? LocaleController.getString("NotificationsOn", R.string.NotificationsOn) : LocaleController.getString("NotificationsOff", R.string.NotificationsOff);
ProfileActivity.java:                            val = LocaleController.getString("NotificationsOff", R.string.NotificationsOff);
ProfileActivity.java:                        checkCell.setTextAndValueAndCheck(LocaleController.getString("Notifications", R.string.Notifications), val, enabled, false);
ProfileActivity.java:                                    role = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
ProfileActivity.java:                                    role = LocaleController.getString("ChannelAdmin", R.string.ChannelAdmin);
ProfileActivity.java:                                role = LocaleController.getString("ChannelCreator", R.string.ChannelCreator);
ProfileActivity.java:                                role = LocaleController.getString("ChannelAdmin", R.string.ChannelAdmin);
ProfileActivity.java:                new SearchResult(500, LocaleController.getString("EditName", R.string.EditName), 0, () -> presentFragment(new ChangeNameActivity())),
ProfileActivity.java:                new SearchResult(501, LocaleController.getString("ChangePhoneNumber", R.string.ChangePhoneNumber), 0, () -> presentFragment(new ActionIntroActivity(ActionIntroActivity.ACTION_TYPE_CHANGE_PHONE_NUMBER))),
ProfileActivity.java:                new SearchResult(502, LocaleController.getString("AddAnotherAccount", R.string.AddAnotherAccount), 0, () -> {
ProfileActivity.java:                new SearchResult(503, LocaleController.getString("UserBio", R.string.UserBio), 0, () -> {
ProfileActivity.java:                new SearchResult(1, LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsSettingsActivity())),
ProfileActivity.java:                new SearchResult(2, LocaleController.getString("NotificationsPrivateChats", R.string.NotificationsPrivateChats), LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsCustomSettingsActivity(NotificationsController.TYPE_PRIVATE, new ArrayList<>(), true))),
ProfileActivity.java:                new SearchResult(3, LocaleController.getString("NotificationsGroups", R.string.NotificationsGroups), LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsCustomSettingsActivity(NotificationsController.TYPE_GROUP, new ArrayList<>(), true))),
ProfileActivity.java:                new SearchResult(4, LocaleController.getString("NotificationsChannels", R.string.NotificationsChannels), LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsCustomSettingsActivity(NotificationsController.TYPE_CHANNEL, new ArrayList<>(), true))),
ProfileActivity.java:                new SearchResult(5, LocaleController.getString("VoipNotificationSettings", R.string.VoipNotificationSettings), "callsSectionRow", LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsSettingsActivity())),
ProfileActivity.java:                new SearchResult(6, LocaleController.getString("BadgeNumber", R.string.BadgeNumber), "badgeNumberSection", LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsSettingsActivity())),
ProfileActivity.java:                new SearchResult(7, LocaleController.getString("InAppNotifications", R.string.InAppNotifications), "inappSectionRow", LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsSettingsActivity())),
ProfileActivity.java:                new SearchResult(8, LocaleController.getString("ContactJoined", R.string.ContactJoined), "contactJoinedRow", LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsSettingsActivity())),
ProfileActivity.java:                new SearchResult(9, LocaleController.getString("PinnedMessages", R.string.PinnedMessages), "pinnedMessageRow", LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsSettingsActivity())),
ProfileActivity.java:                new SearchResult(10, LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications), "resetNotificationsRow", LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.menu_notifications, () -> presentFragment(new NotificationsSettingsActivity())),
ProfileActivity.java:                new SearchResult(100, LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())),
ProfileActivity.java:                new SearchResult(101, LocaleController.getString("BlockedUsers", R.string.BlockedUsers), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacyUsersActivity())),
ProfileActivity.java:                new SearchResult(105, LocaleController.getString("PrivacyPhone", R.string.PrivacyPhone), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacyControlActivity(ContactsController.PRIVACY_RULES_TYPE_PHONE, true))),
ProfileActivity.java:                new SearchResult(102, LocaleController.getString("PrivacyLastSeen", R.string.PrivacyLastSeen), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacyControlActivity(ContactsController.PRIVACY_RULES_TYPE_LASTSEEN, true))),
ProfileActivity.java:                new SearchResult(103, LocaleController.getString("PrivacyProfilePhoto", R.string.PrivacyProfilePhoto), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacyControlActivity(ContactsController.PRIVACY_RULES_TYPE_PHOTO, true))),
ProfileActivity.java:                new SearchResult(104, LocaleController.getString("PrivacyForwards", R.string.PrivacyForwards), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacyControlActivity(ContactsController.PRIVACY_RULES_TYPE_FORWARDS, true))),
ProfileActivity.java:                new SearchResult(105, LocaleController.getString("PrivacyP2P", R.string.PrivacyP2P), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacyControlActivity(ContactsController.PRIVACY_RULES_TYPE_P2P, true))),
ProfileActivity.java:                new SearchResult(106, LocaleController.getString("Calls", R.string.Calls), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacyControlActivity(ContactsController.PRIVACY_RULES_TYPE_CALLS, true))),
ProfileActivity.java:                new SearchResult(107, LocaleController.getString("GroupsAndChannels", R.string.GroupsAndChannels), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacyControlActivity(ContactsController.PRIVACY_RULES_TYPE_INVITE, true))),
ProfileActivity.java:                new SearchResult(108, LocaleController.getString("Passcode", R.string.Passcode), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PasscodeActivity(SharedConfig.passcodeHash.length() > 0 ? 2 : 0))),
ProfileActivity.java:                new SearchResult(109, LocaleController.getString("TwoStepVerification", R.string.TwoStepVerification), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new TwoStepVerificationActivity())),
ProfileActivity.java:                new SearchResult(110, LocaleController.getString("SessionsTitle", R.string.SessionsTitle), R.drawable.menu_secret, () -> presentFragment(new SessionsActivity(0))),
ProfileActivity.java:                getMessagesController().autoarchiveAvailable ? new SearchResult(121, LocaleController.getString("ArchiveAndMute", R.string.ArchiveAndMute), "newChatsRow", LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())) : null,
ProfileActivity.java:                new SearchResult(112, LocaleController.getString("DeleteAccountIfAwayFor2", R.string.DeleteAccountIfAwayFor2), "deleteAccountRow", LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())),
ProfileActivity.java:                new SearchResult(113, LocaleController.getString("PrivacyPaymentsClear", R.string.PrivacyPaymentsClear), "paymentsClearRow", LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())),
ProfileActivity.java:                new SearchResult(114, LocaleController.getString("WebSessionsTitle", R.string.WebSessionsTitle), LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new SessionsActivity(1))),
ProfileActivity.java:                new SearchResult(115, LocaleController.getString("SyncContactsDelete", R.string.SyncContactsDelete), "contactsDeleteRow", LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())),
ProfileActivity.java:                new SearchResult(116, LocaleController.getString("SyncContacts", R.string.SyncContacts), "contactsSyncRow", LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())),
ProfileActivity.java:                new SearchResult(117, LocaleController.getString("SuggestContacts", R.string.SuggestContacts), "contactsSuggestRow", LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())),
ProfileActivity.java:                new SearchResult(118, LocaleController.getString("MapPreviewProvider", R.string.MapPreviewProvider), "secretMapRow", LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())),
ProfileActivity.java:                new SearchResult(119, LocaleController.getString("SecretWebPage", R.string.SecretWebPage), "secretWebpageRow", LocaleController.getString("PrivacySettings", R.string.PrivacySettings), R.drawable.menu_secret, () -> presentFragment(new PrivacySettingsActivity())),
ProfileActivity.java:                new SearchResult(120, LocaleController.getString("Devices", R.string.Devices), R.drawable.menu_secret, () -> presentFragment(new SessionsActivity(0))),
ProfileActivity.java:                new SearchResult(200, LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(201, LocaleController.getString("DataUsage", R.string.DataUsage), "usageSectionRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(202, LocaleController.getString("StorageUsage", R.string.StorageUsage), LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new CacheControlActivity())),
ProfileActivity.java:                new SearchResult(203, LocaleController.getString("KeepMedia", R.string.KeepMedia), "keepMediaRow", LocaleController.getString("DataSettings", R.string.DataSettings), LocaleController.getString("StorageUsage", R.string.StorageUsage), R.drawable.menu_data, () -> presentFragment(new CacheControlActivity())),
ProfileActivity.java:                new SearchResult(204, LocaleController.getString("ClearMediaCache", R.string.ClearMediaCache), "cacheRow", LocaleController.getString("DataSettings", R.string.DataSettings), LocaleController.getString("StorageUsage", R.string.StorageUsage), R.drawable.menu_data, () -> presentFragment(new CacheControlActivity())),
ProfileActivity.java:                new SearchResult(205, LocaleController.getString("LocalDatabase", R.string.LocalDatabase), "databaseRow", LocaleController.getString("DataSettings", R.string.DataSettings), LocaleController.getString("StorageUsage", R.string.StorageUsage), R.drawable.menu_data, () -> presentFragment(new CacheControlActivity())),
ProfileActivity.java:                new SearchResult(206, LocaleController.getString("NetworkUsage", R.string.NetworkUsage), LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataUsageActivity())),
ProfileActivity.java:                new SearchResult(207, LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload), "mediaDownloadSectionRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(208, LocaleController.getString("WhenUsingMobileData", R.string.WhenUsingMobileData), LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataAutoDownloadActivity(0))),
ProfileActivity.java:                new SearchResult(209, LocaleController.getString("WhenConnectedOnWiFi", R.string.WhenConnectedOnWiFi), LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataAutoDownloadActivity(1))),
ProfileActivity.java:                new SearchResult(210, LocaleController.getString("WhenRoaming", R.string.WhenRoaming), LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataAutoDownloadActivity(2))),
ProfileActivity.java:                new SearchResult(211, LocaleController.getString("ResetAutomaticMediaDownload", R.string.ResetAutomaticMediaDownload), "resetDownloadRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(212, LocaleController.getString("AutoplayMedia", R.string.AutoplayMedia), "autoplayHeaderRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(213, LocaleController.getString("AutoplayGIF", R.string.AutoplayGIF), "autoplayGifsRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(214, LocaleController.getString("AutoplayVideo", R.string.AutoplayVideo), "autoplayVideoRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(215, LocaleController.getString("Streaming", R.string.Streaming), "streamSectionRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(216, LocaleController.getString("EnableStreaming", R.string.EnableStreaming), "enableStreamRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(217, LocaleController.getString("Calls", R.string.Calls), "callsSectionRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(218, LocaleController.getString("VoipUseLessData", R.string.VoipUseLessData), "useLessDataForCallsRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(219, LocaleController.getString("VoipQuickReplies", R.string.VoipQuickReplies), "quickRepliesRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(220, LocaleController.getString("ProxySettings", R.string.ProxySettings), LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new ProxyListActivity())),
ProfileActivity.java:                new SearchResult(221, LocaleController.getString("UseProxyForCalls", R.string.UseProxyForCalls), "callsRow", LocaleController.getString("DataSettings", R.string.DataSettings), LocaleController.getString("ProxySettings", R.string.ProxySettings), R.drawable.menu_data, () -> presentFragment(new ProxyListActivity())),
ProfileActivity.java:                new SearchResult(111, LocaleController.getString("PrivacyDeleteCloudDrafts", R.string.PrivacyDeleteCloudDrafts), "clearDraftsRow", LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, () -> presentFragment(new DataSettingsActivity())),
ProfileActivity.java:                new SearchResult(300, LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(301, LocaleController.getString("TextSizeHeader", R.string.TextSizeHeader), "textSizeHeaderRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(302, LocaleController.getString("ChatBackground", R.string.ChatBackground), LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new WallpapersListActivity(WallpapersListActivity.TYPE_ALL))),
ProfileActivity.java:                new SearchResult(303, LocaleController.getString("SetColor", R.string.SetColor), null, LocaleController.getString("ChatSettings", R.string.ChatSettings), LocaleController.getString("ChatBackground", R.string.ChatBackground), R.drawable.menu_chats, () -> presentFragment(new WallpapersListActivity(WallpapersListActivity.TYPE_COLOR))),
ProfileActivity.java:                new SearchResult(304, LocaleController.getString("ResetChatBackgrounds", R.string.ResetChatBackgrounds), "resetRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), LocaleController.getString("ChatBackground", R.string.ChatBackground), R.drawable.menu_chats, () -> presentFragment(new WallpapersListActivity(WallpapersListActivity.TYPE_ALL))),
ProfileActivity.java:                new SearchResult(305, LocaleController.getString("AutoNightTheme", R.string.AutoNightTheme), LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_NIGHT))),
ProfileActivity.java:                new SearchResult(306, LocaleController.getString("ColorTheme", R.string.ColorTheme), "themeHeaderRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(307, LocaleController.getString("ChromeCustomTabs", R.string.ChromeCustomTabs), "customTabsRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(308, LocaleController.getString("DirectShare", R.string.DirectShare), "directShareRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(309, LocaleController.getString("EnableAnimations", R.string.EnableAnimations), "enableAnimationsRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(310, LocaleController.getString("RaiseToSpeak", R.string.RaiseToSpeak), "raiseToSpeakRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(311, LocaleController.getString("SendByEnter", R.string.SendByEnter), "sendByEnterRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(312, LocaleController.getString("SaveToGallerySettings", R.string.SaveToGallerySettings), "saveToGalleryRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(312, LocaleController.getString("DistanceUnits", R.string.DistanceUnits), "distanceRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC))),
ProfileActivity.java:                new SearchResult(313, LocaleController.getString("StickersAndMasks", R.string.StickersAndMasks), LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, () -> presentFragment(new StickersActivity(MediaDataController.TYPE_IMAGE))),
ProfileActivity.java:                new SearchResult(314, LocaleController.getString("SuggestStickers", R.string.SuggestStickers), "suggestRow", LocaleController.getString("ChatSettings", R.string.ChatSettings), LocaleController.getString("StickersAndMasks", R.string.StickersAndMasks), R.drawable.menu_chats, () -> presentFragment(new StickersActivity(MediaDataController.TYPE_IMAGE))),
ProfileActivity.java:                new SearchResult(315, LocaleController.getString("FeaturedStickers", R.string.FeaturedStickers), null, LocaleController.getString("ChatSettings", R.string.ChatSettings), LocaleController.getString("StickersAndMasks", R.string.StickersAndMasks), R.drawable.menu_chats, () -> presentFragment(new FeaturedStickersActivity())),
ProfileActivity.java:                new SearchResult(316, LocaleController.getString("Masks", R.string.Masks), null, LocaleController.getString("ChatSettings", R.string.ChatSettings), LocaleController.getString("StickersAndMasks", R.string.StickersAndMasks), R.drawable.menu_chats, () -> presentFragment(new StickersActivity(MediaDataController.TYPE_MASK))),
ProfileActivity.java:                new SearchResult(317, LocaleController.getString("ArchivedStickers", R.string.ArchivedStickers), null, LocaleController.getString("ChatSettings", R.string.ChatSettings), LocaleController.getString("StickersAndMasks", R.string.StickersAndMasks), R.drawable.menu_chats, () -> presentFragment(new ArchivedStickersActivity(MediaDataController.TYPE_IMAGE))),
ProfileActivity.java:                new SearchResult(317, LocaleController.getString("ArchivedMasks", R.string.ArchivedMasks), null, LocaleController.getString("ChatSettings", R.string.ChatSettings), LocaleController.getString("StickersAndMasks", R.string.StickersAndMasks), R.drawable.menu_chats, () -> presentFragment(new ArchivedStickersActivity(MediaDataController.TYPE_MASK))),
ProfileActivity.java:                new SearchResult(400, LocaleController.getString("Language", R.string.Language), R.drawable.menu_language, () -> presentFragment(new LanguageSelectActivity())),
ProfileActivity.java:                new SearchResult(402, LocaleController.getString("AskAQuestion", R.string.AskAQuestion), LocaleController.getString("SettingsHelp", R.string.SettingsHelp), R.drawable.menu_help, () -> showDialog(AlertsCreator.createSupportAlert(ProfileActivity.this))),
ProfileActivity.java:                new SearchResult(403, LocaleController.getString("TelegramFAQ", R.string.TelegramFAQ), LocaleController.getString("SettingsHelp", R.string.SettingsHelp), R.drawable.menu_help, () -> Browser.openUrl(getParentActivity(), LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl))),
ProfileActivity.java:                new SearchResult(404, LocaleController.getString("PrivacyPolicy", R.string.PrivacyPolicy), LocaleController.getString("SettingsHelp", R.string.SettingsHelp), R.drawable.menu_help, () -> Browser.openUrl(getParentActivity(), LocaleController.getString("PrivacyPolicyUrl", R.string.PrivacyPolicyUrl))),
ProfileActivity.java:            req2.url = LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl);
ProfileActivity.java:                                            path = new String[]{LocaleController.getString("SettingsSearchFaq", R.string.SettingsSearchFaq), paragraph};
ProfileActivity.java:                                            path = new String[]{LocaleController.getString("SettingsSearchFaq", R.string.SettingsSearchFaq)};
ProfileActivity.java:                    sectionCell.setText(LocaleController.getString("SettingsFaqSearchTitle", R.string.SettingsFaqSearchTitle));
ProfileActivity.java:                    headerCell.setText(LocaleController.getString("SettingsRecent", R.string.SettingsRecent));
ProfileActivity.java:                emptyView.title.setText(LocaleController.getString("SettingsNoRecent", R.string.SettingsNoRecent));
ProfileActivity.java:                        emptyView.title.setText(LocaleController.getString("SettingsNoResults", R.string.SettingsNoResults));
ProfileNotificationsActivity.java:            actionBar.setTitle(LocaleController.getString("NotificationsNewException", R.string.NotificationsNewException));
ProfileNotificationsActivity.java:            actionBar.createMenu().addItem(done_button, LocaleController.getString("Done", R.string.Done).toUpperCase());
ProfileNotificationsActivity.java:            actionBar.setTitle(LocaleController.getString("CustomNotifications", R.string.CustomNotifications));
ProfileNotificationsActivity.java:                                textView.setText(LocaleController.formatString("SmartNotificationsDetail", R.string.SmartNotificationsDetail, times, minutes));
ProfileNotificationsActivity.java:                        builder.setTitle(LocaleController.getString("SmartNotificationsAlert", R.string.SmartNotificationsAlert));
ProfileNotificationsActivity.java:                        builder.setPositiveButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProfileNotificationsActivity.java:                        builder.setNegativeButton(LocaleController.getString("SmartNotificationsDisabled", R.string.SmartNotificationsDisabled), (dialog, which) -> {
ProfileNotificationsActivity.java:                            name = LocaleController.getString("DefaultRingtone", R.string.DefaultRingtone);
ProfileNotificationsActivity.java:                            name = LocaleController.getString("SoundDefault", R.string.SoundDefault);
ProfileNotificationsActivity.java:                        headerCell.setText(LocaleController.getString("General", R.string.General));
ProfileNotificationsActivity.java:                        headerCell.setText(LocaleController.getString("ProfilePopupNotification", R.string.ProfilePopupNotification));
ProfileNotificationsActivity.java:                        headerCell.setText(LocaleController.getString("NotificationsLed", R.string.NotificationsLed));
ProfileNotificationsActivity.java:                        headerCell.setText(LocaleController.getString("VoipNotificationSettings", R.string.VoipNotificationSettings));
ProfileNotificationsActivity.java:                        String value = preferences.getString("sound_" + dialog_id, LocaleController.getString("SoundDefault", R.string.SoundDefault));
ProfileNotificationsActivity.java:                            value = LocaleController.getString("NoSound", R.string.NoSound);
ProfileNotificationsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("Sound", R.string.Sound), value, true);
ProfileNotificationsActivity.java:                        String value = preferences.getString("ringtone_" + dialog_id, LocaleController.getString("DefaultRingtone", R.string.DefaultRingtone));
ProfileNotificationsActivity.java:                            value = LocaleController.getString("NoSound", R.string.NoSound);
ProfileNotificationsActivity.java:                        textCell.setTextAndValue(LocaleController.getString("VoipSettingsRingtone", R.string.VoipSettingsRingtone), value, false);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDefault", R.string.VibrationDefault), smartRow != -1 || priorityRow != -1);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), smartRow != -1 || priorityRow != -1);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled), smartRow != -1 || priorityRow != -1);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Long", R.string.Long), smartRow != -1 || priorityRow != -1);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPriorityHigh", R.string.NotificationsPriorityHigh), false);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPriorityUrgent", R.string.NotificationsPriorityUrgent), false);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPrioritySettings", R.string.NotificationsPrioritySettings), false);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPriorityLow", R.string.NotificationsPriorityLow), false);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("NotificationsImportance", R.string.NotificationsImportance), LocaleController.getString("NotificationsPriorityMedium", R.string.NotificationsPriorityMedium), false);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("SmartNotifications", R.string.SmartNotifications), LocaleController.getString("SmartNotificationsDisabled", R.string.SmartNotificationsDisabled), priorityRow != -1);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("SmartNotifications", R.string.SmartNotifications), LocaleController.formatString("SmartNotificationsInfo", R.string.SmartNotificationsInfo, notifyMaxCount, minutes), priorityRow != -1);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDefault", R.string.VibrationDefault), true);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Short", R.string.Short), true);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled), true);
ProfileNotificationsActivity.java:                            textCell.setTextAndValue(LocaleController.getString("Vibrate", R.string.Vibrate), LocaleController.getString("Long", R.string.Long), true);
ProfileNotificationsActivity.java:                        textCell.setText(LocaleController.getString("ProfilePopupNotificationInfo", R.string.ProfilePopupNotificationInfo));
ProfileNotificationsActivity.java:                        textCell.setText(LocaleController.getString("NotificationsLedInfo", R.string.NotificationsLedInfo));
ProfileNotificationsActivity.java:                            textCell.setText(LocaleController.getString("PriorityInfo", R.string.PriorityInfo));
ProfileNotificationsActivity.java:                        textCell.setText(LocaleController.getString("VoipRingtoneInfo", R.string.VoipRingtoneInfo));
ProfileNotificationsActivity.java:                    textCell.setTextAndColor(LocaleController.getString("NotificationsLedColor", R.string.NotificationsLedColor), color, false);
ProfileNotificationsActivity.java:                        radioCell.setText(LocaleController.getString("PopupEnabled", R.string.PopupEnabled), popup == 1, true);
ProfileNotificationsActivity.java:                        radioCell.setText(LocaleController.getString("PopupDisabled", R.string.PopupDisabled), popup == 2, false);
ProfileNotificationsActivity.java:                    cell.setTextAndCheck(LocaleController.getString("NotificationsEnableCustom", R.string.NotificationsEnableCustom), customEnabled && notificationsEnabled, false);
ProfileNotificationsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("Notifications", R.string.Notifications), notificationsEnabled, true);
ProfileNotificationsActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("MessagePreview", R.string.MessagePreview), preferences.getBoolean("content_preview_" + dialog_id, true), true);
ProxyListActivity.java:            checkImageView.setContentDescription(LocaleController.getString("Edit", R.string.Edit));
ProxyListActivity.java:                        valueTextView.setText(LocaleController.getString("Connected", R.string.Connected) + ", " + LocaleController.formatString("Ping", R.string.Ping, currentInfo.ping));
ProxyListActivity.java:                        valueTextView.setText(LocaleController.getString("Connected", R.string.Connected));
ProxyListActivity.java:                    valueTextView.setText(LocaleController.getString("Connecting", R.string.Connecting));
ProxyListActivity.java:                    valueTextView.setText(LocaleController.getString("Checking", R.string.Checking));
ProxyListActivity.java:                        valueTextView.setText(LocaleController.getString("Available", R.string.Available) + ", " + LocaleController.formatString("Ping", R.string.Ping, currentInfo.ping));
ProxyListActivity.java:                        valueTextView.setText(LocaleController.getString("Available", R.string.Available));
ProxyListActivity.java:                    valueTextView.setText(LocaleController.getString("Unavailable", R.string.Unavailable));
ProxyListActivity.java:        actionBar.setTitle(LocaleController.getString("ProxySettings", R.string.ProxySettings));
ProxyListActivity.java:                builder.setMessage(LocaleController.getString("DeleteProxy", R.string.DeleteProxy));
ProxyListActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ProxyListActivity.java:                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ProxyListActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialog, which) -> {
ProxyListActivity.java:                        textCell.setText(LocaleController.getString("AddProxy", R.string.AddProxy), false);
ProxyListActivity.java:                        headerCell.setText(LocaleController.getString("ProxyConnections", R.string.ProxyConnections));
ProxyListActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UseProxySettings", R.string.UseProxySettings), useProxySettings, false);
ProxyListActivity.java:                        checkCell.setTextAndCheck(LocaleController.getString("UseProxyForCalls", R.string.UseProxyForCalls), useProxyForCalls, false);
ProxyListActivity.java:                        cell.setText(LocaleController.getString("UseProxyForCallsInfo", R.string.UseProxyForCallsInfo));
ProxySettingsActivity.java:        actionBar.setTitle(LocaleController.getString("ProxyDetails", R.string.ProxyDetails));
ProxySettingsActivity.java:        doneItem.setContentDescription(LocaleController.getString("Done", R.string.Done));
ProxySettingsActivity.java:                typeCell[a].setText(LocaleController.getString("UseProxySocks5", R.string.UseProxySocks5), a == currentType, true);
ProxySettingsActivity.java:                typeCell[a].setText(LocaleController.getString("UseProxyTelegram", R.string.UseProxyTelegram), a == currentType, false);
ProxySettingsActivity.java:                    inputFields[a].setHintText(LocaleController.getString("UseProxyAddress", R.string.UseProxyAddress));
ProxySettingsActivity.java:                    inputFields[a].setHintText(LocaleController.getString("UseProxyPassword", R.string.UseProxyPassword));
ProxySettingsActivity.java:                    inputFields[a].setHintText(LocaleController.getString("UseProxyPort", R.string.UseProxyPort));
ProxySettingsActivity.java:                    inputFields[a].setHintText(LocaleController.getString("UseProxyUsername", R.string.UseProxyUsername));
ProxySettingsActivity.java:                    inputFields[a].setHintText(LocaleController.getString("UseProxySecret", R.string.UseProxySecret));
ProxySettingsActivity.java:                bottomCells[i].setText(LocaleController.getString("UseProxyInfo", R.string.UseProxyInfo));
ProxySettingsActivity.java:                bottomCells[i].setText(LocaleController.getString("UseProxyTelegramInfo", R.string.UseProxyTelegramInfo) + "\n\n" + LocaleController.getString("UseProxyTelegramInfo2", R.string.UseProxyTelegramInfo2));
ProxySettingsActivity.java:        pasteCell.setText(LocaleController.getString("PasteFromClipboard", R.string.PasteFromClipboard), false);
ProxySettingsActivity.java:        shareCell.setText(LocaleController.getString("ShareFile", R.string.ShareFile), false);
ProxySettingsActivity.java:            Intent chooserIntent = Intent.createChooser(shareIntent, LocaleController.getString("ShareLink", R.string.ShareLink));
QuickRepliesSettingsActivity.java:		actionBar.setTitle(LocaleController.getString("VoipQuickReplies", R.string.VoipQuickReplies));
QuickRepliesSettingsActivity.java:					cell.setText(LocaleController.getString("VoipQuickRepliesExplain", R.string.VoipQuickRepliesExplain));
QuickRepliesSettingsActivity.java:						defValue = LocaleController.getString("QuickReplyDefault1", R.string.QuickReplyDefault1);
QuickRepliesSettingsActivity.java:						defValue = LocaleController.getString("QuickReplyDefault2", R.string.QuickReplyDefault2);
QuickRepliesSettingsActivity.java:						defValue = LocaleController.getString("QuickReplyDefault3", R.string.QuickReplyDefault3);
QuickRepliesSettingsActivity.java:						defValue = LocaleController.getString("QuickReplyDefault4", R.string.QuickReplyDefault4);
QuickRepliesSettingsActivity.java:					cell.setTextAndCheck(LocaleController.getString("AllowCustomQuickReply", R.string.AllowCustomQuickReply), getParentActivity().getSharedPreferences("mainconfig", Context.MODE_PRIVATE).getBoolean("quick_reply_allow_custom", true), false);
SecretMediaViewer.java:                actionBar.setTitle(LocaleController.getString("DisappearingGif", R.string.DisappearingGif));
SecretMediaViewer.java:                actionBar.setTitle(LocaleController.getString("DisappearingVideo", R.string.DisappearingVideo));
SecretMediaViewer.java:            actionBar.setTitle(LocaleController.getString("DisappearingPhoto", R.string.DisappearingPhoto));
SessionsActivity.java:            actionBar.setTitle(LocaleController.getString("Devices", R.string.Devices));
SessionsActivity.java:            actionBar.setTitle(LocaleController.getString("WebSessionsTitle", R.string.WebSessionsTitle));
SessionsActivity.java:            textView1.setText(LocaleController.getString("NoOtherSessions", R.string.NoOtherSessions));
SessionsActivity.java:            textView1.setText(LocaleController.getString("NoOtherWebSessions", R.string.NoOtherWebSessions));
SessionsActivity.java:            textView2.setText(LocaleController.getString("NoOtherSessionsInfo", R.string.NoOtherSessionsInfo));
SessionsActivity.java:            textView2.setText(LocaleController.getString("NoOtherWebSessionsInfo", R.string.NoOtherWebSessionsInfo));
SessionsActivity.java:                                    text = LocaleController.getString("AccountAlreadyLoggedIn", R.string.AccountAlreadyLoggedIn);
SessionsActivity.java:                                    text = LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text;
SessionsActivity.java:                                AlertsCreator.showSimpleAlert(SessionsActivity.this, LocaleController.getString("AuthAnotherClient", R.string.AuthAnotherClient), text);
SessionsActivity.java:                    builder.setMessage(LocaleController.getString("AreYouSureSessions", R.string.AreYouSureSessions));
SessionsActivity.java:                    builder.setTitle(LocaleController.getString("AreYouSureSessionsTitle", R.string.AreYouSureSessionsTitle));
SessionsActivity.java:                    buttonText = LocaleController.getString("Terminate", R.string.Terminate);
SessionsActivity.java:                    builder.setMessage(LocaleController.getString("AreYouSureWebSessions", R.string.AreYouSureWebSessions));
SessionsActivity.java:                    builder.setTitle(LocaleController.getString("TerminateWebSessionsTitle", R.string.TerminateWebSessionsTitle));
SessionsActivity.java:                    buttonText = LocaleController.getString("Disconnect", R.string.Disconnect);
SessionsActivity.java:                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), Toast.LENGTH_SHORT);
SessionsActivity.java:                                Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("TerminateAllWebSessions", R.string.TerminateAllWebSessions), Toast.LENGTH_SHORT);
SessionsActivity.java:                                Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnknownError", R.string.UnknownError), Toast.LENGTH_SHORT);
SessionsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
SessionsActivity.java:                    builder.setMessage(LocaleController.getString("TerminateSessionText", R.string.TerminateSessionText));
SessionsActivity.java:                    builder.setTitle(LocaleController.getString("AreYouSureSessionTitle", R.string.AreYouSureSessionTitle));
SessionsActivity.java:                    buttonText = LocaleController.getString("Terminate", R.string.Terminate);
SessionsActivity.java:                    builder.setMessage(LocaleController.formatString("TerminateWebSessionText", R.string.TerminateWebSessionText, authorization.domain));
SessionsActivity.java:                    builder.setTitle(LocaleController.getString("TerminateWebSessionTitle", R.string.TerminateWebSessionTitle));
SessionsActivity.java:                    buttonText = LocaleController.getString("Disconnect", R.string.Disconnect);
SessionsActivity.java:                    cell.setText(LocaleController.formatString("TerminateWebSessionStop", R.string.TerminateWebSessionStop, name), "", false, false);
SessionsActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
SessionsActivity.java:                            textCell.setText(LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), false);
SessionsActivity.java:                            textCell.setText(LocaleController.getString("TerminateAllWebSessions", R.string.TerminateAllWebSessions), false);
SessionsActivity.java:                        textCell.setText(LocaleController.getString("AuthAnotherClient", R.string.AuthAnotherClient), !sessions.isEmpty());
SessionsActivity.java:                            privacyCell.setText(LocaleController.getString("ClearOtherSessionsHelp", R.string.ClearOtherSessionsHelp));
SessionsActivity.java:                            privacyCell.setText(LocaleController.getString("ClearOtherWebSessionsHelp", R.string.ClearOtherWebSessionsHelp));
SessionsActivity.java:                                privacyCell.setText(LocaleController.getString("TerminateSessionInfo", R.string.TerminateSessionInfo));
SessionsActivity.java:                            privacyCell.setText(LocaleController.getString("TerminateWebSessionInfo", R.string.TerminateWebSessionInfo));
SessionsActivity.java:                        privacyCell.setText(LocaleController.getString("LoginAttemptsInfo", R.string.LoginAttemptsInfo));
SessionsActivity.java:                        headerCell.setText(LocaleController.getString("CurrentSession", R.string.CurrentSession));
SessionsActivity.java:                            headerCell.setText(LocaleController.getString("OtherSessions", R.string.OtherSessions));
SessionsActivity.java:                            headerCell.setText(LocaleController.getString("OtherWebSessions", R.string.OtherWebSessions));
SessionsActivity.java:                        headerCell.setText(LocaleController.getString("LoginAttempts", R.string.LoginAttempts));
StatisticActivity.java:                chartsViewData[0] = createViewData(stats.iv_interactions_graph, LocaleController.getString("IVInteractionsChartTitle", R.string.IVInteractionsChartTitle), 1);
StatisticActivity.java:                chartsViewData[1] = createViewData(stats.followers_graph, LocaleController.getString("FollowersChartTitle", R.string.FollowersChartTitle), 0);
StatisticActivity.java:                chartsViewData[2] = createViewData(stats.top_hours_graph, LocaleController.getString("TopHoursChartTitle", R.string.TopHoursChartTitle), 0);
StatisticActivity.java:                chartsViewData[3] = createViewData(stats.interactions_graph, LocaleController.getString("InteractionsChartTitle", R.string.InteractionsChartTitle), 1);
StatisticActivity.java:                chartsViewData[4] = createViewData(stats.growth_graph, LocaleController.getString("GrowthChartTitle", R.string.GrowthChartTitle), 0);
StatisticActivity.java:                chartsViewData[5] = createViewData(stats.views_by_source_graph, LocaleController.getString("ViewsBySourceChartTitle", R.string.ViewsBySourceChartTitle), 2);
StatisticActivity.java:                chartsViewData[6] = createViewData(stats.new_followers_by_source_graph, LocaleController.getString("NewFollowersBySourceChartTitle", R.string.NewFollowersBySourceChartTitle), 2);
StatisticActivity.java:                chartsViewData[7] = createViewData(stats.languages_graph, LocaleController.getString("LanguagesChartTitle", R.string.LanguagesChartTitle), 4, true);
StatisticActivity.java:                chartsViewData[8] = createViewData(stats.mute_graph, LocaleController.getString("NotificationsChartTitle", R.string.NotificationsChartTitle), 0);
StatisticActivity.java:                chartsViewData[0] = createViewData(stats.growth_graph, LocaleController.getString("GrowthChartTitle", R.string.GrowthChartTitle), 0);
StatisticActivity.java:                chartsViewData[1] = createViewData(stats.members_graph, LocaleController.getString("GroupMembersChartTitle", R.string.GroupMembersChartTitle), 0);
StatisticActivity.java:                chartsViewData[2] = createViewData(stats.new_members_by_source_graph, LocaleController.getString("NewMembersBySourceChartTitle", R.string.NewMembersBySourceChartTitle), 2);
StatisticActivity.java:                chartsViewData[3] = createViewData(stats.languages_graph, LocaleController.getString("MembersLanguageChartTitle", R.string.MembersLanguageChartTitle), 4, true);
StatisticActivity.java:                chartsViewData[4] = createViewData(stats.messages_graph, LocaleController.getString("MessagesChartTitle", R.string.MessagesChartTitle), 2);
StatisticActivity.java:                chartsViewData[5] = createViewData(stats.actions_graph, LocaleController.getString("ActionsChartTitle", R.string.ActionsChartTitle), 1);
StatisticActivity.java:                chartsViewData[6] = createViewData(stats.top_hours_graph, LocaleController.getString("TopHoursChartTitle", R.string.TopHoursChartTitle), 0);
StatisticActivity.java:                chartsViewData[7] = createViewData(stats.weekdays_graph, LocaleController.getString("TopDaysOfWeekChartTitle", R.string.TopDaysOfWeekChartTitle), 4);
StatisticActivity.java:        loadingTitle.setText(LocaleController.getString("LoadingStats", R.string.LoadingStats));
StatisticActivity.java:        loadingSubtitle.setText(LocaleController.getString("LoadingStatsDescription", R.string.LoadingStatsDescription));
StatisticActivity.java:                items.add(LocaleController.getString("ViewMessageStatistic", R.string.ViewMessageStatistic));
StatisticActivity.java:                items.add(LocaleController.getString("ViewMessage", R.string.ViewMessage));
StatisticActivity.java:        avatarContainer.setSubtitle(LocaleController.getString("Statistics", R.string.Statistics));
StatisticActivity.java:                    headerCell.setTitle(LocaleController.getString("StatisticOverview", R.string.StatisticOverview));
StatisticActivity.java:                    headerCell.setTitle(LocaleController.getString("TopAdmins", R.string.TopAdmins));
StatisticActivity.java:                    headerCell.setTitle(LocaleController.getString("TopInviters", R.string.TopInviters));
StatisticActivity.java:                    headerCell.setTitle(LocaleController.getString("TopMembers", R.string.TopMembers));
StatisticActivity.java:                    headerCell.setTitle(LocaleController.getString("RecentPosts", R.string.RecentPosts));
StatisticActivity.java:            followersTitle = LocaleController.getString("FollowersChartTitle", R.string.FollowersChartTitle);
StatisticActivity.java:            sharesTitle = LocaleController.getString("SharesPerPost", R.string.SharesPerPost);
StatisticActivity.java:            viewsTitle = LocaleController.getString("ViewsPerPost", R.string.ViewsPerPost);
StatisticActivity.java:            notificationsTitle = LocaleController.getString("EnabledNotifications", R.string.EnabledNotifications);
StatisticActivity.java:            membersTitle = LocaleController.getString("MembersOverviewTitle", R.string.MembersOverviewTitle);
StatisticActivity.java:            viewingMembersTitle =  LocaleController.getString("ViewingMembers", R.string.ViewingMembers);
StatisticActivity.java:            postingMembersTitle = LocaleController.getString("PostingMembers", R.string.PostingMembers);
StatisticActivity.java:            messagesTitle = LocaleController.getString("MessagesOverview", R.string.MessagesOverview);
StatisticActivity.java:                stringBuilder.append(LocaleController.formatString("CharactersPerMessage", R.string.CharactersPerMessage, LocaleController.formatPluralString("Characters", poster.avg_chars)));
StatisticActivity.java:            items.add(LocaleController.getString("StatisticOpenProfile", R.string.StatisticOpenProfile));
StatisticActivity.java:            items.add(LocaleController.getString("StatisticSearchUserHistory", R.string.StatisticSearchUserHistory));
StatisticActivity.java:                    items.add(isAdmin ? LocaleController.getString("SetAsAdmin", R.string.SetAsAdmin) : LocaleController.getString("EditAdminRights", R.string.EditAdminRights));
StickersActivity.java:            actionBar.setTitle(LocaleController.getString("StickersName", R.string.StickersName));
StickersActivity.java:            actionBar.setTitle(LocaleController.getString("Masks", R.string.Masks));
StickersActivity.java:                builder.setTitle(LocaleController.getString("SuggestStickers", R.string.SuggestStickers));
StickersActivity.java:                        LocaleController.getString("SuggestStickersAll", R.string.SuggestStickersAll),
StickersActivity.java:                        LocaleController.getString("SuggestStickersInstalled", R.string.SuggestStickersInstalled),
StickersActivity.java:                        LocaleController.getString("SuggestStickersNone", R.string.SuggestStickersNone),
StickersActivity.java:                            builder.setTitle(LocaleController.formatString("DeleteStickerSetsAlertTitle", R.string.DeleteStickerSetsAlertTitle, LocaleController.formatPluralString("StickerSets", count)));
StickersActivity.java:                            builder.setMessage(LocaleController.formatString("DeleteStickersAlertMessage", R.string.DeleteStickersAlertMessage, count));
StickersActivity.java:                            buttonText = LocaleController.getString("Delete", R.string.Delete);
StickersActivity.java:                            builder.setTitle(LocaleController.formatString("ArchiveStickerSetsAlertTitle", R.string.ArchiveStickerSetsAlertTitle, LocaleController.formatPluralString("StickerSets", count)));
StickersActivity.java:                            builder.setMessage(LocaleController.formatString("ArchiveStickersAlertMessage", R.string.ArchiveStickersAlertMessage, count));
StickersActivity.java:                            buttonText = LocaleController.getString("Archive", R.string.Archive);
StickersActivity.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
StickersActivity.java:                    getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("StickersShare", R.string.StickersShare)), 500);
StickersActivity.java:                        infoPrivacyCell.setText(addStickersBotSpan(LocaleController.getString("StickersBotInfo", R.string.StickersBotInfo)));
StickersActivity.java:                            infoPrivacyCell.setText(LocaleController.getString("ArchivedStickersInfo", R.string.ArchivedStickersInfo));
StickersActivity.java:                            infoPrivacyCell.setText(LocaleController.getString("ArchivedMasksInfo", R.string.ArchivedMasksInfo));
StickersActivity.java:                        infoPrivacyCell.setText(LocaleController.getString("LoopAnimatedStickersInfo", R.string.LoopAnimatedStickersInfo));
StickersActivity.java:                        infoPrivacyCell.setText(LocaleController.getString("MasksInfo", R.string.MasksInfo));
StickersActivity.java:                        settingsCell.setTextAndValue(LocaleController.getString("FeaturedStickers", R.string.FeaturedStickers), count > 0 ? Integer.toString(count) : "", true);
StickersActivity.java:                            settingsCell.setTextAndValue(LocaleController.getString("ArchivedStickers", R.string.ArchivedStickers), value, true);
StickersActivity.java:                            settingsCell.setTextAndValue(LocaleController.getString("ArchivedMasks", R.string.ArchivedMasks), value, true);
StickersActivity.java:                        settingsCell.setTextAndValue(LocaleController.getString("Masks", R.string.Masks), count > 0 ? Integer.toString(count) : "", false);
StickersActivity.java:                                value = LocaleController.getString("SuggestStickersAll", R.string.SuggestStickersAll);
StickersActivity.java:                                value = LocaleController.getString("SuggestStickersInstalled", R.string.SuggestStickersInstalled);
StickersActivity.java:                                value = LocaleController.getString("SuggestStickersNone", R.string.SuggestStickersNone);
StickersActivity.java:                        settingsCell.setTextAndValue(LocaleController.getString("SuggestStickers", R.string.SuggestStickers), value, true);
StickersActivity.java:                        cell.setTextAndCheck(LocaleController.getString("LoopAnimatedStickers", R.string.LoopAnimatedStickers), SharedConfig.loopStickers, true);
StickersActivity.java:                                    LocaleController.getString("StickersHide", R.string.StickersHide),
StickersActivity.java:                                    LocaleController.getString("StickersReorder", R.string.StickersReorder)
StickersActivity.java:                                    LocaleController.getString("StickersHide", R.string.StickersHide),
StickersActivity.java:                                    LocaleController.getString("StickersCopy", R.string.StickersCopy),
StickersActivity.java:                                    LocaleController.getString("StickersReorder", R.string.StickersReorder),
StickersActivity.java:                                    LocaleController.getString("StickersShare", R.string.StickersShare),
StickersActivity.java:                                    LocaleController.getString("StickersRemove", R.string.StickersRemove),
StickersActivity.java:                        final String stickersReorderHint = LocaleController.getString("StickersReorderHint", R.string.StickersReorderHint);
StroageUsageView.java:        calculatingTextView.setText(LocaleController.getString("CalculatingSize",R.string.CalculatingSize));
StroageUsageView.java:        freeSizeTextView.setText(LocaleController.formatString("TotalDeviceFreeSize", R.string.TotalDeviceFreeSize, AndroidUtilities.formatFileSize(totalDeviceFreeSize)));
StroageUsageView.java:        totlaSizeTextView.setText(LocaleController.formatString("TotalDeviceSize", R.string.TotalDeviceSize, AndroidUtilities.formatFileSize(totalDeviceSize - totalDeviceFreeSize)));
StroageUsageView.java:                textSettingsCell.setText(LocaleController.getString("ClearTelegramCache", R.string.ClearTelegramCache), false);
StroageUsageView.java:                telegramCacheTextView.setText(LocaleController.formatString("TelegramCacheSize", R.string.TelegramCacheSize, AndroidUtilities.formatFileSize(totalSize + database)));
StroageUsageView.java:                telegramDatabaseTextView.setText(LocaleController.formatString("LocalDatabaseSize", R.string.LocalDatabaseSize, AndroidUtilities.formatFileSize(database)));
SwipeGestureSettingsView.java:        strings[SWIPE_GESTURE_PIN] = LocaleController.getString("SwipeSettingsPin", R.string.SwipeSettingsPin);
SwipeGestureSettingsView.java:        strings[SWIPE_GESTURE_READ] = LocaleController.getString("SwipeSettingsRead", R.string.SwipeSettingsRead);
SwipeGestureSettingsView.java:        strings[SWIPE_GESTURE_ARCHIVE] = LocaleController.getString("SwipeSettingsArchive", R.string.SwipeSettingsArchive);
SwipeGestureSettingsView.java:        strings[SWIPE_GESTURE_MUTE] = LocaleController.getString("SwipeSettingsMute", R.string.SwipeSettingsMute);
SwipeGestureSettingsView.java:        strings[SWIPE_GESTURE_DELETE] = LocaleController.getString("SwipeSettingsDelete", R.string.SwipeSettingsDelete);
SwipeGestureSettingsView.java:        strings[SWIPE_GESTURE_FOLDERS] = LocaleController.getString("SwipeSettingsFolders", R.string.SwipeSettingsFolders);
TextSelectionHint.java:            String text = LocaleController.getString("TextSelectionHit", R.string.TextSelectionHit);
ThemeActivity.java:            actionBar.setTitle(LocaleController.getString("ChatSettings", R.string.ChatSettings));
ThemeActivity.java:            menuItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", R.string.AccDescrMoreOptions));
ThemeActivity.java:            menuItem.addSubItem(share_theme, R.drawable.msg_share, LocaleController.getString("ShareTheme", R.string.ShareTheme));
ThemeActivity.java:            menuItem.addSubItem(edit_theme, R.drawable.msg_edit, LocaleController.getString("EditThemeColors", R.string.EditThemeColors));
ThemeActivity.java:            menuItem.addSubItem(create_theme, R.drawable.menu_palette, LocaleController.getString("CreateNewThemeMenu", R.string.CreateNewThemeMenu));
ThemeActivity.java:            menuItem.addSubItem(reset_settings, R.drawable.msg_reset, LocaleController.getString("ThemeResetToDefaults", R.string.ThemeResetToDefaults));
ThemeActivity.java:            actionBar.setTitle(LocaleController.getString("AutoNightTheme", R.string.AutoNightTheme));
ThemeActivity.java:                    builder.setTitle(LocaleController.getString("NewTheme", R.string.NewTheme));
ThemeActivity.java:                    builder.setMessage(LocaleController.getString("CreateNewThemeAlert", R.string.CreateNewThemeAlert));
ThemeActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemeActivity.java:                    builder.setPositiveButton(LocaleController.getString("CreateTheme", R.string.CreateTheme), (dialog, which) -> AlertsCreator.createThemeCreateDialog(ThemeActivity.this, 0, null, null));
ThemeActivity.java:                    builder1.setTitle(LocaleController.getString("ThemeResetToDefaultsTitle", R.string.ThemeResetToDefaultsTitle));
ThemeActivity.java:                    builder1.setMessage(LocaleController.getString("ThemeResetToDefaultsText", R.string.ThemeResetToDefaultsText));
ThemeActivity.java:                    builder1.setPositiveButton(LocaleController.getString("Reset", R.string.Reset), (dialogInterface, i) -> {
ThemeActivity.java:                    builder1.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemeActivity.java:                builder.setTitle(LocaleController.getString("DistanceUnitsTitle", R.string.DistanceUnitsTitle));
ThemeActivity.java:                        LocaleController.getString("DistanceUnitsAutomatic", R.string.DistanceUnitsAutomatic),
ThemeActivity.java:                        LocaleController.getString("DistanceUnitsKilometers", R.string.DistanceUnitsKilometers),
ThemeActivity.java:                        LocaleController.getString("DistanceUnitsMiles", R.string.DistanceUnitsMiles)
ThemeActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemeActivity.java:                builder.setTitle(LocaleController.getString("SortBy", R.string.SortBy));
ThemeActivity.java:                        LocaleController.getString("Default", R.string.Default),
ThemeActivity.java:                        LocaleController.getString("SortFirstName", R.string.SortFirstName),
ThemeActivity.java:                        LocaleController.getString("SortLastName", R.string.SortLastName)
ThemeActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemeActivity.java:                    String value = enabled ? Theme.getCurrentNightThemeName() : LocaleController.getString("AutoNightThemeOff", R.string.AutoNightThemeOff);
ThemeActivity.java:                            type = LocaleController.getString("AutoNightScheduled", R.string.AutoNightScheduled);
ThemeActivity.java:                            type = LocaleController.getString("AutoNightSystemDefault", R.string.AutoNightSystemDefault);
ThemeActivity.java:                            type = LocaleController.getString("AutoNightAdaptive", R.string.AutoNightAdaptive);
ThemeActivity.java:                    checkCell.setTextAndValueAndCheck(LocaleController.getString("AutoNightTheme", R.string.AutoNightTheme), value, enabled, true);
ThemeActivity.java:                        cell.setTextAndValue(LocaleController.getString("AutoNightFrom", R.string.AutoNightFrom), String.format("%02d:%02d", hourOfDay, minute), true);
ThemeActivity.java:                        cell.setTextAndValue(LocaleController.getString("AutoNightTo", R.string.AutoNightTo), String.format("%02d:%02d", hourOfDay, minute), true);
ThemeActivity.java:                    builder.setTitle(LocaleController.getString("GpsDisabledAlertTitle", R.string.GpsDisabledAlertTitle));
ThemeActivity.java:                    builder.setMessage(LocaleController.getString("GpsDisabledAlertText", R.string.GpsDisabledAlertText));
ThemeActivity.java:                    builder.setPositiveButton(LocaleController.getString("ConnectingToProxyEnable", R.string.ConnectingToProxyEnable), (dialog, id) -> {
ThemeActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemeActivity.java:                        ((TextSettingsCell) holder.itemView).setTextAndValue(LocaleController.getString("AutoNightUpdateLocation", R.string.AutoNightUpdateLocation), Theme.autoNightCityName, false);
ThemeActivity.java:        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
ThemeActivity.java:            builder.setMessage(LocaleController.getString("PermissionNoLocationPosition", R.string.PermissionNoLocationPosition));
ThemeActivity.java:            builder.setMessage(LocaleController.getString("PermissionNoLocation", R.string.PermissionNoLocation));
ThemeActivity.java:        builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), (dialog, which) -> {
ThemeActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
ThemeActivity.java:        return LocaleController.formatString("AutoNightUpdateLocationInfo", R.string.AutoNightUpdateLocationInfo, sunsetTimeStr, sunriseTimeStr);
ThemeActivity.java:            info.setText(LocaleController.getString("ColorPickerMainColor", R.string.ColorPickerMainColor));
ThemeActivity.java:            info.setText(LocaleController.getString("ColorPickerMainColor", R.string.ColorPickerMainColor));
ThemeActivity.java:                        LocaleController.getString("ExportTheme", R.string.ExportTheme)
ThemeActivity.java:                        LocaleController.getString("ShareFile", R.string.ShareFile),
ThemeActivity.java:                        LocaleController.getString("ExportTheme", R.string.ExportTheme),
ThemeActivity.java:                        themeInfo.info == null || !themeInfo.info.isDefault && themeInfo.info.creator ? LocaleController.getString("Edit", R.string.Edit) : null,
ThemeActivity.java:                        themeInfo.info != null && themeInfo.info.creator ? LocaleController.getString("ThemeSetUrl", R.string.ThemeSetUrl) : null,
ThemeActivity.java:                        hasDelete ? LocaleController.getString("Delete", R.string.Delete) : null};
ThemeActivity.java:                        startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
ThemeActivity.java:                    builder1.setTitle(LocaleController.getString("DeleteThemeTitle", R.string.DeleteThemeTitle));
ThemeActivity.java:                    builder1.setMessage(LocaleController.getString("DeleteThemeAlert", R.string.DeleteThemeAlert));
ThemeActivity.java:                    builder1.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
ThemeActivity.java:                    builder1.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemeActivity.java:                                    cell.setText(LocaleController.formatString("AutoNightBrightnessInfo", R.string.AutoNightBrightnessInfo, (int) (100 * Theme.autoNightBrighnessThreshold)));
ThemeActivity.java:                                    LocaleController.getString("OpenInEditor", R.string.OpenInEditor),
ThemeActivity.java:                                    LocaleController.getString("ShareTheme", R.string.ShareTheme),
ThemeActivity.java:                                    accent.info != null && accent.info.creator ? LocaleController.getString("ThemeSetUrl", R.string.ThemeSetUrl) : null,
ThemeActivity.java:                                    LocaleController.getString("DeleteTheme", R.string.DeleteTheme)
ThemeActivity.java:                                    builder1.setTitle(LocaleController.getString("DeleteThemeTitle", R.string.DeleteThemeTitle));
ThemeActivity.java:                                    builder1.setMessage(LocaleController.getString("DeleteThemeAlert", R.string.DeleteThemeAlert));
ThemeActivity.java:                                    builder1.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
ThemeActivity.java:                                    builder1.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemeActivity.java:                            cell.setTextAndValue(LocaleController.getString("AutoNightTheme", R.string.AutoNightTheme), LocaleController.getString("AutoNightThemeOff", R.string.AutoNightThemeOff), false);
ThemeActivity.java:                            cell.setTextAndValue(LocaleController.getString("AutoNightTheme", R.string.AutoNightTheme), Theme.getCurrentNightThemeName(), false);
ThemeActivity.java:                        cell.setTextAndValue(LocaleController.getString("AutoNightFrom", R.string.AutoNightFrom), String.format("%02d:%02d", currentHour, currentMinute), true);
ThemeActivity.java:                        cell.setTextAndValue(LocaleController.getString("AutoNightTo", R.string.AutoNightTo), String.format("%02d:%02d", currentHour, currentMinute), false);
ThemeActivity.java:                        cell.setTextAndValue(LocaleController.getString("AutoNightUpdateLocation", R.string.AutoNightUpdateLocation), Theme.autoNightCityName, false);
ThemeActivity.java:                            value = LocaleController.getString("Default", R.string.Default);
ThemeActivity.java:                            value = LocaleController.getString("FirstName", R.string.SortFirstName);
ThemeActivity.java:                            value = LocaleController.getString("LastName", R.string.SortLastName);
ThemeActivity.java:                        cell.setTextAndValue(LocaleController.getString("SortBy", R.string.SortBy), value, true);
ThemeActivity.java:                        cell.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts), true);
ThemeActivity.java:                        cell.setText(LocaleController.getString("StickersAndMasks", R.string.StickersAndMasks), false);
ThemeActivity.java:                            value = LocaleController.getString("DistanceUnitsAutomatic", R.string.DistanceUnitsAutomatic);
ThemeActivity.java:                            value = LocaleController.getString("DistanceUnitsKilometers", R.string.DistanceUnitsKilometers);
ThemeActivity.java:                            value = LocaleController.getString("DistanceUnitsMiles", R.string.DistanceUnitsMiles);
ThemeActivity.java:                        cell.setTextAndValue(LocaleController.getString("DistanceUnits", R.string.DistanceUnits), value, false);
ThemeActivity.java:                        cell.setText(LocaleController.formatString("AutoNightBrightnessInfo", R.string.AutoNightBrightnessInfo, (int) (100 * Theme.autoNightBrighnessThreshold)));
ThemeActivity.java:                        typeCell.setValue(LocaleController.getString("AutoNightDisabled", R.string.AutoNightDisabled), Theme.selectedAutoNightType == Theme.AUTO_NIGHT_TYPE_NONE, true);
ThemeActivity.java:                        typeCell.setValue(LocaleController.getString("AutoNightScheduled", R.string.AutoNightScheduled), Theme.selectedAutoNightType == Theme.AUTO_NIGHT_TYPE_SCHEDULED, true);
ThemeActivity.java:                        typeCell.setValue(LocaleController.getString("AutoNightAdaptive", R.string.AutoNightAdaptive), Theme.selectedAutoNightType == Theme.AUTO_NIGHT_TYPE_AUTOMATIC, nightSystemDefaultRow != -1);
ThemeActivity.java:                        typeCell.setValue(LocaleController.getString("AutoNightSystemDefault", R.string.AutoNightSystemDefault), Theme.selectedAutoNightType == Theme.AUTO_NIGHT_TYPE_SYSTEM, false);
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("AutoNightSchedule", R.string.AutoNightSchedule));
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("AutoNightBrightness", R.string.AutoNightBrightness));
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("AutoNightPreferred", R.string.AutoNightPreferred));
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("ColorTheme", R.string.ColorTheme));
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("TextSizeHeader", R.string.TextSizeHeader));
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("ChatList", R.string.ChatList));
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("BubbleRadius", R.string.BubbleRadius));
ThemeActivity.java:                        headerCell.setText(LocaleController.getString("ChatListSwipeGesture", R.string.ChatListSwipeGesture));
ThemeActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("AutoNightLocation", R.string.AutoNightLocation), Theme.autoNightScheduleByLocation, true);
ThemeActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("EnableAnimations", R.string.EnableAnimations), preferences.getBoolean("view_animations", true), true);
ThemeActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("SendByEnter", R.string.SendByEnter), preferences.getBoolean("send_by_enter", false), true);
ThemeActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("SaveToGallerySettings", R.string.SaveToGallerySettings), SharedConfig.saveToGallery, true);
ThemeActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("RaiseToSpeak", R.string.RaiseToSpeak), SharedConfig.raiseToSpeak, true);
ThemeActivity.java:                        textCheckCell.setTextAndValueAndCheck(LocaleController.getString("ChromeCustomTabs", R.string.ChromeCustomTabs), LocaleController.getString("ChromeCustomTabsInfo", R.string.ChromeCustomTabsInfo), SharedConfig.customTabs, false, true);
ThemeActivity.java:                        textCheckCell.setTextAndValueAndCheck(LocaleController.getString("DirectShare", R.string.DirectShare), LocaleController.getString("DirectShareInfo", R.string.DirectShareInfo), SharedConfig.directShare, false, true);
ThemeActivity.java:                        textCheckCell.setTextAndCheck(LocaleController.getString("LargeEmoji", R.string.LargeEmoji), SharedConfig.allowBigEmoji, true);
ThemeActivity.java:                        String value = enabled ? Theme.getCurrentNightThemeName() : LocaleController.getString("AutoNightThemeOff", R.string.AutoNightThemeOff);
ThemeActivity.java:                                type = LocaleController.getString("AutoNightScheduled", R.string.AutoNightScheduled);
ThemeActivity.java:                                type = LocaleController.getString("AutoNightSystemDefault", R.string.AutoNightSystemDefault);
ThemeActivity.java:                                type = LocaleController.getString("AutoNightAdaptive", R.string.AutoNightAdaptive);
ThemeActivity.java:                        checkCell.setTextAndValueAndCheck(LocaleController.getString("AutoNightTheme", R.string.AutoNightTheme), value, enabled, true);
ThemeActivity.java:                        cell.setTextAndIcon(LocaleController.getString("ChangeChatBackground", R.string.ChangeChatBackground), R.drawable.msg_background, false);
ThemePreviewActivity.java:        item.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
ThemePreviewActivity.java:        actionBar.setTitle(LocaleController.getString("ThemePreview", R.string.ThemePreview));
ThemePreviewActivity.java:                actionBar2.setTitle(LocaleController.getString("BackgroundPreview", R.string.BackgroundPreview));
ThemePreviewActivity.java:                saveItem = menu2.addItem(4, LocaleController.getString("Save", R.string.Save).toUpperCase());
ThemePreviewActivity.java:                dropDownContainer.addSubItem(1, LocaleController.getString("ColorPickerMainColor", R.string.ColorPickerMainColor));
ThemePreviewActivity.java:                dropDownContainer.addSubItem(2, LocaleController.getString("ColorPickerBackground", R.string.ColorPickerBackground));
ThemePreviewActivity.java:                dropDownContainer.addSubItem(3, LocaleController.getString("ColorPickerMyMessages", R.string.ColorPickerMyMessages));
ThemePreviewActivity.java:                dropDown.setText(LocaleController.getString("ColorPickerMainColor", R.string.ColorPickerMainColor));
ThemePreviewActivity.java:                bottomOverlayChatText.setText(LocaleController.getString("SetBackground", R.string.SetBackground));
ThemePreviewActivity.java:                    texts[0] = LocaleController.getString("BackgroundMotion", R.string.BackgroundMotion);
ThemePreviewActivity.java:                    texts[1] = LocaleController.getString("BackgroundPattern", R.string.BackgroundPattern);
ThemePreviewActivity.java:                    texts[0] = LocaleController.getString("BackgroundColor", R.string.BackgroundColor);
ThemePreviewActivity.java:                    texts[1] = LocaleController.getString("BackgroundPattern", R.string.BackgroundPattern);
ThemePreviewActivity.java:                    texts[2] = LocaleController.getString("BackgroundMotion", R.string.BackgroundMotion);
ThemePreviewActivity.java:                    texts[0] = LocaleController.getString("BackgroundBlurred", R.string.BackgroundBlurred);
ThemePreviewActivity.java:                    texts[1] = LocaleController.getString("BackgroundMotion", R.string.BackgroundMotion);
ThemePreviewActivity.java:                        patternsCancelButton[a].setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
ThemePreviewActivity.java:                        patternsSaveButton[a].setText(LocaleController.getString("ApplyTheme", R.string.ApplyTheme).toUpperCase());
ThemePreviewActivity.java:                        titleView.setText(LocaleController.getString("BackgroundChoosePattern", R.string.BackgroundChoosePattern));
ThemePreviewActivity.java:                        intensityCell.setText(LocaleController.getString("BackgroundIntensity", R.string.BackgroundIntensity));
ThemePreviewActivity.java:                                builder1.setTitle(LocaleController.getString("DeleteThemeTitle", R.string.DeleteThemeTitle));
ThemePreviewActivity.java:                                builder1.setMessage(LocaleController.getString("DeleteThemeAlert", R.string.DeleteThemeAlert));
ThemePreviewActivity.java:                                builder1.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
ThemePreviewActivity.java:                                builder1.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemePreviewActivity.java:            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
ThemePreviewActivity.java:            doneButton.setText(LocaleController.getString("ApplyTheme", R.string.ApplyTheme).toUpperCase());
ThemePreviewActivity.java:            builder.setTitle(LocaleController.getString("ChangeChatBackground", R.string.ChangeChatBackground));
ThemePreviewActivity.java:            builder.setMessage(LocaleController.getString("ChangeWallpaperToColor", R.string.ChangeWallpaperToColor));
ThemePreviewActivity.java:            builder.setPositiveButton(LocaleController.getString("Change", R.string.Change), (dialog, which) -> {
ThemePreviewActivity.java:            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
ThemePreviewActivity.java:                dropDown.setText(LocaleController.getString("ColorPickerMainColor", R.string.ColorPickerMainColor));
ThemePreviewActivity.java:                dropDown.setText(LocaleController.getString("ColorPickerBackground", R.string.ColorPickerBackground));
ThemePreviewActivity.java:                dropDown.setText(LocaleController.getString("ColorPickerMyMessages", R.string.ColorPickerMyMessages));
ThemePreviewActivity.java:            builder.setTitle(LocaleController.getString("SaveChangesAlertTitle", R.string.SaveChangesAlertTitle));
ThemePreviewActivity.java:            builder.setMessage(LocaleController.getString("SaveChangesAlertText", R.string.SaveChangesAlertText));
ThemePreviewActivity.java:            builder.setPositiveButton(LocaleController.getString("Save", R.string.Save), (dialogInterface, i) -> actionBar2.getActionBarMenuOnItemClick().onItemClick(4));
ThemePreviewActivity.java:            builder.setNegativeButton(LocaleController.getString("PassportDiscard", R.string.PassportDiscard), (dialog, which) -> cancelThemeApply(false));
ThemePreviewActivity.java:                    actionBar2.setSubtitle(LocaleController.getString("LoadingFullImage", R.string.LoadingFullImage));
ThemePreviewActivity.java:            customDialog.name = LocaleController.getString("ThemePreviewDialog1", R.string.ThemePreviewDialog1);
ThemePreviewActivity.java:            customDialog.message = LocaleController.getString("ThemePreviewDialogMessage1", R.string.ThemePreviewDialogMessage1);
ThemePreviewActivity.java:            customDialog.name = LocaleController.getString("ThemePreviewDialog2", R.string.ThemePreviewDialog2);
ThemePreviewActivity.java:            customDialog.message = LocaleController.getString("ThemePreviewDialogMessage2", R.string.ThemePreviewDialogMessage2);
ThemePreviewActivity.java:            customDialog.name = LocaleController.getString("ThemePreviewDialog3", R.string.ThemePreviewDialog3);
ThemePreviewActivity.java:            customDialog.message = LocaleController.getString("ThemePreviewDialogMessage3", R.string.ThemePreviewDialogMessage3);
ThemePreviewActivity.java:            customDialog.name = LocaleController.getString("ThemePreviewDialog4", R.string.ThemePreviewDialog4);
ThemePreviewActivity.java:            customDialog.message = LocaleController.getString("ThemePreviewDialogMessage4", R.string.ThemePreviewDialogMessage4);
ThemePreviewActivity.java:            customDialog.name = LocaleController.getString("ThemePreviewDialog5", R.string.ThemePreviewDialog5);
ThemePreviewActivity.java:            customDialog.message = LocaleController.getString("ThemePreviewDialogMessage5", R.string.ThemePreviewDialogMessage5);
ThemePreviewActivity.java:            customDialog.name = LocaleController.getString("ThemePreviewDialog6", R.string.ThemePreviewDialog6);
ThemePreviewActivity.java:            customDialog.message = LocaleController.getString("ThemePreviewDialogMessage6", R.string.ThemePreviewDialogMessage6);
ThemePreviewActivity.java:            customDialog.name = LocaleController.getString("ThemePreviewDialog7", R.string.ThemePreviewDialog7);
ThemePreviewActivity.java:            customDialog.message = LocaleController.getString("ThemePreviewDialogMessage7", R.string.ThemePreviewDialogMessage7);
ThemePreviewActivity.java:            customDialog.name = LocaleController.getString("ThemePreviewDialog8", R.string.ThemePreviewDialog8);
ThemePreviewActivity.java:            customDialog.message = LocaleController.getString("ThemePreviewDialogMessage8", R.string.ThemePreviewDialogMessage8);
ThemePreviewActivity.java:                    message.message = LocaleController.getString("BackgroundColorSinglePreviewLine2", R.string.BackgroundColorSinglePreviewLine2);
ThemePreviewActivity.java:                    message.message = LocaleController.getString("BackgroundPreviewLine2", R.string.BackgroundPreviewLine2);
ThemePreviewActivity.java:                    message.message = LocaleController.getString("BackgroundColorSinglePreviewLine1", R.string.BackgroundColorSinglePreviewLine1);
ThemePreviewActivity.java:                    message.message = LocaleController.getString("BackgroundPreviewLine1", R.string.BackgroundPreviewLine1);
ThemePreviewActivity.java:                attributeFilename.file_name = LocaleController.getString("NewThemePreviewReply2", R.string.NewThemePreviewReply2) + ".mp3";
ThemePreviewActivity.java:                String text = LocaleController.getString("NewThemePreviewLine3", R.string.NewThemePreviewLine3);
ThemePreviewActivity.java:                message.message = LocaleController.getString("NewThemePreviewLine1", R.string.NewThemePreviewLine1);
ThemePreviewActivity.java:                message2.customReplyName = LocaleController.getString("NewThemePreviewName", R.string.NewThemePreviewName);
ThemePreviewActivity.java:                    message.message = LocaleController.getString("ThemePreviewLine1", R.string.ThemePreviewLine1);
ThemePreviewActivity.java:                    message.message = LocaleController.getString("ThemePreviewLine2", R.string.ThemePreviewLine2);
ThemePreviewActivity.java:                    audio.performer = LocaleController.getString("ThemePreviewSongPerformer", R.string.ThemePreviewSongPerformer);
ThemePreviewActivity.java:                    audio.title = LocaleController.getString("ThemePreviewSongTitle", R.string.ThemePreviewSongTitle);
ThemePreviewActivity.java:                    message.message = LocaleController.getString("ThemePreviewLine3", R.string.ThemePreviewLine3);
ThemePreviewActivity.java:                    messageObject.customReplyName = LocaleController.getString("ThemePreviewLine3Reply", R.string.ThemePreviewLine3Reply);
ThemePreviewActivity.java:                    message.message = LocaleController.getString("ThemePreviewLine4", R.string.ThemePreviewLine4);
ThemeSetUrlActivity.java:            actionBar.setTitle(LocaleController.getString("NewThemeTitle", R.string.NewThemeTitle));
ThemeSetUrlActivity.java:            actionBar.setTitle(LocaleController.getString("EditThemeTitle", R.string.EditThemeTitle));
ThemeSetUrlActivity.java:        doneButton = menu.addItem(done_button, LocaleController.getString("Done", R.string.Done).toUpperCase());
ThemeSetUrlActivity.java:        headerCell.setText(LocaleController.getString("Info", R.string.Info));
ThemeSetUrlActivity.java:        nameField.setHint(LocaleController.getString("ThemeNamePlaceholder", R.string.ThemeNamePlaceholder));
ThemeSetUrlActivity.java:        linkField.setHint(LocaleController.getString("SetUrlPlaceholder", R.string.SetUrlPlaceholder));
ThemeSetUrlActivity.java:                    String text = LocaleController.formatString("ThemeHelpLink", R.string.ThemeHelpLink, url);
ThemeSetUrlActivity.java:                    helpInfoCell.setText(AndroidUtilities.replaceTags(LocaleController.getString("ThemeCreateHelp2", R.string.ThemeCreateHelp2)));
ThemeSetUrlActivity.java:                    helpInfoCell.setText(AndroidUtilities.replaceTags(LocaleController.getString("ThemeCreateHelp", R.string.ThemeCreateHelp)));
ThemeSetUrlActivity.java:            helpInfoCell.setText(AndroidUtilities.replaceTags(LocaleController.getString("ThemeCreateHelp", R.string.ThemeCreateHelp)));
ThemeSetUrlActivity.java:            helpInfoCell.setText(infoText = AndroidUtilities.replaceTags(LocaleController.getString("ThemeSetUrlHelp", R.string.ThemeSetUrlHelp)));
ThemeSetUrlActivity.java:            createCell.setText(LocaleController.getString("UseDifferentTheme", R.string.UseDifferentTheme), false);
ThemeSetUrlActivity.java:                titleView.setText(LocaleController.getString("ChooseTheme", R.string.ChooseTheme));
ThemeSetUrlActivity.java:            createInfoCell.setText(AndroidUtilities.replaceTags(LocaleController.getString("UseDifferentThemeInfo", R.string.UseDifferentThemeInfo)));
ThemeSetUrlActivity.java:                setCheckText(LocaleController.getString("SetUrlInvalid", R.string.SetUrlInvalid), Theme.key_windowBackgroundWhiteRedText4);
ThemeSetUrlActivity.java:                        AlertsCreator.showSimpleAlert(this, LocaleController.getString("Theme", R.string.Theme), LocaleController.getString("SetUrlInvalidStartNumber", R.string.SetUrlInvalidStartNumber));
ThemeSetUrlActivity.java:                        setCheckText(LocaleController.getString("SetUrlInvalidStartNumber", R.string.SetUrlInvalidStartNumber), Theme.key_windowBackgroundWhiteRedText4);
ThemeSetUrlActivity.java:                        AlertsCreator.showSimpleAlert(this, LocaleController.getString("Theme", R.string.Theme), LocaleController.getString("SetUrlInvalid", R.string.SetUrlInvalid));
ThemeSetUrlActivity.java:                        setCheckText(LocaleController.getString("SetUrlInvalid", R.string.SetUrlInvalid), Theme.key_windowBackgroundWhiteRedText4);
ThemeSetUrlActivity.java:                AlertsCreator.showSimpleAlert(this, LocaleController.getString("Theme", R.string.Theme), LocaleController.getString("SetUrlInvalidShort", R.string.SetUrlInvalidShort));
ThemeSetUrlActivity.java:                setCheckText(LocaleController.getString("SetUrlInvalidShort", R.string.SetUrlInvalidShort), Theme.key_windowBackgroundWhiteRedText4);
ThemeSetUrlActivity.java:                AlertsCreator.showSimpleAlert(this, LocaleController.getString("Theme", R.string.Theme), LocaleController.getString("SetUrlInvalidLong", R.string.SetUrlInvalidLong));
ThemeSetUrlActivity.java:                setCheckText(LocaleController.getString("SetUrlInvalidLong", R.string.SetUrlInvalidLong), Theme.key_windowBackgroundWhiteRedText4);
ThemeSetUrlActivity.java:                setCheckText(LocaleController.formatString("SetUrlAvailable", R.string.SetUrlAvailable, url), Theme.key_windowBackgroundWhiteGreenText);
ThemeSetUrlActivity.java:            setCheckText(LocaleController.getString("SetUrlChecking", R.string.SetUrlChecking), Theme.key_windowBackgroundWhiteGrayText8);
ThemeSetUrlActivity.java:                            setCheckText(LocaleController.formatString("SetUrlAvailable", R.string.SetUrlAvailable, url), Theme.key_windowBackgroundWhiteGreenText);
ThemeSetUrlActivity.java:                            setCheckText(LocaleController.getString("SetUrlInUse", R.string.SetUrlInUse), Theme.key_windowBackgroundWhiteRedText4);
ThemeSetUrlActivity.java:            AlertsCreator.showSimpleAlert(this, LocaleController.getString("Theme", R.string.Theme), LocaleController.getString("ThemeNameInvalid", R.string.ThemeNameInvalid));
TooManyCommunitiesActivity.java:        actionBar.setTitle(LocaleController.getString("LimitReached", R.string.LimitReached));
TooManyCommunitiesActivity.java:        searchItem.setContentDescription(LocaleController.getString("Search", R.string.Search));
TooManyCommunitiesActivity.java:        searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
TooManyCommunitiesActivity.java:        emptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
TooManyCommunitiesActivity.java:            buttonTextView.setText(LocaleController.formatString("LeaveChats", R.string.LeaveChats, LocaleController.formatPluralString("Chats", selectedIds.size())));
TooManyCommunitiesActivity.java:                        signatures.add(LocaleController.formatString("InactiveChatSignature", R.string.InactiveChatSignature, members, dateFormat));
TooManyCommunitiesActivity.java:                        signatures.add(LocaleController.formatString("InactiveChannelSignature", R.string.InactiveChannelSignature, dateFormat));
TooManyCommunitiesActivity.java:                        signatures.add(LocaleController.formatString("InactiveChatSignature", R.string.InactiveChatSignature, members, dateFormat));
TooManyCommunitiesActivity.java:                        message = LocaleController.getString("TooManyCommunitiesHintJoin", R.string.TooManyCommunitiesHintJoin);
TooManyCommunitiesActivity.java:                        message = LocaleController.getString("TooManyCommunitiesHintEdit", R.string.TooManyCommunitiesHintEdit);
TooManyCommunitiesActivity.java:                        message = LocaleController.getString("TooManyCommunitiesHintCreate", R.string.TooManyCommunitiesHintCreate);
TooManyCommunitiesActivity.java:                    header.setText(LocaleController.getString("InactiveChats", R.string.InactiveChats));
TwoStepVerificationActivity.java:        doneItem = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56), LocaleController.getString("Done", R.string.Done));
TwoStepVerificationActivity.java:        bottomTextView.setText(LocaleController.getString("YourEmailInfo", R.string.YourEmailInfo));
TwoStepVerificationActivity.java:        bottomButton.setText(LocaleController.getString("YourEmailSkip", R.string.YourEmailSkip));
TwoStepVerificationActivity.java:                            showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
TwoStepVerificationActivity.java:                            showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
TwoStepVerificationActivity.java:                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
TwoStepVerificationActivity.java:                builder.setNegativeButton(LocaleController.getString("RestorePasswordResetAccount", R.string.RestorePasswordResetAccount), (dialog, which) -> Browser.openUrl(getParentActivity(), "https://telegram.org/deactivate?phone=" + UserConfig.getInstance(currentAccount).getClientPhone()));
TwoStepVerificationActivity.java:                builder.setTitle(LocaleController.getString("RestorePasswordNoEmailTitle", R.string.RestorePasswordNoEmailTitle));
TwoStepVerificationActivity.java:                builder.setMessage(LocaleController.getString("RestorePasswordNoEmailText", R.string.RestorePasswordNoEmailText));
TwoStepVerificationActivity.java:                String text = LocaleController.getString("TurnPasswordOffQuestion", R.string.TurnPasswordOffQuestion);
TwoStepVerificationActivity.java:                    text += "\n\n" + LocaleController.getString("TurnPasswordOffPassport", R.string.TurnPasswordOffPassport);
TwoStepVerificationActivity.java:                String title = LocaleController.getString("TurnPasswordOffQuestionTitle", R.string.TurnPasswordOffQuestionTitle);
TwoStepVerificationActivity.java:                String buttonText = LocaleController.getString("Disable", R.string.Disable);
TwoStepVerificationActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
TwoStepVerificationActivity.java:        actionBar.setTitle(LocaleController.getString("TwoStepVerificationTitle", R.string.TwoStepVerificationTitle));
TwoStepVerificationActivity.java:            titleTextView.setText(LocaleController.getString("PleaseEnterCurrentPasswordTransfer", R.string.PleaseEnterCurrentPasswordTransfer));
TwoStepVerificationActivity.java:            titleTextView.setText(LocaleController.getString("PleaseEnterCurrentPassword", R.string.PleaseEnterCurrentPassword));
TwoStepVerificationActivity.java:                    AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
TwoStepVerificationActivity.java:                    bottomButton.setText(LocaleController.getString("ForgotPassword", R.string.ForgotPassword));
TwoStepVerificationActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
TwoStepVerificationActivity.java:                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
TwoStepVerificationActivity.java:                        showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
TwoStepVerificationActivity.java:                                    AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
TwoStepVerificationActivity.java:                                showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
TwoStepVerificationActivity.java:                                showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
TwoStepVerificationActivity.java:                        textCell.setText(LocaleController.getString("ChangePassword", R.string.ChangePassword), true);
TwoStepVerificationActivity.java:                        textCell.setText(LocaleController.getString("SetAdditionalPassword", R.string.SetAdditionalPassword), true);
TwoStepVerificationActivity.java:                        textCell.setText(LocaleController.getString("TurnPasswordOff", R.string.TurnPasswordOff), true);
TwoStepVerificationActivity.java:                        textCell.setText(LocaleController.getString("ChangeRecoveryEmail", R.string.ChangeRecoveryEmail), false);
TwoStepVerificationActivity.java:                        textCell.setText(LocaleController.getString("SetRecoveryEmail", R.string.SetRecoveryEmail), false);
TwoStepVerificationActivity.java:                        privacyCell.setText(LocaleController.getString("SetAdditionalPasswordInfo", R.string.SetAdditionalPasswordInfo));
TwoStepVerificationActivity.java:                        privacyCell.setText(LocaleController.getString("EnabledPasswordText", R.string.EnabledPasswordText));
TwoStepVerificationSetupActivity.java:                    builder.setMessage(LocaleController.getString("ResendCodeInfo", R.string.ResendCodeInfo));
TwoStepVerificationSetupActivity.java:                    builder.setTitle(LocaleController.getString("TwoStepVerificationTitle", R.string.TwoStepVerificationTitle));
TwoStepVerificationSetupActivity.java:                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
TwoStepVerificationSetupActivity.java:                        text = LocaleController.getString("CancelEmailQuestion", R.string.CancelEmailQuestion);
TwoStepVerificationSetupActivity.java:                        text = LocaleController.getString("CancelPasswordQuestion", R.string.CancelPasswordQuestion);
TwoStepVerificationSetupActivity.java:                    String title = LocaleController.getString("CancelEmailQuestionTitle", R.string.CancelEmailQuestionTitle);
TwoStepVerificationSetupActivity.java:                    String buttonText = LocaleController.getString("Abort", R.string.Abort);
TwoStepVerificationSetupActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
TwoStepVerificationSetupActivity.java:            item.addSubItem(item_resend, LocaleController.getString("ResendCode", R.string.ResendCode));
TwoStepVerificationSetupActivity.java:            item.addSubItem(item_abort, LocaleController.getString("AbortPasswordMenu", R.string.AbortPasswordMenu));
TwoStepVerificationSetupActivity.java:                builder.setMessage(LocaleController.getString("YourEmailSkipWarningText", R.string.YourEmailSkipWarningText));
TwoStepVerificationSetupActivity.java:                builder.setTitle(LocaleController.getString("YourEmailSkipWarning", R.string.YourEmailSkipWarning));
TwoStepVerificationSetupActivity.java:                builder.setPositiveButton(LocaleController.getString("YourEmailSkip", R.string.YourEmailSkip), (dialogInterface, i) -> {
TwoStepVerificationSetupActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
TwoStepVerificationSetupActivity.java:                            Toast.makeText(getParentActivity(), LocaleController.getString("PasswordDoNotMatch", R.string.PasswordDoNotMatch), Toast.LENGTH_SHORT).show();
TwoStepVerificationSetupActivity.java:                            Toast.makeText(getParentActivity(), LocaleController.getString("PasswordAsHintError", R.string.PasswordAsHintError), Toast.LENGTH_SHORT).show();
TwoStepVerificationSetupActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
TwoStepVerificationSetupActivity.java:                            builder.setMessage(LocaleController.getString("PasswordReset", R.string.PasswordReset));
TwoStepVerificationSetupActivity.java:                            builder.setTitle(LocaleController.getString("TwoStepVerificationTitle", R.string.TwoStepVerificationTitle));
TwoStepVerificationSetupActivity.java:                                showAlertWithText(LocaleController.getString("TwoStepVerificationTitle", R.string.TwoStepVerificationTitle), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
TwoStepVerificationSetupActivity.java:                                showAlertWithText(LocaleController.getString("TwoStepVerificationTitle", R.string.TwoStepVerificationTitle), error.text);
TwoStepVerificationSetupActivity.java:                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
TwoStepVerificationSetupActivity.java:                                    builder.setMessage(LocaleController.getString("YourEmailSuccessChangedText", R.string.YourEmailSuccessChangedText));
TwoStepVerificationSetupActivity.java:                                    builder.setMessage(LocaleController.getString("YourEmailSuccessText", R.string.YourEmailSuccessText));
TwoStepVerificationSetupActivity.java:                                builder.setTitle(LocaleController.getString("YourPasswordSuccess", R.string.YourPasswordSuccess));
TwoStepVerificationSetupActivity.java:                                showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
TwoStepVerificationSetupActivity.java:                                showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
TwoStepVerificationSetupActivity.java:                showPasswordButton.setContentDescription(LocaleController.getString("TwoStepVerificationShowPassword", R.string.TwoStepVerificationShowPassword));
TwoStepVerificationSetupActivity.java:                    descriptionText3.setText(LocaleController.getString("RestoreEmailTroubleNoEmail", R.string.RestoreEmailTroubleNoEmail));
TwoStepVerificationSetupActivity.java:                    descriptionText3.setOnClickListener(v -> showAlertWithText(LocaleController.getString("RestorePasswordNoEmailTitle", R.string.RestorePasswordNoEmailTitle), LocaleController.getString("RestoreEmailTroubleText", R.string.RestoreEmailTroubleText)));
TwoStepVerificationSetupActivity.java:                titleTextView.setText(LocaleController.getString("TwoStepVerificationTitle", R.string.TwoStepVerificationTitle));
TwoStepVerificationSetupActivity.java:                descriptionText.setText(LocaleController.getString("SetAdditionalPasswordInfo", R.string.SetAdditionalPasswordInfo));
TwoStepVerificationSetupActivity.java:                buttonTextView.setText(LocaleController.getString("TwoStepVerificationSetPassword", R.string.TwoStepVerificationSetPassword));
TwoStepVerificationSetupActivity.java:                titleTextView.setText(LocaleController.getString("TwoStepVerificationPasswordSet", R.string.TwoStepVerificationPasswordSet));
TwoStepVerificationSetupActivity.java:                descriptionText.setText(LocaleController.getString("TwoStepVerificationPasswordSetInfo", R.string.TwoStepVerificationPasswordSetInfo));
TwoStepVerificationSetupActivity.java:                    buttonTextView.setText(LocaleController.getString("TwoStepVerificationPasswordReturnPassport", R.string.TwoStepVerificationPasswordReturnPassport));
TwoStepVerificationSetupActivity.java:                    buttonTextView.setText(LocaleController.getString("TwoStepVerificationPasswordReturnSettings", R.string.TwoStepVerificationPasswordReturnSettings));
TwoStepVerificationSetupActivity.java:                    actionBar.setTitle(LocaleController.getString("PleaseEnterNewFirstPassword", R.string.PleaseEnterNewFirstPassword));
TwoStepVerificationSetupActivity.java:                    titleTextView.setText(LocaleController.getString("PleaseEnterNewFirstPassword", R.string.PleaseEnterNewFirstPassword));
TwoStepVerificationSetupActivity.java:                    actionBar.setTitle(LocaleController.getString("PleaseEnterFirstPassword", R.string.PleaseEnterFirstPassword));
TwoStepVerificationSetupActivity.java:                    titleTextView.setText(LocaleController.getString("PleaseEnterFirstPassword", R.string.PleaseEnterFirstPassword));
TwoStepVerificationSetupActivity.java:                buttonTextView.setText(LocaleController.getString("Continue", R.string.Continue));
TwoStepVerificationSetupActivity.java:                passwordEditText.setHint(LocaleController.getString("LoginPassword", R.string.LoginPassword));
TwoStepVerificationSetupActivity.java:                actionBar.setTitle(LocaleController.getString("PleaseReEnterPassword", R.string.PleaseReEnterPassword));
TwoStepVerificationSetupActivity.java:                titleTextView.setText(LocaleController.getString("PleaseReEnterPassword", R.string.PleaseReEnterPassword));
TwoStepVerificationSetupActivity.java:                buttonTextView.setText(LocaleController.getString("Continue", R.string.Continue));
TwoStepVerificationSetupActivity.java:                passwordEditText.setHint(LocaleController.getString("LoginPassword", R.string.LoginPassword));
TwoStepVerificationSetupActivity.java:                actionBar.setTitle(LocaleController.getString("PasswordHint", R.string.PasswordHint));
TwoStepVerificationSetupActivity.java:                topButton.setText(LocaleController.getString("YourEmailSkip", R.string.YourEmailSkip));
TwoStepVerificationSetupActivity.java:                titleTextView.setText(LocaleController.getString("PasswordHint", R.string.PasswordHint));
TwoStepVerificationSetupActivity.java:                buttonTextView.setText(LocaleController.getString("Continue", R.string.Continue));
TwoStepVerificationSetupActivity.java:                passwordEditText.setHint(LocaleController.getString("PasswordHintPlaceholder", R.string.PasswordHintPlaceholder));
TwoStepVerificationSetupActivity.java:                actionBar.setTitle(LocaleController.getString("RecoveryEmailTitle", R.string.RecoveryEmailTitle));
TwoStepVerificationSetupActivity.java:                    topButton.setText(LocaleController.getString("YourEmailSkip", R.string.YourEmailSkip));
TwoStepVerificationSetupActivity.java:                titleTextView.setText(LocaleController.getString("RecoveryEmailTitle", R.string.RecoveryEmailTitle));
TwoStepVerificationSetupActivity.java:                buttonTextView.setText(LocaleController.getString("Continue", R.string.Continue));
TwoStepVerificationSetupActivity.java:                passwordEditText.setHint(LocaleController.getString("PaymentShippingEmailPlaceholder", R.string.PaymentShippingEmailPlaceholder));
TwoStepVerificationSetupActivity.java:                actionBar.setTitle(LocaleController.getString("VerificationCode", R.string.VerificationCode));
TwoStepVerificationSetupActivity.java:                titleTextView.setText(LocaleController.getString("VerificationCode", R.string.VerificationCode));
TwoStepVerificationSetupActivity.java:                buttonTextView.setText(LocaleController.getString("Continue", R.string.Continue));
TwoStepVerificationSetupActivity.java:                passwordEditText.setHint(LocaleController.getString("EnterCode", R.string.EnterCode));
TwoStepVerificationSetupActivity.java:                descriptionText2.setText(LocaleController.formatString("EmailPasswordConfirmText2", R.string.EmailPasswordConfirmText2, currentPassword.email_unconfirmed_pattern != null ? currentPassword.email_unconfirmed_pattern : ""));
TwoStepVerificationSetupActivity.java:                actionBar.setTitle(LocaleController.getString("PasswordRecovery", R.string.PasswordRecovery));
TwoStepVerificationSetupActivity.java:                titleTextView.setText(LocaleController.getString("PasswordRecovery", R.string.PasswordRecovery));
TwoStepVerificationSetupActivity.java:                buttonTextView.setText(LocaleController.getString("Continue", R.string.Continue));
TwoStepVerificationSetupActivity.java:                passwordEditText.setHint(LocaleController.getString("EnterCode", R.string.EnterCode));
TwoStepVerificationSetupActivity.java:                descriptionText2.setText(LocaleController.formatString("RestoreEmailSent", R.string.RestoreEmailSent, currentPassword.email_unconfirmed_pattern != null ? currentPassword.email_unconfirmed_pattern : ""));
TwoStepVerificationSetupActivity.java:                    AlertsCreator.showUpdateAppAlert(getParentActivity(), LocaleController.getString("UpdateAppAlert", R.string.UpdateAppAlert), true);
TwoStepVerificationSetupActivity.java:        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
TwoStepVerificationSetupActivity.java:                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (dialogInterface, i) -> {
TwoStepVerificationSetupActivity.java:                                builder.setMessage(LocaleController.getString("YourEmailSuccessText", R.string.YourEmailSuccessText));
TwoStepVerificationSetupActivity.java:                                builder.setMessage(LocaleController.getString("YourPasswordChangedSuccessText", R.string.YourPasswordChangedSuccessText));
TwoStepVerificationSetupActivity.java:                            builder.setTitle(LocaleController.getString("YourPasswordSuccess", R.string.YourPasswordSuccess));
TwoStepVerificationSetupActivity.java:                            showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("PasswordEmailInvalid", R.string.PasswordEmailInvalid));
TwoStepVerificationSetupActivity.java:                            showAlertWithText(LocaleController.getString("AppName", R.string.AppName), LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
TwoStepVerificationSetupActivity.java:                            showAlertWithText(LocaleController.getString("AppName", R.string.AppName), error.text);
VoIPFragment.java:        emojiRationalTextView.setText(LocaleController.formatString("CallEmojiKeyTooltip", R.string.CallEmojiKeyTooltip, UserObject.getFirstName(callingUser)));
VoIPFragment.java:                        builder.append(LocaleController.getString("VoipInVideoCallBranding", R.string.VoipInVideoCallBranding));
VoIPFragment.java:                        builder.append(LocaleController.getString("VoipInCallBranding", R.string.VoipInCallBranding));
VoIPFragment.java:        backIcon.setContentDescription(LocaleController.getString("Back", R.string.Back));
VoIPFragment.java:        speakerPhoneIcon.setContentDescription(LocaleController.getString("VoipSpeaker", R.string.VoipSpeaker));
VoIPFragment.java:        tapToVideoTooltip.setText(LocaleController.getString("TapToTurnCamera", R.string.TapToTurnCamera));
VoIPFragment.java:                    statusTextView.setText(LocaleController.getString("VoipInVideoCallBranding", R.string.VoipInVideoCallBranding), true, animated);
VoIPFragment.java:                    statusTextView.setText(LocaleController.getString("VoipInCallBranding", R.string.VoipInCallBranding), true, animated);
VoIPFragment.java:                statusTextView.setText(LocaleController.getString("VoipConnecting", R.string.VoipConnecting), true, animated);
VoIPFragment.java:                statusTextView.setText(LocaleController.getString("VoipExchangingKeys", R.string.VoipExchangingKeys), true, animated);
VoIPFragment.java:                statusTextView.setText(LocaleController.getString("VoipWaiting", R.string.VoipWaiting), true, animated);
VoIPFragment.java:                statusTextView.setText(LocaleController.getString("VoipRinging", R.string.VoipRinging), true, animated);
VoIPFragment.java:                statusTextView.setText(LocaleController.getString("VoipRequesting", R.string.VoipRequesting), true, animated);
VoIPFragment.java:                statusTextView.setText(LocaleController.getString("VoipBusy", R.string.VoipBusy), false, animated);
VoIPFragment.java:                statusTextView.setText(LocaleController.getString("VoipFailed", R.string.VoipFailed), false, animated);
VoIPFragment.java:                        final String message = LocaleController.formatString("VoipPeerIncompatible", R.string.VoipPeerIncompatible, name);
VoIPFragment.java:                            final String message = LocaleController.formatString("VoipPeerVideoOutdated", R.string.VoipPeerVideoOutdated, name);
VoIPFragment.java:                                    .setTitle(LocaleController.getString("VoipFailed", R.string.VoipFailed))
VoIPFragment.java:                                    .setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), (dialogInterface, i) -> windowView.finish())
VoIPFragment.java:                                    .setPositiveButton(LocaleController.getString("VoipPeerVideoOutdatedMakeVoice", R.string.VoipPeerVideoOutdatedMakeVoice), (dialogInterface, i) -> {
VoIPFragment.java:                            final String message = LocaleController.formatString("VoipPeerOutdated", R.string.VoipPeerOutdated, name);
VoIPFragment.java:                        final String message = LocaleController.formatString("CallNotAvailable", R.string.CallNotAvailable, name);
VoIPFragment.java:                        showErrorDialog(LocaleController.getString("VoipErrorUnknown", R.string.VoipErrorUnknown));
VoIPFragment.java:                    notificationsLayout.addNotification(R.drawable.calls_mute_mini, LocaleController.formatString("VoipUserMicrophoneIsOff", R.string.VoipUserMicrophoneIsOff, UserObject.getFirstName(callingUser)), "muted", animated);
VoIPFragment.java:                    notificationsLayout.addNotification(R.drawable.calls_camera_mini, LocaleController.formatString("VoipUserCameraIsOff", R.string.VoipUserCameraIsOff, UserObject.getFirstName(callingUser)), "video", animated);
VoIPFragment.java:                    notificationsLayout.addNotification(R.drawable.calls_mute_mini, LocaleController.formatString("VoipUserMicrophoneIsOff", R.string.VoipUserMicrophoneIsOff, UserObject.getFirstName(callingUser)), "muted", animated);
VoIPFragment.java:            bottomButtons[3].setData(R.drawable.calls_decline, Color.WHITE, 0xFFF01D2C, LocaleController.getString("VoipEndCall", R.string.VoipEndCall), false, animated);
VoIPFragment.java:            bottomButton.setData(R.drawable.calls_unmute, Color.BLACK, Color.WHITE, LocaleController.getString("VoipUnmute", R.string.VoipUnmute), true, animated);
VoIPFragment.java:            bottomButton.setData(R.drawable.calls_unmute, Color.WHITE, ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.12f)), LocaleController.getString("VoipMute", R.string.VoipMute), false, animated);
VoIPFragment.java:                        text = LocaleController.getString("AccDescrVoipMicOff", R.string.AccDescrVoipMicOff);
VoIPFragment.java:                        text = LocaleController.getString("AccDescrVoipMicOn", R.string.AccDescrVoipMicOn);
VoIPFragment.java:                bottomButton.setData(R.drawable.calls_video, Color.WHITE, ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.12f)), LocaleController.getString("VoipStopVideo", R.string.VoipStopVideo), false, animated);
VoIPFragment.java:                bottomButton.setData(R.drawable.calls_video, Color.BLACK, Color.WHITE, LocaleController.getString("VoipStartVideo", R.string.VoipStartVideo), true, animated);
VoIPFragment.java:                        builder.setMessage(LocaleController.getString("VoipSwitchToVideoCall", R.string.VoipSwitchToVideoCall));
VoIPFragment.java:                        builder.setPositiveButton(LocaleController.getString("VoipSwitch", R.string.VoipSwitch), (dialogInterface, i) -> {
VoIPFragment.java:                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
VoIPFragment.java:            bottomButton.setData(R.drawable.calls_bluetooth, Color.WHITE, ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.12f)), LocaleController.getString("VoipAudioRoutingBluetooth", R.string.VoipAudioRoutingBluetooth), false, animated);
VoIPFragment.java:            bottomButton.setData(R.drawable.calls_speaker, Color.BLACK, Color.WHITE, LocaleController.getString("VoipSpeaker", R.string.VoipSpeaker), false, animated);
VoIPFragment.java:            bottomButton.setData(R.drawable.calls_speaker, Color.WHITE, ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.12f)), LocaleController.getString("VoipSpeaker", R.string.VoipSpeaker), false, animated);
VoIPFragment.java:            bottomButton.setData(R.drawable.calls_flip,  ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.5f)), ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.12f)), LocaleController.getString("VoipFlip", R.string.VoipFlip), false, animated);
VoIPFragment.java:                bottomButton.setData(R.drawable.calls_flip, Color.BLACK, Color.WHITE, LocaleController.getString("VoipFlip", R.string.VoipFlip), false, animated);
VoIPFragment.java:                bottomButton.setData(R.drawable.calls_flip, Color.WHITE, ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.12f)), LocaleController.getString("VoipFlip", R.string.VoipFlip), false, animated);
VoIPFragment.java:                            text = LocaleController.getString("AccDescrVoipCamSwitchedToBack", R.string.AccDescrVoipCamSwitchedToBack);
VoIPFragment.java:                            text = LocaleController.getString("AccDescrVoipCamSwitchedToFront", R.string.AccDescrVoipCamSwitchedToFront);
VoIPFragment.java:                    text = LocaleController.getString("AccDescrVoipCamOn", R.string.AccDescrVoipCamOn);
VoIPFragment.java:                    text = LocaleController.getString("AccDescrVoipCamOff", R.string.AccDescrVoipCamOff);
VoIPFragment.java:                .setTitle(LocaleController.getString("VoipFailed", R.string.VoipFailed))
VoIPFragment.java:                .setPositiveButton(LocaleController.getString("OK", R.string.OK), null)
WallpapersListActivity.java:            R.string.Blue,
WallpapersListActivity.java:            R.string.Red,
WallpapersListActivity.java:            R.string.Orange,
WallpapersListActivity.java:            R.string.Yellow,
WallpapersListActivity.java:            R.string.Green,
WallpapersListActivity.java:            R.string.Teal,
WallpapersListActivity.java:            R.string.Purple,
WallpapersListActivity.java:            R.string.Pink,
WallpapersListActivity.java:            R.string.Brown,
WallpapersListActivity.java:            R.string.Black,
WallpapersListActivity.java:            R.string.Gray,
WallpapersListActivity.java:            R.string.White
WallpapersListActivity.java:            actionBar.setTitle(LocaleController.getString("ChatBackground", R.string.ChatBackground));
WallpapersListActivity.java:            actionBar.setTitle(LocaleController.getString("SelectColorTitle", R.string.SelectColorTitle));
WallpapersListActivity.java:                    builder.setMessage(LocaleController.formatString("DeleteChatBackgroundsAlert", R.string.DeleteChatBackgroundsAlert));
WallpapersListActivity.java:                    builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), (dialogInterface, i) -> {
WallpapersListActivity.java:                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
WallpapersListActivity.java:                    searchItem.setSearchFieldHint(LocaleController.getString("SearchBackgrounds", R.string.SearchBackgrounds));
WallpapersListActivity.java:            searchItem.setSearchFieldHint(LocaleController.getString("SearchBackgrounds", R.string.SearchBackgrounds));
WallpapersListActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(forward, R.drawable.msg_forward, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward)));
WallpapersListActivity.java:            actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete)));
WallpapersListActivity.java:                builder.setTitle(LocaleController.getString("ResetChatBackgroundsAlertTitle", R.string.ResetChatBackgroundsAlertTitle));
WallpapersListActivity.java:                builder.setMessage(LocaleController.getString("ResetChatBackgroundsAlert", R.string.ResetChatBackgroundsAlert));
WallpapersListActivity.java:                builder.setPositiveButton(LocaleController.getString("Reset", R.string.Reset), (dialogInterface, i) -> {
WallpapersListActivity.java:                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
WallpapersListActivity.java:        searchEmptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
WallpapersListActivity.java:                        String color = LocaleController.getString("BackgroundSearchColor", R.string.BackgroundSearchColor);
WallpapersListActivity.java:                    cell.setText(LocaleController.getString("SearchByColor", R.string.SearchByColor));
WallpapersListActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("SelectFromGallery", R.string.SelectFromGallery), R.drawable.profile_photos, true);
WallpapersListActivity.java:                        textCell.setTextAndIcon(LocaleController.getString("SetColor", R.string.SetColor), R.drawable.menu_palette, false);
WallpapersListActivity.java:                        textCell.setText(LocaleController.getString("ResetChatBackgrounds", R.string.ResetChatBackgrounds), false);
WallpapersListActivity.java:                        cell.setText(LocaleController.getString("ResetChatBackgroundsInfo", R.string.ResetChatBackgroundsInfo));
WebviewActivity.java:            menuItem.addSubItem(open_in, R.drawable.msg_openin, LocaleController.getString("OpenInExternalApp", R.string.OpenInExternalApp));
WebviewActivity.java:            actionBar.setTitle(LocaleController.getString("Statistics", R.string.Statistics));
